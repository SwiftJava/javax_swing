
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.basic.BasicTextUI$BasicHighlighter ///

open class BasicTextUI_BasicHighlighter: DefaultHighlighter, UIResource {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BasicTextUI_BasicHighlighterJNIClass: jclass?

    /// public static final javax.swing.text.LayeredHighlighter$LayerPainter javax.swing.text.DefaultHighlighter.DefaultPainter

    // Skipping field: false true false false false false 

    /// private static final javax.swing.text.Highlighter$Highlight[] javax.swing.text.DefaultHighlighter.noHighlights

    /// private javax.swing.text.JTextComponent javax.swing.text.DefaultHighlighter.component

    /// private boolean javax.swing.text.DefaultHighlighter.drawsLayeredHighlights

    /// private java.util.Vector javax.swing.text.DefaultHighlighter.highlights

    /// private javax.swing.text.DefaultHighlighter$SafeDamager javax.swing.text.DefaultHighlighter.safeDamager

    /// public javax.swing.plaf.basic.BasicTextUI$BasicHighlighter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/basic/BasicTextUI$BasicHighlighter", classCache: &BasicTextUI_BasicHighlighter.BasicTextUI_BasicHighlighterJNIClass, methodSig: "()V", methodCache: &BasicTextUI_BasicHighlighter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

}

