
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JMenu ///

open class JMenu: JMenuItem {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JMenuJNIClass: jclass?

    /// private static final boolean javax.swing.JMenu.DEBUG

    /// private static final boolean javax.swing.JMenu.TRACE

    /// private static final boolean javax.swing.JMenu.VERBOSE

    /// private static final java.lang.String javax.swing.JMenu.uiClassID

    /// private java.awt.Point javax.swing.JMenu.customMenuLocation

    /// private int javax.swing.JMenu.delay

    /// private javax.swing.event.ChangeListener javax.swing.JMenu.menuChangeListener

    /// private javax.swing.event.MenuEvent javax.swing.JMenu.menuEvent

    /// protected javax.swing.JMenu$WinListener javax.swing.JMenu.popupListener

    private static var popupListener_FieldID: jfieldID?

    open var popupListener: /* class javax.swing.JMenu$WinListener */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "popupListener", fieldType: "Ljavax/swing/JMenu$WinListener;", fieldCache: &JMenu.popupListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.swing.JMenu$WinListener */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "popupListener", fieldType: "Ljavax/swing/JMenu$WinListener;", fieldCache: &JMenu.popupListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.JPopupMenu javax.swing.JMenu.popupMenu

    /// private static final boolean javax.swing.JMenuItem.DEBUG

    /// private static final boolean javax.swing.JMenuItem.TRACE

    /// private static final boolean javax.swing.JMenuItem.VERBOSE

    /// private static final java.lang.String javax.swing.JMenuItem.uiClassID

    /// private javax.swing.KeyStroke javax.swing.JMenuItem.accelerator

    /// private boolean javax.swing.JMenuItem.isMouseDragged

    /// public static final java.lang.String javax.swing.AbstractButton.BORDER_PAINTED_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.DISABLED_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.DISABLED_SELECTED_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.FOCUS_PAINTED_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.HORIZONTAL_ALIGNMENT_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.HORIZONTAL_TEXT_POSITION_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.MARGIN_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.MNEMONIC_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.MODEL_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.PRESSED_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_ENABLED_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.ROLLOVER_SELECTED_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.SELECTED_ICON_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.TEXT_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.VERTICAL_ALIGNMENT_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.AbstractButton.VERTICAL_TEXT_POSITION_CHANGED_PROPERTY

    // Skipping field: false true false false false false 

    /// private javax.swing.Action javax.swing.AbstractButton.action

    /// protected java.awt.event.ActionListener javax.swing.AbstractButton.actionListener

    private static var actionListener_FieldID: jfieldID?

    override open var actionListener: java_awt.ActionListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "actionListener", fieldType: "Ljava/awt/event/ActionListener;", fieldCache: &JMenu.actionListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.ActionListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "actionListener", fieldType: "Ljava/awt/event/ActionListener;", fieldCache: &JMenu.actionListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.beans.PropertyChangeListener javax.swing.AbstractButton.actionPropertyChangeListener

    /// private boolean javax.swing.AbstractButton.borderPaintedSet

    /// protected transient javax.swing.event.ChangeEvent javax.swing.AbstractButton.changeEvent

    private static var changeEvent_FieldID: jfieldID?

    override open var changeEvent: ChangeEvent! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "changeEvent", fieldType: "Ljavax/swing/event/ChangeEvent;", fieldCache: &JMenu.changeEvent_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ChangeEvent( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "changeEvent", fieldType: "Ljavax/swing/event/ChangeEvent;", fieldCache: &JMenu.changeEvent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.event.ChangeListener javax.swing.AbstractButton.changeListener

    private static var changeListener_FieldID: jfieldID?

    override open var changeListener: ChangeListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &JMenu.changeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ChangeListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &JMenu.changeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.AbstractButton.contentAreaFilled

    /// private boolean javax.swing.AbstractButton.contentAreaFilledSet

    /// boolean javax.swing.AbstractButton.defaultCapable

    // Skipping field: true false false false false false 

    /// private javax.swing.Icon javax.swing.AbstractButton.defaultIcon

    /// private java.awt.Insets javax.swing.AbstractButton.defaultMargin

    /// private javax.swing.Icon javax.swing.AbstractButton.disabledIcon

    /// private javax.swing.Icon javax.swing.AbstractButton.disabledSelectedIcon

    /// private javax.swing.AbstractButton$Handler javax.swing.AbstractButton.handler

    /// private boolean javax.swing.AbstractButton.hideActionText

    /// private int javax.swing.AbstractButton.horizontalAlignment

    /// private int javax.swing.AbstractButton.horizontalTextPosition

    /// private int javax.swing.AbstractButton.iconTextGap

    /// private boolean javax.swing.AbstractButton.iconTextGapSet

    /// protected java.awt.event.ItemListener javax.swing.AbstractButton.itemListener

    private static var itemListener_FieldID: jfieldID?

    override open var itemListener: java_awt.ItemListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "itemListener", fieldType: "Ljava/awt/event/ItemListener;", fieldCache: &JMenu.itemListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.ItemListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "itemListener", fieldType: "Ljava/awt/event/ItemListener;", fieldCache: &JMenu.itemListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.Insets javax.swing.AbstractButton.margin

    /// private int javax.swing.AbstractButton.mnemonic

    /// private int javax.swing.AbstractButton.mnemonicIndex

    /// protected javax.swing.ButtonModel javax.swing.AbstractButton.model

    private static var model_FieldID: jfieldID?

    override open var model: ButtonModel! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "model", fieldType: "Ljavax/swing/ButtonModel;", fieldCache: &JMenu.model_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ButtonModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "model", fieldType: "Ljavax/swing/ButtonModel;", fieldCache: &JMenu.model_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private long javax.swing.AbstractButton.multiClickThreshhold

    /// private boolean javax.swing.AbstractButton.paintBorder

    /// private boolean javax.swing.AbstractButton.paintFocus

    /// private javax.swing.Icon javax.swing.AbstractButton.pressedIcon

    /// private boolean javax.swing.AbstractButton.rolloverEnabled

    /// private boolean javax.swing.AbstractButton.rolloverEnabledSet

    /// private javax.swing.Icon javax.swing.AbstractButton.rolloverIcon

    /// private javax.swing.Icon javax.swing.AbstractButton.rolloverSelectedIcon

    /// private javax.swing.Icon javax.swing.AbstractButton.selectedIcon

    /// private boolean javax.swing.AbstractButton.setLayout

    /// private java.lang.String javax.swing.AbstractButton.text

    /// private int javax.swing.AbstractButton.verticalAlignment

    /// private int javax.swing.AbstractButton.verticalTextPosition

    /// public static final int javax.swing.SwingConstants.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.HORIZONTAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NEXT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.PREVIOUS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.RIGHT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TRAILING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.VERTICAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.WEST

    // Skipping field: false true false false false false 

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JMenu.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JMenu.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JMenu.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JMenu.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JMenu.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JMenu.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.JMenu()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/JMenu", classCache: &JMenu.JMenuJNIClass, methodSig: "()V", methodCache: &JMenu.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public javax.swing.JMenu(javax.swing.Action)

    private static var new_MethodID_2: jmethodID?

    public convenience init( a: Action? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JMenu", classCache: &JMenu.JMenuJNIClass, methodSig: "(Ljavax/swing/Action;)V", methodCache: &JMenu.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _a: Action? ) {
        self.init( a: _a )
    }

    /// public javax.swing.JMenu(java.lang.String)

    private static var new_MethodID_3: jmethodID?

    public convenience init( s: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JMenu", classCache: &JMenu.JMenuJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &JMenu.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: String? ) {
        self.init( s: _s )
    }

    /// public javax.swing.JMenu(java.lang.String,boolean)

    private static var new_MethodID_4: jmethodID?

    public convenience init( s: String?, b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        let __object = JNIMethod.NewObject( className: "javax/swing/JMenu", classCache: &JMenu.JMenuJNIClass, methodSig: "(Ljava/lang/String;Z)V", methodCache: &JMenu.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _s: String?, _ _b: Bool ) {
        self.init( s: _s, b: _b )
    }

    /// static javax.swing.MenuElement[] javax.swing.JMenu.access$000(javax.swing.JMenu,javax.swing.JMenu)

    // Skipping method: true false false false false 

    /// public javax.swing.JMenuItem javax.swing.JMenu.add(javax.swing.Action)

    private static var add_MethodID_5: jmethodID?

    open func add( a: Action? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljavax/swing/Action;)Ljavax/swing/JMenuItem;", methodCache: &JMenu.add_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _a: Action? ) -> JMenuItem! {
        return add( a: _a )
    }

    /// public javax.swing.JMenuItem javax.swing.JMenu.add(javax.swing.JMenuItem)

    private static var add_MethodID_6: jmethodID?

    open func add( menuItem: JMenuItem? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: menuItem, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljavax/swing/JMenuItem;)Ljavax/swing/JMenuItem;", methodCache: &JMenu.add_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _menuItem: JMenuItem? ) -> JMenuItem! {
        return add( menuItem: _menuItem )
    }

    /// public javax.swing.JMenuItem javax.swing.JMenu.add(java.lang.String)

    private static var add_MethodID_7: jmethodID?

    open func add( s: String? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/String;)Ljavax/swing/JMenuItem;", methodCache: &JMenu.add_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _s: String? ) -> JMenuItem! {
        return add( s: _s )
    }

    /// public java.awt.Component javax.swing.JMenu.add(java.awt.Component)

    private static var add_MethodID_8: jmethodID?

    open func add( c: java_awt.Component? ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &JMenu.add_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    override open func add( _ _c: java_awt.Component? ) -> java_awt.Component! {
        return add( c: _c )
    }

    /// public java.awt.Component javax.swing.JMenu.add(java.awt.Component,int)

    private static var add_MethodID_9: jmethodID?

    open func add( c: java_awt.Component?, index: Int ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        __args[1] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/awt/Component;I)Ljava/awt/Component;", methodCache: &JMenu.add_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    override open func add( _ _c: java_awt.Component?, _ _index: Int ) -> java_awt.Component! {
        return add( c: _c, index: _index )
    }

    /// public void javax.swing.JMenu.addMenuListener(javax.swing.event.MenuListener)

    private static var addMenuListener_MethodID_10: jmethodID?

    open func addMenuListener( l: MenuListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addMenuListener", methodSig: "(Ljavax/swing/event/MenuListener;)V", methodCache: &JMenu.addMenuListener_MethodID_10, args: &__args, locals: &__locals )
    }

    open func addMenuListener( _ _l: MenuListener? ) {
        addMenuListener( l: _l )
    }

    /// public void javax.swing.JMenu.addSeparator()

    private static var addSeparator_MethodID_11: jmethodID?

    open func addSeparator() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addSeparator", methodSig: "()V", methodCache: &JMenu.addSeparator_MethodID_11, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.JMenu.applyComponentOrientation(java.awt.ComponentOrientation)

    private static var applyComponentOrientation_MethodID_12: jmethodID?

    open func applyComponentOrientation( o: java_awt.ComponentOrientation? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "applyComponentOrientation", methodSig: "(Ljava/awt/ComponentOrientation;)V", methodCache: &JMenu.applyComponentOrientation_MethodID_12, args: &__args, locals: &__locals )
    }

    override open func applyComponentOrientation( _ _o: java_awt.ComponentOrientation? ) {
        applyComponentOrientation( o: _o )
    }

    /// private javax.swing.MenuElement[] javax.swing.JMenu.buildMenuElementArray(javax.swing.JMenu)

    /// void javax.swing.JMenu.configureAcceleratorFromAction(javax.swing.Action)

    // Skipping method: true false false false false 

    /// protected java.beans.PropertyChangeListener javax.swing.JMenu.createActionChangeListener(javax.swing.JMenuItem)

    private static var createActionChangeListener_MethodID_13: jmethodID?

    open func createActionChangeListener( b: JMenuItem? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createActionChangeListener", methodSig: "(Ljavax/swing/JMenuItem;)Ljava/beans/PropertyChangeListener;", methodCache: &JMenu.createActionChangeListener_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func createActionChangeListener( _ _b: JMenuItem? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        return createActionChangeListener( b: _b )
    }

    /// protected javax.swing.JMenuItem javax.swing.JMenu.createActionComponent(javax.swing.Action)

    private static var createActionComponent_MethodID_14: jmethodID?

    open func createActionComponent( a: Action? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createActionComponent", methodSig: "(Ljavax/swing/Action;)Ljavax/swing/JMenuItem;", methodCache: &JMenu.createActionComponent_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func createActionComponent( _ _a: Action? ) -> JMenuItem! {
        return createActionComponent( a: _a )
    }

    /// private javax.swing.event.ChangeListener javax.swing.JMenu.createMenuChangeListener()

    /// protected javax.swing.JMenu$WinListener javax.swing.JMenu.createWinListener(javax.swing.JPopupMenu)

    private static var createWinListener_MethodID_15: jmethodID?

    open func createWinListener( p: JPopupMenu? ) -> /* class javax.swing.JMenu$WinListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createWinListener", methodSig: "(Ljavax/swing/JPopupMenu;)Ljavax/swing/JMenu$WinListener;", methodCache: &JMenu.createWinListener_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.swing.JMenu$WinListener */ UnavailableObject( javaObject: __return ) : nil
    }

    open func createWinListener( _ _p: JPopupMenu? ) -> /* class javax.swing.JMenu$WinListener */ UnavailableObject! {
        return createWinListener( p: _p )
    }

    /// public void javax.swing.JMenu.doClick(int)

    // Skipping method: false true false false false 

    /// private void javax.swing.JMenu.ensurePopupMenuCreated()

    /// protected void javax.swing.JMenu.fireMenuCanceled()

    private static var fireMenuCanceled_MethodID_16: jmethodID?

    open func fireMenuCanceled() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireMenuCanceled", methodSig: "()V", methodCache: &JMenu.fireMenuCanceled_MethodID_16, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.JMenu.fireMenuDeselected()

    private static var fireMenuDeselected_MethodID_17: jmethodID?

    open func fireMenuDeselected() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireMenuDeselected", methodSig: "()V", methodCache: &JMenu.fireMenuDeselected_MethodID_17, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.JMenu.fireMenuSelected()

    private static var fireMenuSelected_MethodID_18: jmethodID?

    open func fireMenuSelected() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireMenuSelected", methodSig: "()V", methodCache: &JMenu.fireMenuSelected_MethodID_18, args: &__args, locals: &__locals )
    }


    /// public javax.accessibility.AccessibleContext javax.swing.JMenu.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public java.awt.Component javax.swing.JMenu.getComponent()

    // Skipping method: false true false false false 

    /// private java.awt.Point javax.swing.JMenu.getCustomMenuLocation()

    /// public int javax.swing.JMenu.getDelay()

    private static var getDelay_MethodID_19: jmethodID?

    open func getDelay() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDelay", methodSig: "()I", methodCache: &JMenu.getDelay_MethodID_19, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.swing.JMenuItem javax.swing.JMenu.getItem(int)

    private static var getItem_MethodID_20: jmethodID?

    open func getItem( pos: Int ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(pos) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getItem", methodSig: "(I)Ljavax/swing/JMenuItem;", methodCache: &JMenu.getItem_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func getItem( _ _pos: Int ) -> JMenuItem! {
        return getItem( pos: _pos )
    }

    /// public int javax.swing.JMenu.getItemCount()

    private static var getItemCount_MethodID_21: jmethodID?

    open func getItemCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getItemCount", methodSig: "()I", methodCache: &JMenu.getItemCount_MethodID_21, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.awt.Component javax.swing.JMenu.getMenuComponent(int)

    private static var getMenuComponent_MethodID_22: jmethodID?

    open func getMenuComponent( n: Int ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(n) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMenuComponent", methodSig: "(I)Ljava/awt/Component;", methodCache: &JMenu.getMenuComponent_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getMenuComponent( _ _n: Int ) -> java_awt.Component! {
        return getMenuComponent( n: _n )
    }

    /// public int javax.swing.JMenu.getMenuComponentCount()

    private static var getMenuComponentCount_MethodID_23: jmethodID?

    open func getMenuComponentCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getMenuComponentCount", methodSig: "()I", methodCache: &JMenu.getMenuComponentCount_MethodID_23, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.awt.Component[] javax.swing.JMenu.getMenuComponents()

    private static var getMenuComponents_MethodID_24: jmethodID?

    open func getMenuComponents() -> [Component]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMenuComponents", methodSig: "()[Ljava/awt/Component;", methodCache: &JMenu.getMenuComponents_MethodID_24, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Component].self, from: __return )
    }


    /// public javax.swing.event.MenuListener[] javax.swing.JMenu.getMenuListeners()

    private static var getMenuListeners_MethodID_25: jmethodID?

    open func getMenuListeners() -> [MenuListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMenuListeners", methodSig: "()[Ljavax/swing/event/MenuListener;", methodCache: &JMenu.getMenuListeners_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [MenuListenerForward].self, from: __return )
    }


    /// public javax.swing.JPopupMenu javax.swing.JMenu.getPopupMenu()

    private static var getPopupMenu_MethodID_26: jmethodID?

    open func getPopupMenu() -> JPopupMenu! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPopupMenu", methodSig: "()Ljavax/swing/JPopupMenu;", methodCache: &JMenu.getPopupMenu_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JPopupMenu( javaObject: __return ) : nil
    }


    /// protected java.awt.Point javax.swing.JMenu.getPopupMenuOrigin()

    private static var getPopupMenuOrigin_MethodID_27: jmethodID?

    open func getPopupMenuOrigin() -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPopupMenuOrigin", methodSig: "()Ljava/awt/Point;", methodCache: &JMenu.getPopupMenuOrigin_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }


    /// public javax.swing.MenuElement[] javax.swing.JMenu.getSubElements()

    // Skipping method: false true false false false 

    /// public java.lang.String javax.swing.JMenu.getUIClassID()

    // Skipping method: false true false false false 

    /// void javax.swing.JMenu.initFocusability()

    // Skipping method: true false false false false 

    /// public javax.swing.JMenuItem javax.swing.JMenu.insert(javax.swing.Action,int)

    private static var insert_MethodID_28: jmethodID?

    open func insert( a: Action?, pos: Int ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        __args[1] = jvalue( i: jint(pos) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(Ljavax/swing/Action;I)Ljavax/swing/JMenuItem;", methodCache: &JMenu.insert_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func insert( _ _a: Action?, _ _pos: Int ) -> JMenuItem! {
        return insert( a: _a, pos: _pos )
    }

    /// public javax.swing.JMenuItem javax.swing.JMenu.insert(javax.swing.JMenuItem,int)

    private static var insert_MethodID_29: jmethodID?

    open func insert( mi: JMenuItem?, pos: Int ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: mi, locals: &__locals )
        __args[1] = jvalue( i: jint(pos) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "insert", methodSig: "(Ljavax/swing/JMenuItem;I)Ljavax/swing/JMenuItem;", methodCache: &JMenu.insert_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func insert( _ _mi: JMenuItem?, _ _pos: Int ) -> JMenuItem! {
        return insert( mi: _mi, pos: _pos )
    }

    /// public void javax.swing.JMenu.insert(java.lang.String,int)

    private static var insert_MethodID_30: jmethodID?

    open func insert( s: String?, pos: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        __args[1] = jvalue( i: jint(pos) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insert", methodSig: "(Ljava/lang/String;I)V", methodCache: &JMenu.insert_MethodID_30, args: &__args, locals: &__locals )
    }

    open func insert( _ _s: String?, _ _pos: Int ) {
        insert( s: _s, pos: _pos )
    }

    /// public void javax.swing.JMenu.insertSeparator(int)

    private static var insertSeparator_MethodID_31: jmethodID?

    open func insertSeparator( index: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insertSeparator", methodSig: "(I)V", methodCache: &JMenu.insertSeparator_MethodID_31, args: &__args, locals: &__locals )
    }

    open func insertSeparator( _ _index: Int ) {
        insertSeparator( index: _index )
    }

    /// public boolean javax.swing.JMenu.isMenuComponent(java.awt.Component)

    private static var isMenuComponent_MethodID_32: jmethodID?

    open func isMenuComponent( c: java_awt.Component? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isMenuComponent", methodSig: "(Ljava/awt/Component;)Z", methodCache: &JMenu.isMenuComponent_MethodID_32, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isMenuComponent( _ _c: java_awt.Component? ) -> Bool {
        return isMenuComponent( c: _c )
    }

    /// public boolean javax.swing.JMenu.isPopupMenuVisible()

    private static var isPopupMenuVisible_MethodID_33: jmethodID?

    open func isPopupMenuVisible() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPopupMenuVisible", methodSig: "()Z", methodCache: &JMenu.isPopupMenuVisible_MethodID_33, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JMenu.isSelected()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.JMenu.isTearOff()

    private static var isTearOff_MethodID_34: jmethodID?

    open func isTearOff() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTearOff", methodSig: "()Z", methodCache: &JMenu.isTearOff_MethodID_34, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JMenu.isTopLevelMenu()

    private static var isTopLevelMenu_MethodID_35: jmethodID?

    open func isTopLevelMenu() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isTopLevelMenu", methodSig: "()Z", methodCache: &JMenu.isTopLevelMenu_MethodID_35, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public void javax.swing.JMenu.menuSelectionChanged(boolean)

    // Skipping method: false true false false false 

    /// protected java.lang.String javax.swing.JMenu.paramString()

    private static var paramString_MethodID_36: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JMenu.paramString_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// protected void javax.swing.JMenu.processKeyEvent(java.awt.event.KeyEvent)

    private static var processKeyEvent_MethodID_37: jmethodID?

    open func processKeyEvent( evt: java_awt.KeyEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;)V", methodCache: &JMenu.processKeyEvent_MethodID_37, args: &__args, locals: &__locals )
    }

    override open func processKeyEvent( _ _evt: java_awt.KeyEvent? ) {
        processKeyEvent( evt: _evt )
    }

    /// public void javax.swing.JMenu.remove(int)

    private static var remove_MethodID_38: jmethodID?

    open func remove( pos: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(pos) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(I)V", methodCache: &JMenu.remove_MethodID_38, args: &__args, locals: &__locals )
    }

    override open func remove( _ _pos: Int ) {
        remove( pos: _pos )
    }

    /// public void javax.swing.JMenu.remove(javax.swing.JMenuItem)

    private static var remove_MethodID_39: jmethodID?

    open func remove( item: JMenuItem? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: item, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljavax/swing/JMenuItem;)V", methodCache: &JMenu.remove_MethodID_39, args: &__args, locals: &__locals )
    }

    open func remove( _ _item: JMenuItem? ) {
        remove( item: _item )
    }

    /// public void javax.swing.JMenu.remove(java.awt.Component)

    private static var remove_MethodID_40: jmethodID?

    open func remove( c: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/awt/Component;)V", methodCache: &JMenu.remove_MethodID_40, args: &__args, locals: &__locals )
    }

    override open func remove( _ _c: java_awt.Component? ) {
        remove( c: _c )
    }

    /// public void javax.swing.JMenu.removeAll()

    // Skipping method: false true false false false 

    /// public void javax.swing.JMenu.removeMenuListener(javax.swing.event.MenuListener)

    private static var removeMenuListener_MethodID_41: jmethodID?

    open func removeMenuListener( l: MenuListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeMenuListener", methodSig: "(Ljavax/swing/event/MenuListener;)V", methodCache: &JMenu.removeMenuListener_MethodID_41, args: &__args, locals: &__locals )
    }

    open func removeMenuListener( _ _l: MenuListener? ) {
        removeMenuListener( l: _l )
    }

    /// public void javax.swing.JMenu.setAccelerator(javax.swing.KeyStroke)

    // Skipping method: false true false false false 

    /// public void javax.swing.JMenu.setComponentOrientation(java.awt.ComponentOrientation)

    private static var setComponentOrientation_MethodID_42: jmethodID?

    open func setComponentOrientation( o: java_awt.ComponentOrientation? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setComponentOrientation", methodSig: "(Ljava/awt/ComponentOrientation;)V", methodCache: &JMenu.setComponentOrientation_MethodID_42, args: &__args, locals: &__locals )
    }

    override open func setComponentOrientation( _ _o: java_awt.ComponentOrientation? ) {
        setComponentOrientation( o: _o )
    }

    /// public void javax.swing.JMenu.setDelay(int)

    private static var setDelay_MethodID_43: jmethodID?

    open func setDelay( d: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(d) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDelay", methodSig: "(I)V", methodCache: &JMenu.setDelay_MethodID_43, args: &__args, locals: &__locals )
    }

    open func setDelay( _ _d: Int ) {
        setDelay( d: _d )
    }

    /// public void javax.swing.JMenu.setMenuLocation(int,int)

    private static var setMenuLocation_MethodID_44: jmethodID?

    open func setMenuLocation( x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMenuLocation", methodSig: "(II)V", methodCache: &JMenu.setMenuLocation_MethodID_44, args: &__args, locals: &__locals )
    }

    open func setMenuLocation( _ _x: Int, _ _y: Int ) {
        setMenuLocation( x: _x, y: _y )
    }

    /// public void javax.swing.JMenu.setModel(javax.swing.ButtonModel)

    // Skipping method: false true false false false 

    /// public void javax.swing.JMenu.setPopupMenuVisible(boolean)

    private static var setPopupMenuVisible_MethodID_45: jmethodID?

    open func setPopupMenuVisible( b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPopupMenuVisible", methodSig: "(Z)V", methodCache: &JMenu.setPopupMenuVisible_MethodID_45, args: &__args, locals: &__locals )
    }

    open func setPopupMenuVisible( _ _b: Bool ) {
        setPopupMenuVisible( b: _b )
    }

    /// public void javax.swing.JMenu.setSelected(boolean)

    // Skipping method: false true false false false 

    /// private java.awt.Point javax.swing.JMenu.translateToPopupMenu(int,int)

    /// private java.awt.Point javax.swing.JMenu.translateToPopupMenu(java.awt.Point)

    /// public void javax.swing.JMenu.updateUI()

    // Skipping method: false true false false false 

    /// private void javax.swing.JMenu.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public abstract java.awt.Component javax.swing.MenuElement.getComponent()

    // Skipping method: false true false false false 

    /// public abstract javax.swing.MenuElement[] javax.swing.MenuElement.getSubElements()

    // Skipping method: false true false false false 

    /// public abstract void javax.swing.MenuElement.menuSelectionChanged(boolean)

    // Skipping method: false true false false false 

    /// public abstract void javax.swing.MenuElement.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)

    private static var processKeyEvent_MethodID_46: jmethodID?

    override open func processKeyEvent( event: java_awt.KeyEvent?, path: [MenuElement]?, manager: MenuSelectionManager? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        __args[1] = JNIType.toJava( value: path, locals: &__locals )
        __args[2] = JNIType.toJava( value: manager, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;[Ljavax/swing/MenuElement;Ljavax/swing/MenuSelectionManager;)V", methodCache: &JMenu.processKeyEvent_MethodID_46, args: &__args, locals: &__locals )
    }

    override open func processKeyEvent( _ _event: java_awt.KeyEvent?, _ _path: [MenuElement]?, _ _manager: MenuSelectionManager? ) {
        processKeyEvent( event: _event, path: _path, manager: _manager )
    }

    /// public abstract void javax.swing.MenuElement.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)

    private static var processMouseEvent_MethodID_47: jmethodID?

    override open func processMouseEvent( event: java_awt.MouseEvent?, path: [MenuElement]?, manager: MenuSelectionManager? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        __args[1] = JNIType.toJava( value: path, locals: &__locals )
        __args[2] = JNIType.toJava( value: manager, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMouseEvent", methodSig: "(Ljava/awt/event/MouseEvent;[Ljavax/swing/MenuElement;Ljavax/swing/MenuSelectionManager;)V", methodCache: &JMenu.processMouseEvent_MethodID_47, args: &__args, locals: &__locals )
    }

    override open func processMouseEvent( _ _event: java_awt.MouseEvent?, _ _path: [MenuElement]?, _ _manager: MenuSelectionManager? ) {
        processMouseEvent( event: _event, path: _path, manager: _manager )
    }

}

