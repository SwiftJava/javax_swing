
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.BorderUIResource$TitledBorderUIResource ///

open class BorderUIResource_TitledBorderUIResource: TitledBorder, UIResource {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BorderUIResource_TitledBorderUIResourceJNIClass: jclass?

    /// public static final int javax.swing.border.TitledBorder.ABOVE_BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.ABOVE_TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.BELOW_BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.BELOW_TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.DEFAULT_POSITION

    // Skipping field: false true false false false false 

    /// protected static final int javax.swing.border.TitledBorder.EDGE_SPACING

    // Skipping field: false false false false false true 

    /// public static final int javax.swing.border.TitledBorder.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.RIGHT

    // Skipping field: false true false false false false 

    /// protected static final int javax.swing.border.TitledBorder.TEXT_INSET_H

    // Skipping field: false false false false false true 

    /// protected static final int javax.swing.border.TitledBorder.TEXT_SPACING

    // Skipping field: false false false false false true 

    /// public static final int javax.swing.border.TitledBorder.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.border.TitledBorder.TRAILING

    // Skipping field: false true false false false false 

    /// protected javax.swing.border.Border javax.swing.border.TitledBorder.border

    private static var border_FieldID: jfieldID?

    override open var border: Border! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "border", fieldType: "Ljavax/swing/border/Border;", fieldCache: &BorderUIResource_TitledBorderUIResource.border_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? BorderForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "border", fieldType: "Ljavax/swing/border/Border;", fieldCache: &BorderUIResource_TitledBorderUIResource.border_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private final javax.swing.JLabel javax.swing.border.TitledBorder.label

    /// protected java.lang.String javax.swing.border.TitledBorder.title

    private static var title_FieldID: jfieldID?

    override open var title: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "title", fieldType: "Ljava/lang/String;", fieldCache: &BorderUIResource_TitledBorderUIResource.title_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "title", fieldType: "Ljava/lang/String;", fieldCache: &BorderUIResource_TitledBorderUIResource.title_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color javax.swing.border.TitledBorder.titleColor

    private static var titleColor_FieldID: jfieldID?

    override open var titleColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "titleColor", fieldType: "Ljava/awt/Color;", fieldCache: &BorderUIResource_TitledBorderUIResource.titleColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "titleColor", fieldType: "Ljava/awt/Color;", fieldCache: &BorderUIResource_TitledBorderUIResource.titleColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Font javax.swing.border.TitledBorder.titleFont

    private static var titleFont_FieldID: jfieldID?

    override open var titleFont: java_awt.Font! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "titleFont", fieldType: "Ljava/awt/Font;", fieldCache: &BorderUIResource_TitledBorderUIResource.titleFont_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Font( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "titleFont", fieldType: "Ljava/awt/Font;", fieldCache: &BorderUIResource_TitledBorderUIResource.titleFont_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.TitledBorder.titleJustification

    private static var titleJustification_FieldID: jfieldID?

    override open var titleJustification: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "titleJustification", fieldType: "I", fieldCache: &BorderUIResource_TitledBorderUIResource.titleJustification_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "titleJustification", fieldType: "I", fieldCache: &BorderUIResource_TitledBorderUIResource.titleJustification_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.TitledBorder.titlePosition

    private static var titlePosition_FieldID: jfieldID?

    override open var titlePosition: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "titlePosition", fieldType: "I", fieldCache: &BorderUIResource_TitledBorderUIResource.titlePosition_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "titlePosition", fieldType: "I", fieldCache: &BorderUIResource_TitledBorderUIResource.titlePosition_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(javax.swing.border.Border)

    private static var new_MethodID_1: jmethodID?

    public convenience init( border: Border? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/border/Border;)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _border: Border? ) {
        self.init( border: _border )
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(javax.swing.border.Border,java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( border: Border?, title: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _border: Border?, _ _title: String? ) {
        self.init( border: _border, title: _title )
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(javax.swing.border.Border,java.lang.String,int,int)

    private static var new_MethodID_3: jmethodID?

    public convenience init( border: Border?, title: String?, titleJustification: Int, titlePosition: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = jvalue( i: jint(titleJustification) )
        __args[3] = jvalue( i: jint(titlePosition) )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;II)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int ) {
        self.init( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition )
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font)

    private static var new_MethodID_4: jmethodID?

    public convenience init( border: Border?, title: String?, titleJustification: Int, titlePosition: Int, titleFont: java_awt.Font? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = jvalue( i: jint(titleJustification) )
        __args[3] = jvalue( i: jint(titlePosition) )
        __args[4] = JNIType.toJava( value: titleFont, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;IILjava/awt/Font;)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int, _ _titleFont: java_awt.Font? ) {
        self.init( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition, titleFont: _titleFont )
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font,java.awt.Color)

    private static var new_MethodID_5: jmethodID?

    public convenience init( border: Border?, title: String?, titleJustification: Int, titlePosition: Int, titleFont: java_awt.Font?, titleColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = jvalue( i: jint(titleJustification) )
        __args[3] = jvalue( i: jint(titlePosition) )
        __args[4] = JNIType.toJava( value: titleFont, locals: &__locals )
        __args[5] = JNIType.toJava( value: titleColor, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;IILjava/awt/Font;Ljava/awt/Color;)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int, _ _titleFont: java_awt.Font?, _ _titleColor: java_awt.Color? ) {
        self.init( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition, titleFont: _titleFont, titleColor: _titleColor )
    }

    /// public javax.swing.plaf.BorderUIResource$TitledBorderUIResource(java.lang.String)

    private static var new_MethodID_6: jmethodID?

    public convenience init( title: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$TitledBorderUIResource", classCache: &BorderUIResource_TitledBorderUIResource.BorderUIResource_TitledBorderUIResourceJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &BorderUIResource_TitledBorderUIResource.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _title: String? ) {
        self.init( title: _title )
    }

}

