
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.BorderFactory ///

open class BorderFactory: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BorderFactoryJNIClass: jclass?

    /// static final javax.swing.border.Border javax.swing.BorderFactory.sharedRaisedBevel

    /// static final javax.swing.border.Border javax.swing.BorderFactory.sharedLoweredBevel

    /// private static javax.swing.border.Border javax.swing.BorderFactory.sharedSoftRaisedBevel

    /// private static javax.swing.border.Border javax.swing.BorderFactory.sharedSoftLoweredBevel

    /// static final javax.swing.border.Border javax.swing.BorderFactory.sharedEtchedBorder

    /// private static javax.swing.border.Border javax.swing.BorderFactory.sharedRaisedEtchedBorder

    /// static final javax.swing.border.Border javax.swing.BorderFactory.emptyBorder

    /// private static javax.swing.border.Border javax.swing.BorderFactory.sharedDashedBorder

    /// private javax.swing.BorderFactory()

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder()

    private static var createEmptyBorder_MethodID_1: jmethodID?

    open class func createEmptyBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEmptyBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createEmptyBorder_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEmptyBorder(int,int,int,int)

    private static var createEmptyBorder_MethodID_2: jmethodID?

    open class func createEmptyBorder( top: Int, left: Int, bottom: Int, right: Int ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: top, locals: &__locals )
        __args[1] = JNIType.toJava( value: left, locals: &__locals )
        __args[2] = JNIType.toJava( value: bottom, locals: &__locals )
        __args[3] = JNIType.toJava( value: right, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEmptyBorder", methodSig: "(IIII)Ljavax/swing/border/Border;", methodCache: &createEmptyBorder_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createEmptyBorder( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int ) -> Border! {
        return createEmptyBorder( top: _top, left: _left, bottom: _bottom, right: _right )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createRaisedBevelBorder()

    private static var createRaisedBevelBorder_MethodID_3: jmethodID?

    open class func createRaisedBevelBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createRaisedBevelBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createRaisedBevelBorder_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(java.awt.Color)

    private static var createLineBorder_MethodID_4: jmethodID?

    open class func createLineBorder( color: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: color != nil ? color! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createLineBorder", methodSig: "(Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createLineBorder_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createLineBorder( _ _color: java_awt.Color? ) -> Border! {
        return createLineBorder( color: _color )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(java.awt.Color,int,boolean)

    private static var createLineBorder_MethodID_5: jmethodID?

    open class func createLineBorder( color: java_awt.Color?, thickness: Int, rounded: Bool ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: color != nil ? color! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: thickness, locals: &__locals )
        __args[2] = JNIType.toJava( value: rounded, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createLineBorder", methodSig: "(Ljava/awt/Color;IZ)Ljavax/swing/border/Border;", methodCache: &createLineBorder_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createLineBorder( _ _color: java_awt.Color?, _ _thickness: Int, _ _rounded: Bool ) -> Border! {
        return createLineBorder( color: _color, thickness: _thickness, rounded: _rounded )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createLineBorder(java.awt.Color,int)

    private static var createLineBorder_MethodID_6: jmethodID?

    open class func createLineBorder( color: java_awt.Color?, thickness: Int ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: color != nil ? color! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: thickness, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createLineBorder", methodSig: "(Ljava/awt/Color;I)Ljavax/swing/border/Border;", methodCache: &createLineBorder_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createLineBorder( _ _color: java_awt.Color?, _ _thickness: Int ) -> Border! {
        return createLineBorder( color: _color, thickness: _thickness )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createLoweredBevelBorder()

    private static var createLoweredBevelBorder_MethodID_7: jmethodID?

    open class func createLoweredBevelBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createLoweredBevelBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createLoweredBevelBorder_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int)

    private static var createBevelBorder_MethodID_8: jmethodID?

    open class func createBevelBorder( type: Int ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createBevelBorder", methodSig: "(I)Ljavax/swing/border/Border;", methodCache: &createBevelBorder_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createBevelBorder( _ _type: Int ) -> Border! {
        return createBevelBorder( type: _type )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)

    private static var createBevelBorder_MethodID_9: jmethodID?

    open class func createBevelBorder( type: Int, highlightOuter: java_awt.Color?, highlightInner: java_awt.Color?, shadowOuter: java_awt.Color?, shadowInner: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        __args[1] = JNIType.toJava( value: highlightOuter != nil ? highlightOuter! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: highlightInner != nil ? highlightInner! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: shadowOuter != nil ? shadowOuter! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: shadowInner != nil ? shadowInner! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createBevelBorder", methodSig: "(ILjava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createBevelBorder_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createBevelBorder( _ _type: Int, _ _highlightOuter: java_awt.Color?, _ _highlightInner: java_awt.Color?, _ _shadowOuter: java_awt.Color?, _ _shadowInner: java_awt.Color? ) -> Border! {
        return createBevelBorder( type: _type, highlightOuter: _highlightOuter, highlightInner: _highlightInner, shadowOuter: _shadowOuter, shadowInner: _shadowInner )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createBevelBorder(int,java.awt.Color,java.awt.Color)

    private static var createBevelBorder_MethodID_10: jmethodID?

    open class func createBevelBorder( type: Int, highlight: java_awt.Color?, shadow: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        __args[1] = JNIType.toJava( value: highlight != nil ? highlight! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: shadow != nil ? shadow! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createBevelBorder", methodSig: "(ILjava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createBevelBorder_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createBevelBorder( _ _type: Int, _ _highlight: java_awt.Color?, _ _shadow: java_awt.Color? ) -> Border! {
        return createBevelBorder( type: _type, highlight: _highlight, shadow: _shadow )
    }

    /// static javax.swing.border.Border javax.swing.BorderFactory.createSharedBevel(int)

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createRaisedSoftBevelBorder()

    private static var createRaisedSoftBevelBorder_MethodID_11: jmethodID?

    open class func createRaisedSoftBevelBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createRaisedSoftBevelBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createRaisedSoftBevelBorder_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createLoweredSoftBevelBorder()

    private static var createLoweredSoftBevelBorder_MethodID_12: jmethodID?

    open class func createLoweredSoftBevelBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createLoweredSoftBevelBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createLoweredSoftBevelBorder_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createSoftBevelBorder(int)

    private static var createSoftBevelBorder_MethodID_13: jmethodID?

    open class func createSoftBevelBorder( type: Int ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createSoftBevelBorder", methodSig: "(I)Ljavax/swing/border/Border;", methodCache: &createSoftBevelBorder_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createSoftBevelBorder( _ _type: Int ) -> Border! {
        return createSoftBevelBorder( type: _type )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color)

    private static var createSoftBevelBorder_MethodID_14: jmethodID?

    open class func createSoftBevelBorder( type: Int, highlight: java_awt.Color?, shadow: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        __args[1] = JNIType.toJava( value: highlight != nil ? highlight! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: shadow != nil ? shadow! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createSoftBevelBorder", methodSig: "(ILjava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createSoftBevelBorder_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createSoftBevelBorder( _ _type: Int, _ _highlight: java_awt.Color?, _ _shadow: java_awt.Color? ) -> Border! {
        return createSoftBevelBorder( type: _type, highlight: _highlight, shadow: _shadow )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createSoftBevelBorder(int,java.awt.Color,java.awt.Color,java.awt.Color,java.awt.Color)

    private static var createSoftBevelBorder_MethodID_15: jmethodID?

    open class func createSoftBevelBorder( type: Int, highlightOuter: java_awt.Color?, highlightInner: java_awt.Color?, shadowOuter: java_awt.Color?, shadowInner: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        __args[1] = JNIType.toJava( value: highlightOuter != nil ? highlightOuter! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: highlightInner != nil ? highlightInner! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: shadowOuter != nil ? shadowOuter! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: shadowInner != nil ? shadowInner! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createSoftBevelBorder", methodSig: "(ILjava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createSoftBevelBorder_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createSoftBevelBorder( _ _type: Int, _ _highlightOuter: java_awt.Color?, _ _highlightInner: java_awt.Color?, _ _shadowOuter: java_awt.Color?, _ _shadowInner: java_awt.Color? ) -> Border! {
        return createSoftBevelBorder( type: _type, highlightOuter: _highlightOuter, highlightInner: _highlightInner, shadowOuter: _shadowOuter, shadowInner: _shadowInner )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int,java.awt.Color,java.awt.Color)

    private static var createEtchedBorder_MethodID_16: jmethodID?

    open class func createEtchedBorder( type: Int, highlight: java_awt.Color?, shadow: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        __args[1] = JNIType.toJava( value: highlight != nil ? highlight! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: shadow != nil ? shadow! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEtchedBorder", methodSig: "(ILjava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createEtchedBorder_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createEtchedBorder( _ _type: Int, _ _highlight: java_awt.Color?, _ _shadow: java_awt.Color? ) -> Border! {
        return createEtchedBorder( type: _type, highlight: _highlight, shadow: _shadow )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(java.awt.Color,java.awt.Color)

    private static var createEtchedBorder_MethodID_17: jmethodID?

    open class func createEtchedBorder( highlight: java_awt.Color?, shadow: java_awt.Color? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: highlight != nil ? highlight! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: shadow != nil ? shadow! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEtchedBorder", methodSig: "(Ljava/awt/Color;Ljava/awt/Color;)Ljavax/swing/border/Border;", methodCache: &createEtchedBorder_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createEtchedBorder( _ _highlight: java_awt.Color?, _ _shadow: java_awt.Color? ) -> Border! {
        return createEtchedBorder( highlight: _highlight, shadow: _shadow )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder()

    private static var createEtchedBorder_MethodID_18: jmethodID?

    open class func createEtchedBorder() -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEtchedBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &createEtchedBorder_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.Border javax.swing.BorderFactory.createEtchedBorder(int)

    private static var createEtchedBorder_MethodID_19: jmethodID?

    open class func createEtchedBorder( type: Int ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: type, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createEtchedBorder", methodSig: "(I)Ljavax/swing/border/Border;", methodCache: &createEtchedBorder_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createEtchedBorder( _ _type: Int ) -> Border! {
        return createEtchedBorder( type: _type )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(java.lang.String)

    private static var createTitledBorder_MethodID_20: jmethodID?

    open class func createTitledBorder( title: String? ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: title, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljava/lang/String;)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _title: String? ) -> TitledBorder! {
        return createTitledBorder( title: _title )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font,java.awt.Color)

    private static var createTitledBorder_MethodID_21: jmethodID?

    open class func createTitledBorder( border: Border?, title: String?, titleJustification: Int, titlePosition: Int, titleFont: java_awt.Font?, titleColor: java_awt.Color? ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = JNIType.toJava( value: titleJustification, locals: &__locals )
        __args[3] = JNIType.toJava( value: titlePosition, locals: &__locals )
        __args[4] = JNIType.toJava( value: titleFont != nil ? titleFont! as JNIObject : nil, locals: &__locals )
        __args[5] = JNIType.toJava( value: titleColor != nil ? titleColor! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;IILjava/awt/Font;Ljava/awt/Color;)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int, _ _titleFont: java_awt.Font?, _ _titleColor: java_awt.Color? ) -> TitledBorder! {
        return createTitledBorder( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition, titleFont: _titleFont, titleColor: _titleColor )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border)

    private static var createTitledBorder_MethodID_22: jmethodID?

    open class func createTitledBorder( border: Border? ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljavax/swing/border/Border;)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _border: Border? ) -> TitledBorder! {
        return createTitledBorder( border: _border )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String)

    private static var createTitledBorder_MethodID_23: jmethodID?

    open class func createTitledBorder( border: Border?, title: String? ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _border: Border?, _ _title: String? ) -> TitledBorder! {
        return createTitledBorder( border: _border, title: _title )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int)

    private static var createTitledBorder_MethodID_24: jmethodID?

    open class func createTitledBorder( border: Border?, title: String?, titleJustification: Int, titlePosition: Int ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = JNIType.toJava( value: titleJustification, locals: &__locals )
        __args[3] = JNIType.toJava( value: titlePosition, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;II)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int ) -> TitledBorder! {
        return createTitledBorder( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition )
    }

    /// public static javax.swing.border.TitledBorder javax.swing.BorderFactory.createTitledBorder(javax.swing.border.Border,java.lang.String,int,int,java.awt.Font)

    private static var createTitledBorder_MethodID_25: jmethodID?

    open class func createTitledBorder( border: Border?, title: String?, titleJustification: Int, titlePosition: Int, titleFont: java_awt.Font? ) -> TitledBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        __args[1] = JNIType.toJava( value: title, locals: &__locals )
        __args[2] = JNIType.toJava( value: titleJustification, locals: &__locals )
        __args[3] = JNIType.toJava( value: titlePosition, locals: &__locals )
        __args[4] = JNIType.toJava( value: titleFont != nil ? titleFont! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createTitledBorder", methodSig: "(Ljavax/swing/border/Border;Ljava/lang/String;IILjava/awt/Font;)Ljavax/swing/border/TitledBorder;", methodCache: &createTitledBorder_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TitledBorder( javaObject: __return ) : nil
    }

    open class func createTitledBorder( _ _border: Border?, _ _title: String?, _ _titleJustification: Int, _ _titlePosition: Int, _ _titleFont: java_awt.Font? ) -> TitledBorder! {
        return createTitledBorder( border: _border, title: _title, titleJustification: _titleJustification, titlePosition: _titlePosition, titleFont: _titleFont )
    }

    /// public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder(javax.swing.border.Border,javax.swing.border.Border)

    private static var createCompoundBorder_MethodID_26: jmethodID?

    open class func createCompoundBorder( outsideBorder: Border?, insideBorder: Border? ) -> CompoundBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: outsideBorder, locals: &__locals )
        __args[1] = JNIType.toJava( value: insideBorder, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createCompoundBorder", methodSig: "(Ljavax/swing/border/Border;Ljavax/swing/border/Border;)Ljavax/swing/border/CompoundBorder;", methodCache: &createCompoundBorder_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CompoundBorder( javaObject: __return ) : nil
    }

    open class func createCompoundBorder( _ _outsideBorder: Border?, _ _insideBorder: Border? ) -> CompoundBorder! {
        return createCompoundBorder( outsideBorder: _outsideBorder, insideBorder: _insideBorder )
    }

    /// public static javax.swing.border.CompoundBorder javax.swing.BorderFactory.createCompoundBorder()

    private static var createCompoundBorder_MethodID_27: jmethodID?

    open class func createCompoundBorder() -> CompoundBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createCompoundBorder", methodSig: "()Ljavax/swing/border/CompoundBorder;", methodCache: &createCompoundBorder_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CompoundBorder( javaObject: __return ) : nil
    }


    /// public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int,int,int,int,javax.swing.Icon)

    private static var createMatteBorder_MethodID_28: jmethodID?

    open class func createMatteBorder( top: Int, left: Int, bottom: Int, right: Int, tileIcon: Icon? ) -> MatteBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: top, locals: &__locals )
        __args[1] = JNIType.toJava( value: left, locals: &__locals )
        __args[2] = JNIType.toJava( value: bottom, locals: &__locals )
        __args[3] = JNIType.toJava( value: right, locals: &__locals )
        __args[4] = JNIType.toJava( value: tileIcon, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createMatteBorder", methodSig: "(IIIILjavax/swing/Icon;)Ljavax/swing/border/MatteBorder;", methodCache: &createMatteBorder_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MatteBorder( javaObject: __return ) : nil
    }

    open class func createMatteBorder( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int, _ _tileIcon: Icon? ) -> MatteBorder! {
        return createMatteBorder( top: _top, left: _left, bottom: _bottom, right: _right, tileIcon: _tileIcon )
    }

    /// public static javax.swing.border.MatteBorder javax.swing.BorderFactory.createMatteBorder(int,int,int,int,java.awt.Color)

    private static var createMatteBorder_MethodID_29: jmethodID?

    open class func createMatteBorder( top: Int, left: Int, bottom: Int, right: Int, color: java_awt.Color? ) -> MatteBorder! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: top, locals: &__locals )
        __args[1] = JNIType.toJava( value: left, locals: &__locals )
        __args[2] = JNIType.toJava( value: bottom, locals: &__locals )
        __args[3] = JNIType.toJava( value: right, locals: &__locals )
        __args[4] = JNIType.toJava( value: color != nil ? color! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createMatteBorder", methodSig: "(IIIILjava/awt/Color;)Ljavax/swing/border/MatteBorder;", methodCache: &createMatteBorder_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? MatteBorder( javaObject: __return ) : nil
    }

    open class func createMatteBorder( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int, _ _color: java_awt.Color? ) -> MatteBorder! {
        return createMatteBorder( top: _top, left: _left, bottom: _bottom, right: _right, color: _color )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke)

    private static var createStrokeBorder_MethodID_30: jmethodID?

    open class func createStrokeBorder( stroke: java_awt.BasicStroke? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: stroke != nil ? stroke! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createStrokeBorder", methodSig: "(Ljava/awt/BasicStroke;)Ljavax/swing/border/Border;", methodCache: &createStrokeBorder_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createStrokeBorder( _ _stroke: java_awt.BasicStroke? ) -> Border! {
        return createStrokeBorder( stroke: _stroke )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createStrokeBorder(java.awt.BasicStroke,java.awt.Paint)

    private static var createStrokeBorder_MethodID_31: jmethodID?

    open class func createStrokeBorder( stroke: java_awt.BasicStroke?, paint: java_awt.Paint? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: stroke != nil ? stroke! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: paint, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createStrokeBorder", methodSig: "(Ljava/awt/BasicStroke;Ljava/awt/Paint;)Ljavax/swing/border/Border;", methodCache: &createStrokeBorder_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createStrokeBorder( _ _stroke: java_awt.BasicStroke?, _ _paint: java_awt.Paint? ) -> Border! {
        return createStrokeBorder( stroke: _stroke, paint: _paint )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createDashedBorder(java.awt.Paint)

    private static var createDashedBorder_MethodID_32: jmethodID?

    open class func createDashedBorder( paint: java_awt.Paint? ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: paint, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createDashedBorder", methodSig: "(Ljava/awt/Paint;)Ljavax/swing/border/Border;", methodCache: &createDashedBorder_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createDashedBorder( _ _paint: java_awt.Paint? ) -> Border! {
        return createDashedBorder( paint: _paint )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float,float,boolean)

    private static var createDashedBorder_MethodID_33: jmethodID?

    open class func createDashedBorder( paint: java_awt.Paint?, thickness: Float, length: Float, spacing: Float, rounded: Bool ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: paint, locals: &__locals )
        __args[1] = JNIType.toJava( value: thickness, locals: &__locals )
        __args[2] = JNIType.toJava( value: length, locals: &__locals )
        __args[3] = JNIType.toJava( value: spacing, locals: &__locals )
        __args[4] = JNIType.toJava( value: rounded, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createDashedBorder", methodSig: "(Ljava/awt/Paint;FFFZ)Ljavax/swing/border/Border;", methodCache: &createDashedBorder_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createDashedBorder( _ _paint: java_awt.Paint?, _ _thickness: Float, _ _length: Float, _ _spacing: Float, _ _rounded: Bool ) -> Border! {
        return createDashedBorder( paint: _paint, thickness: _thickness, length: _length, spacing: _spacing, rounded: _rounded )
    }

    /// public static javax.swing.border.Border javax.swing.BorderFactory.createDashedBorder(java.awt.Paint,float,float)

    private static var createDashedBorder_MethodID_34: jmethodID?

    open class func createDashedBorder( paint: java_awt.Paint?, length: Float, spacing: Float ) -> Border! {
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: paint, locals: &__locals )
        __args[1] = JNIType.toJava( value: length, locals: &__locals )
        __args[2] = JNIType.toJava( value: spacing, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/BorderFactory", classCache: &BorderFactoryJNIClass, methodName: "createDashedBorder", methodSig: "(Ljava/awt/Paint;FF)Ljavax/swing/border/Border;", methodCache: &createDashedBorder_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }

    open class func createDashedBorder( _ _paint: java_awt.Paint?, _ _length: Float, _ _spacing: Float ) -> Border! {
        return createDashedBorder( paint: _paint, length: _length, spacing: _spacing )
    }

}

