
import java_swift
import java_lang
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.HTMLEditorKit ///

open class HTMLEditorKit: StyledEditorKit {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        if !object.validDownCast( toJavaClass: "javax.swing.text.html.HTMLEditorKit", file, line ) {
            return nil
        }
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var HTMLEditorKitJNIClass: jclass?

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.BOLD_ACTION

    private static var BOLD_ACTION_FieldID: jfieldID?

    open static var BOLD_ACTION: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "BOLD_ACTION", fieldType: "Ljava/lang/String;", fieldCache: &BOLD_ACTION_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.COLOR_ACTION

    private static var COLOR_ACTION_FieldID: jfieldID?

    open static var COLOR_ACTION: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "COLOR_ACTION", fieldType: "Ljava/lang/String;", fieldCache: &COLOR_ACTION_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.DEFAULT_CSS

    private static var DEFAULT_CSS_FieldID: jfieldID?

    open static var DEFAULT_CSS: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DEFAULT_CSS", fieldType: "Ljava/lang/String;", fieldCache: &DEFAULT_CSS_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.Object javax.swing.text.html.HTMLEditorKit.DEFAULT_STYLES_KEY

    /// private static final java.awt.Cursor javax.swing.text.html.HTMLEditorKit.DefaultCursor

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_BIGGER

    private static var FONT_CHANGE_BIGGER_FieldID: jfieldID?

    open static var FONT_CHANGE_BIGGER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FONT_CHANGE_BIGGER", fieldType: "Ljava/lang/String;", fieldCache: &FONT_CHANGE_BIGGER_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.FONT_CHANGE_SMALLER

    private static var FONT_CHANGE_SMALLER_FieldID: jfieldID?

    open static var FONT_CHANGE_SMALLER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FONT_CHANGE_SMALLER", fieldType: "Ljava/lang/String;", fieldCache: &FONT_CHANGE_SMALLER_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_BOTTOM

    private static var IMG_ALIGN_BOTTOM_FieldID: jfieldID?

    open static var IMG_ALIGN_BOTTOM: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "IMG_ALIGN_BOTTOM", fieldType: "Ljava/lang/String;", fieldCache: &IMG_ALIGN_BOTTOM_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_MIDDLE

    private static var IMG_ALIGN_MIDDLE_FieldID: jfieldID?

    open static var IMG_ALIGN_MIDDLE: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "IMG_ALIGN_MIDDLE", fieldType: "Ljava/lang/String;", fieldCache: &IMG_ALIGN_MIDDLE_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.IMG_ALIGN_TOP

    private static var IMG_ALIGN_TOP_FieldID: jfieldID?

    open static var IMG_ALIGN_TOP: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "IMG_ALIGN_TOP", fieldType: "Ljava/lang/String;", fieldCache: &IMG_ALIGN_TOP_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.IMG_BORDER

    private static var IMG_BORDER_FieldID: jfieldID?

    open static var IMG_BORDER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "IMG_BORDER", fieldType: "Ljava/lang/String;", fieldCache: &IMG_BORDER_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.String javax.swing.text.html.HTMLEditorKit.INSERT_HR_HTML

    /// private static final java.lang.String javax.swing.text.html.HTMLEditorKit.INSERT_OL_HTML

    /// private static final java.lang.String javax.swing.text.html.HTMLEditorKit.INSERT_PRE_HTML

    /// private static final java.lang.String javax.swing.text.html.HTMLEditorKit.INSERT_TABLE_HTML

    /// private static final java.lang.String javax.swing.text.html.HTMLEditorKit.INSERT_UL_HTML

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.ITALIC_ACTION

    private static var ITALIC_ACTION_FieldID: jfieldID?

    open static var ITALIC_ACTION: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ITALIC_ACTION", fieldType: "Ljava/lang/String;", fieldCache: &ITALIC_ACTION_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.LOGICAL_STYLE_ACTION

    private static var LOGICAL_STYLE_ACTION_FieldID: jfieldID?

    open static var LOGICAL_STYLE_ACTION: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOGICAL_STYLE_ACTION", fieldType: "Ljava/lang/String;", fieldCache: &LOGICAL_STYLE_ACTION_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final java.awt.Cursor javax.swing.text.html.HTMLEditorKit.MoveCursor

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.PARA_INDENT_LEFT

    private static var PARA_INDENT_LEFT_FieldID: jfieldID?

    open static var PARA_INDENT_LEFT: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PARA_INDENT_LEFT", fieldType: "Ljava/lang/String;", fieldCache: &PARA_INDENT_LEFT_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.HTMLEditorKit.PARA_INDENT_RIGHT

    private static var PARA_INDENT_RIGHT_FieldID: jfieldID?

    open static var PARA_INDENT_RIGHT: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "PARA_INDENT_RIGHT", fieldType: "Ljava/lang/String;", fieldCache: &PARA_INDENT_RIGHT_FieldID, className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKitJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final javax.swing.text.html.HTMLEditorKit$ActivateLinkAction javax.swing.text.html.HTMLEditorKit.activateLinkAction

    /// private static final javax.swing.Action[] javax.swing.text.html.HTMLEditorKit.defaultActions

    /// private static final javax.swing.text.ViewFactory javax.swing.text.html.HTMLEditorKit.defaultFactory

    /// private static javax.swing.text.html.HTMLEditorKit$Parser javax.swing.text.html.HTMLEditorKit.defaultParser

    /// private static final javax.swing.text.html.HTMLEditorKit$NavigateLinkAction javax.swing.text.html.HTMLEditorKit.nextLinkAction

    /// private static final javax.swing.text.html.HTMLEditorKit$NavigateLinkAction javax.swing.text.html.HTMLEditorKit.previousLinkAction

    /// private javax.accessibility.AccessibleContext javax.swing.text.html.HTMLEditorKit.accessibleContext

    /// private java.awt.Cursor javax.swing.text.html.HTMLEditorKit.defaultCursor

    /// private boolean javax.swing.text.html.HTMLEditorKit.foundLink

    /// javax.swing.text.MutableAttributeSet javax.swing.text.html.HTMLEditorKit.input

    // Skipping field: true false false false false false 

    /// private boolean javax.swing.text.html.HTMLEditorKit.isAutoFormSubmission

    /// private java.awt.Cursor javax.swing.text.html.HTMLEditorKit.linkCursor

    /// private javax.swing.text.html.HTMLEditorKit$LinkController javax.swing.text.html.HTMLEditorKit.linkHandler

    /// private java.lang.Object javax.swing.text.html.HTMLEditorKit.linkNavigationTag

    /// private int javax.swing.text.html.HTMLEditorKit.prevHypertextOffset

    /// private javax.swing.JEditorPane javax.swing.text.html.HTMLEditorKit.theEditor

    /// private static final javax.swing.Action[] javax.swing.text.StyledEditorKit.defaultActions

    /// private static final javax.swing.text.ViewFactory javax.swing.text.StyledEditorKit.defaultFactory

    /// javax.swing.text.Element javax.swing.text.StyledEditorKit.currentParagraph

    // Skipping field: true false false false false false 

    /// javax.swing.text.Element javax.swing.text.StyledEditorKit.currentRun

    // Skipping field: true false false false false false 

    /// private javax.swing.text.StyledEditorKit$AttributeTracker javax.swing.text.StyledEditorKit.inputAttributeUpdater

    /// javax.swing.text.MutableAttributeSet javax.swing.text.StyledEditorKit.inputAttributes

    // Skipping field: true false false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.EndOfLineStringProperty

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.backwardAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.beepAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.beginAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.beginLineAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.beginParagraphAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.beginWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.copyAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.cutAction

    // Skipping field: false true false false false false 

    /// private static final javax.swing.Action[] javax.swing.text.DefaultEditorKit.defaultActions

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.defaultKeyTypedAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.deleteNextCharAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.deleteNextWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.deletePrevCharAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.deletePrevWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.downAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.endAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.endLineAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.endParagraphAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.endWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.forwardAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.insertBreakAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.insertContentAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.insertTabAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.nextWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.pageDownAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.pageUpAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.pasteAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.previousWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.readOnlyAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectAllAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectLineAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectParagraphAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBackwardAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginLineAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginParagraphAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionBeginWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionDownAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndLineAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndParagraphAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionEndWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionForwardAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionNextWordAction

    // Skipping field: false true false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPageDownAction

    // Skipping field: true false false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPageLeftAction

    // Skipping field: true false false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPageRightAction

    // Skipping field: true false false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPageUpAction

    // Skipping field: true false false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionPreviousWordAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.selectionUpAction

    // Skipping field: false true false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.toggleComponentOrientationAction

    // Skipping field: true false false false false false 

    /// static final java.lang.String javax.swing.text.DefaultEditorKit.unselectAction

    // Skipping field: true false false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.upAction

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.DefaultEditorKit.writableAction

    // Skipping field: false true false false false false 

    /// public javax.swing.text.html.HTMLEditorKit()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/html/HTMLEditorKit", classCache: &HTMLEditorKit.HTMLEditorKitJNIClass, methodSig: "()V", methodCache: &HTMLEditorKit.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static boolean javax.swing.text.html.HTMLEditorKit.access$000(javax.swing.text.html.HTMLEditorKit)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.text.html.HTMLEditorKit.access$002(javax.swing.text.html.HTMLEditorKit,boolean)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.html.HTMLEditorKit.access$100(javax.swing.text.html.HTMLEditorKit)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.html.HTMLEditorKit.access$102(javax.swing.text.html.HTMLEditorKit,int)

    // Skipping method: true false false false false 

    /// static java.lang.Object javax.swing.text.html.HTMLEditorKit.access$200(javax.swing.text.AttributeSet,javax.swing.text.html.HTML$Attribute)

    // Skipping method: true false false false false 

    /// static java.lang.Object javax.swing.text.html.HTMLEditorKit.access$300(javax.swing.text.html.HTMLEditorKit)

    // Skipping method: true false false false false 

    /// static java.lang.Object javax.swing.text.html.HTMLEditorKit.access$302(javax.swing.text.html.HTMLEditorKit,java.lang.Object)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.html.HTMLEditorKit.access$400(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// private static java.lang.Object javax.swing.text.html.HTMLEditorKit.getAttrValue(javax.swing.text.AttributeSet,javax.swing.text.html.HTML$Attribute)

    /// private static int javax.swing.text.html.HTMLEditorKit.getBodyElementStart(javax.swing.text.JTextComponent)

    /// static java.io.InputStream javax.swing.text.html.HTMLEditorKit.getResourceAsStream(java.lang.String)

    // Skipping method: true false false false false 

    /// public java.lang.Object javax.swing.text.html.HTMLEditorKit.clone()

    // Skipping method: false true false false false 

    /// public javax.swing.text.Document javax.swing.text.html.HTMLEditorKit.createDefaultDocument()

    // Skipping method: false true false false false 

    /// protected void javax.swing.text.html.HTMLEditorKit.createInputAttributes(javax.swing.text.Element,javax.swing.text.MutableAttributeSet)

    private static var createInputAttributes_MethodID_2: jmethodID?

    override open func createInputAttributes( element: Element?, set: MutableAttributeSet? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: element, locals: &__locals )
        __args[1] = JNIType.toJava( value: set, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "createInputAttributes", methodSig: "(Ljavax/swing/text/Element;Ljavax/swing/text/MutableAttributeSet;)V", methodCache: &HTMLEditorKit.createInputAttributes_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func createInputAttributes( _ _element: Element?, _ _set: MutableAttributeSet? ) {
        createInputAttributes( element: _element, set: _set )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.deinstall(javax.swing.JEditorPane)

    // Skipping method: false true false false false 

    /// private javax.swing.text.html.HTMLEditorKit$Parser javax.swing.text.html.HTMLEditorKit.ensureParser(javax.swing.text.html.HTMLDocument) throws java.io.IOException

    /// public javax.accessibility.AccessibleContext javax.swing.text.html.HTMLEditorKit.getAccessibleContext()

    private static var getAccessibleContext_MethodID_3: jmethodID?

    open func getAccessibleContext() -> /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleContext", methodSig: "()Ljavax/accessibility/AccessibleContext;", methodCache: &HTMLEditorKit.getAccessibleContext_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public javax.swing.Action[] javax.swing.text.html.HTMLEditorKit.getActions()

    // Skipping method: false true false false false 

    /// public java.lang.String javax.swing.text.html.HTMLEditorKit.getContentType()

    // Skipping method: false true false false false 

    /// public java.awt.Cursor javax.swing.text.html.HTMLEditorKit.getDefaultCursor()

    private static var getDefaultCursor_MethodID_4: jmethodID?

    open func getDefaultCursor() -> java_awt.Cursor! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultCursor", methodSig: "()Ljava/awt/Cursor;", methodCache: &HTMLEditorKit.getDefaultCursor_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Cursor( javaObject: __return ) : nil
    }


    /// public javax.swing.text.MutableAttributeSet javax.swing.text.html.HTMLEditorKit.getInputAttributes()

    // Skipping method: false true false false false 

    /// public java.awt.Cursor javax.swing.text.html.HTMLEditorKit.getLinkCursor()

    private static var getLinkCursor_MethodID_5: jmethodID?

    open func getLinkCursor() -> java_awt.Cursor! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLinkCursor", methodSig: "()Ljava/awt/Cursor;", methodCache: &HTMLEditorKit.getLinkCursor_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Cursor( javaObject: __return ) : nil
    }


    /// protected javax.swing.text.html.HTMLEditorKit$Parser javax.swing.text.html.HTMLEditorKit.getParser()

    private static var getParser_MethodID_6: jmethodID?

    open func getParser() -> HTMLEditorKit_Parser! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getParser", methodSig: "()Ljavax/swing/text/html/HTMLEditorKit$Parser;", methodCache: &HTMLEditorKit.getParser_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? HTMLEditorKit_Parser( javaObject: __return ) : nil
    }


    /// public javax.swing.text.html.StyleSheet javax.swing.text.html.HTMLEditorKit.getStyleSheet()

    private static var getStyleSheet_MethodID_7: jmethodID?

    open func getStyleSheet() -> StyleSheet! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getStyleSheet", methodSig: "()Ljavax/swing/text/html/StyleSheet;", methodCache: &HTMLEditorKit.getStyleSheet_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? StyleSheet( javaObject: __return ) : nil
    }


    /// public javax.swing.text.ViewFactory javax.swing.text.html.HTMLEditorKit.getViewFactory()

    // Skipping method: false true false false false 

    /// public void javax.swing.text.html.HTMLEditorKit.insertHTML(javax.swing.text.html.HTMLDocument,int,java.lang.String,int,int,javax.swing.text.html.HTML$Tag) throws javax.swing.text.BadLocationException,java.io.IOException

    private static var insertHTML_MethodID_8: jmethodID?

    open func insertHTML( doc: HTMLDocument?, offset: Int, html: String?, popDepth: Int, pushDepth: Int, insertTag: HTML_Tag? ) throws /* javax.swing.text.BadLocationException, java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: doc, locals: &__locals )
        __args[1] = jvalue( i: jint(offset) )
        __args[2] = JNIType.toJava( value: html, locals: &__locals )
        __args[3] = jvalue( i: jint(popDepth) )
        __args[4] = jvalue( i: jint(pushDepth) )
        __args[5] = JNIType.toJava( value: insertTag, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insertHTML", methodSig: "(Ljavax/swing/text/html/HTMLDocument;ILjava/lang/String;IILjavax/swing/text/html/HTML$Tag;)V", methodCache: &HTMLEditorKit.insertHTML_MethodID_8, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw BadLocationException( javaObject: throwable )
        }
    }

    open func insertHTML( _ _doc: HTMLDocument?, _ _offset: Int, _ _html: String?, _ _popDepth: Int, _ _pushDepth: Int, _ _insertTag: HTML_Tag? ) throws /* javax.swing.text.BadLocationException, java.io.IOException */ {
        try insertHTML( doc: _doc, offset: _offset, html: _html, popDepth: _popDepth, pushDepth: _pushDepth, insertTag: _insertTag )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.install(javax.swing.JEditorPane)

    // Skipping method: false true false false false 

    /// public boolean javax.swing.text.html.HTMLEditorKit.isAutoFormSubmission()

    private static var isAutoFormSubmission_MethodID_9: jmethodID?

    open func isAutoFormSubmission() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAutoFormSubmission", methodSig: "()Z", methodCache: &HTMLEditorKit.isAutoFormSubmission_MethodID_9, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public void javax.swing.text.html.HTMLEditorKit.read(java.io.Reader,javax.swing.text.Document,int) throws java.io.IOException,javax.swing.text.BadLocationException

    // Skipping method: false true false false false 

    /// public void javax.swing.text.html.HTMLEditorKit.setAutoFormSubmission(boolean)

    private static var setAutoFormSubmission_MethodID_10: jmethodID?

    open func setAutoFormSubmission( isAuto: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(isAuto ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAutoFormSubmission", methodSig: "(Z)V", methodCache: &HTMLEditorKit.setAutoFormSubmission_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setAutoFormSubmission( _ _isAuto: Bool ) {
        setAutoFormSubmission( isAuto: _isAuto )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.setDefaultCursor(java.awt.Cursor)

    private static var setDefaultCursor_MethodID_11: jmethodID?

    open func setDefaultCursor( cursor: java_awt.Cursor? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cursor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDefaultCursor", methodSig: "(Ljava/awt/Cursor;)V", methodCache: &HTMLEditorKit.setDefaultCursor_MethodID_11, args: &__args, locals: &__locals )
    }

    open func setDefaultCursor( _ _cursor: java_awt.Cursor? ) {
        setDefaultCursor( cursor: _cursor )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.setLinkCursor(java.awt.Cursor)

    private static var setLinkCursor_MethodID_12: jmethodID?

    open func setLinkCursor( cursor: java_awt.Cursor? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cursor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLinkCursor", methodSig: "(Ljava/awt/Cursor;)V", methodCache: &HTMLEditorKit.setLinkCursor_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setLinkCursor( _ _cursor: java_awt.Cursor? ) {
        setLinkCursor( cursor: _cursor )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.setStyleSheet(javax.swing.text.html.StyleSheet)

    private static var setStyleSheet_MethodID_13: jmethodID?

    open func setStyleSheet( s: StyleSheet? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setStyleSheet", methodSig: "(Ljavax/swing/text/html/StyleSheet;)V", methodCache: &HTMLEditorKit.setStyleSheet_MethodID_13, args: &__args, locals: &__locals )
    }

    open func setStyleSheet( _ _s: StyleSheet? ) {
        setStyleSheet( s: _s )
    }

    /// public void javax.swing.text.html.HTMLEditorKit.write(java.io.Writer,javax.swing.text.Document,int,int) throws java.io.IOException,javax.swing.text.BadLocationException

    // Skipping method: false true false false false 

}

