
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.FlowView$FlowStrategy ///

open class FlowView_FlowStrategy: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FlowView_FlowStrategyJNIClass: jclass?

    /// static final boolean javax.swing.text.FlowView$FlowStrategy.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// javax.swing.text.Position javax.swing.text.FlowView$FlowStrategy.damageStart

    // Skipping field: true false false false false false 

    /// java.util.Vector javax.swing.text.FlowView$FlowStrategy.viewBuffer

    // Skipping field: true false false false false false 

    /// public javax.swing.text.FlowView$FlowStrategy()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/FlowView$FlowStrategy", classCache: &FlowView_FlowStrategy.FlowView_FlowStrategyJNIClass, methodSig: "()V", methodCache: &FlowView_FlowStrategy.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// void javax.swing.text.FlowView$FlowStrategy.addDamage(javax.swing.text.FlowView,int)

    // Skipping method: true false false false false 

    /// protected void javax.swing.text.FlowView$FlowStrategy.adjustRow(javax.swing.text.FlowView,int,int,int)

    private static var adjustRow_MethodID_2: jmethodID?

    open func adjustRow( fv: FlowView?, rowIndex: Int, desiredSpan: Int, x: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = jvalue( i: jint(rowIndex) )
        __args[2] = jvalue( i: jint(desiredSpan) )
        __args[3] = jvalue( i: jint(x) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "adjustRow", methodSig: "(Ljavax/swing/text/FlowView;III)V", methodCache: &FlowView_FlowStrategy.adjustRow_MethodID_2, args: &__args, locals: &__locals )
    }

    open func adjustRow( _ _fv: FlowView?, _ _rowIndex: Int, _ _desiredSpan: Int, _ _x: Int ) {
        adjustRow( fv: _fv, rowIndex: _rowIndex, desiredSpan: _desiredSpan, x: _x )
    }

    /// public void javax.swing.text.FlowView$FlowStrategy.changedUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)

    private static var changedUpdate_MethodID_3: jmethodID?

    open func changedUpdate( fv: FlowView?, e: DocumentEvent?, alloc: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = JNIType.toJava( value: e, locals: &__locals )
        __args[2] = JNIType.toJava( value: alloc, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "changedUpdate", methodSig: "(Ljavax/swing/text/FlowView;Ljavax/swing/event/DocumentEvent;Ljava/awt/Rectangle;)V", methodCache: &FlowView_FlowStrategy.changedUpdate_MethodID_3, args: &__args, locals: &__locals )
    }

    open func changedUpdate( _ _fv: FlowView?, _ _e: DocumentEvent?, _ _alloc: java_awt.Rectangle? ) {
        changedUpdate( fv: _fv, e: _e, alloc: _alloc )
    }

    /// protected javax.swing.text.View javax.swing.text.FlowView$FlowStrategy.createView(javax.swing.text.FlowView,int,int,int)

    private static var createView_MethodID_4: jmethodID?

    open func createView( fv: FlowView?, startOffset: Int, spanLeft: Int, rowIndex: Int ) -> View! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = jvalue( i: jint(startOffset) )
        __args[2] = jvalue( i: jint(spanLeft) )
        __args[3] = jvalue( i: jint(rowIndex) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createView", methodSig: "(Ljavax/swing/text/FlowView;III)Ljavax/swing/text/View;", methodCache: &FlowView_FlowStrategy.createView_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? View( javaObject: __return ) : nil
    }

    open func createView( _ _fv: FlowView?, _ _startOffset: Int, _ _spanLeft: Int, _ _rowIndex: Int ) -> View! {
        return createView( fv: _fv, startOffset: _startOffset, spanLeft: _spanLeft, rowIndex: _rowIndex )
    }

    /// protected javax.swing.text.View javax.swing.text.FlowView$FlowStrategy.getLogicalView(javax.swing.text.FlowView)

    private static var getLogicalView_MethodID_5: jmethodID?

    open func getLogicalView( fv: FlowView? ) -> View! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLogicalView", methodSig: "(Ljavax/swing/text/FlowView;)Ljavax/swing/text/View;", methodCache: &FlowView_FlowStrategy.getLogicalView_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? View( javaObject: __return ) : nil
    }

    open func getLogicalView( _ _fv: FlowView? ) -> View! {
        return getLogicalView( fv: _fv )
    }

    /// public void javax.swing.text.FlowView$FlowStrategy.insertUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)

    private static var insertUpdate_MethodID_6: jmethodID?

    open func insertUpdate( fv: FlowView?, e: DocumentEvent?, alloc: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = JNIType.toJava( value: e, locals: &__locals )
        __args[2] = JNIType.toJava( value: alloc, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insertUpdate", methodSig: "(Ljavax/swing/text/FlowView;Ljavax/swing/event/DocumentEvent;Ljava/awt/Rectangle;)V", methodCache: &FlowView_FlowStrategy.insertUpdate_MethodID_6, args: &__args, locals: &__locals )
    }

    open func insertUpdate( _ _fv: FlowView?, _ _e: DocumentEvent?, _ _alloc: java_awt.Rectangle? ) {
        insertUpdate( fv: _fv, e: _e, alloc: _alloc )
    }

    /// public void javax.swing.text.FlowView$FlowStrategy.layout(javax.swing.text.FlowView)

    private static var layout_MethodID_7: jmethodID?

    open func layout( fv: FlowView? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layout", methodSig: "(Ljavax/swing/text/FlowView;)V", methodCache: &FlowView_FlowStrategy.layout_MethodID_7, args: &__args, locals: &__locals )
    }

    open func layout( _ _fv: FlowView? ) {
        layout( fv: _fv )
    }

    /// protected int javax.swing.text.FlowView$FlowStrategy.layoutRow(javax.swing.text.FlowView,int,int)

    private static var layoutRow_MethodID_8: jmethodID?

    open func layoutRow( fv: FlowView?, rowIndex: Int, pos: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = jvalue( i: jint(rowIndex) )
        __args[2] = jvalue( i: jint(pos) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "layoutRow", methodSig: "(Ljavax/swing/text/FlowView;II)I", methodCache: &FlowView_FlowStrategy.layoutRow_MethodID_8, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func layoutRow( _ _fv: FlowView?, _ _rowIndex: Int, _ _pos: Int ) -> Int {
        return layoutRow( fv: _fv, rowIndex: _rowIndex, pos: _pos )
    }

    /// public void javax.swing.text.FlowView$FlowStrategy.removeUpdate(javax.swing.text.FlowView,javax.swing.event.DocumentEvent,java.awt.Rectangle)

    private static var removeUpdate_MethodID_9: jmethodID?

    open func removeUpdate( fv: FlowView?, e: DocumentEvent?, alloc: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: fv, locals: &__locals )
        __args[1] = JNIType.toJava( value: e, locals: &__locals )
        __args[2] = JNIType.toJava( value: alloc, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeUpdate", methodSig: "(Ljavax/swing/text/FlowView;Ljavax/swing/event/DocumentEvent;Ljava/awt/Rectangle;)V", methodCache: &FlowView_FlowStrategy.removeUpdate_MethodID_9, args: &__args, locals: &__locals )
    }

    open func removeUpdate( _ _fv: FlowView?, _ _e: DocumentEvent?, _ _alloc: java_awt.Rectangle? ) {
        removeUpdate( fv: _fv, e: _e, alloc: _alloc )
    }

    /// void javax.swing.text.FlowView$FlowStrategy.reparentViews(javax.swing.text.View,int)

    // Skipping method: true false false false false 

    /// void javax.swing.text.FlowView$FlowStrategy.unsetDamage()

    // Skipping method: true false false false false 

}

