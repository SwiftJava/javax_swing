
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.BorderUIResource$EmptyBorderUIResource ///

open class BorderUIResource_EmptyBorderUIResource: EmptyBorder, UIResource {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BorderUIResource_EmptyBorderUIResourceJNIClass: jclass?

    /// protected int javax.swing.border.EmptyBorder.left

    private static var left_FieldID: jfieldID?

    override open var left: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "left", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.left_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "left", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.left_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.right

    private static var right_FieldID: jfieldID?

    override open var right: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "right", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.right_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "right", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.right_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.top

    private static var top_FieldID: jfieldID?

    override open var top: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "top", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.top_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "top", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.top_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.bottom

    private static var bottom_FieldID: jfieldID?

    override open var bottom: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "bottom", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.bottom_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "bottom", fieldType: "I", fieldCache: &BorderUIResource_EmptyBorderUIResource.bottom_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public javax.swing.plaf.BorderUIResource$EmptyBorderUIResource(int,int,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( top: Int, left: Int, bottom: Int, right: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: top, locals: &__locals )
        __args[1] = JNIType.toJava( value: left, locals: &__locals )
        __args[2] = JNIType.toJava( value: bottom, locals: &__locals )
        __args[3] = JNIType.toJava( value: right, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$EmptyBorderUIResource", classCache: &BorderUIResource_EmptyBorderUIResource.BorderUIResource_EmptyBorderUIResourceJNIClass, methodSig: "(IIII)V", methodCache: &BorderUIResource_EmptyBorderUIResource.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int ) {
        self.init( top: _top, left: _left, bottom: _bottom, right: _right )
    }

    /// public javax.swing.plaf.BorderUIResource$EmptyBorderUIResource(java.awt.Insets)

    private static var new_MethodID_2: jmethodID?

    public convenience init( insets: java_awt.Insets? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: insets != nil ? insets! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$EmptyBorderUIResource", classCache: &BorderUIResource_EmptyBorderUIResource.BorderUIResource_EmptyBorderUIResourceJNIClass, methodSig: "(Ljava/awt/Insets;)V", methodCache: &BorderUIResource_EmptyBorderUIResource.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _insets: java_awt.Insets? ) {
        self.init( insets: _insets )
    }

}

