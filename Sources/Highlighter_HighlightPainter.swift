
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.text.Highlighter$HighlightPainter ///

public protocol Highlighter_HighlightPainter: JavaProtocol {

    /// public abstract void javax.swing.text.Highlighter$HighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)

    func paint( g: java_awt.Graphics?, p0: Int, p1: Int, bounds: java_awt.Shape?, c: JTextComponent? )

}


open class Highlighter_HighlightPainterForward: JNIObjectForward, Highlighter_HighlightPainter {

    private static var Highlighter_HighlightPainterJNIClass: jclass?

    /// public abstract void javax.swing.text.Highlighter$HighlightPainter.paint(java.awt.Graphics,int,int,java.awt.Shape,javax.swing.text.JTextComponent)

    private static var paint_MethodID_2: jmethodID?

    open func paint( g: java_awt.Graphics?, p0: Int, p1: Int, bounds: java_awt.Shape?, c: JTextComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: p0, locals: &__locals )
        __args[2] = JNIType.toJava( value: p1, locals: &__locals )
        __args[3] = JNIType.toJava( value: bounds, locals: &__locals )
        __args[4] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;IILjava/awt/Shape;Ljavax/swing/text/JTextComponent;)V", methodCache: &Highlighter_HighlightPainterForward.paint_MethodID_2, args: &__args, locals: &__locals )
    }

    open func paint( _ _g: java_awt.Graphics?, _ _p0: Int, _ _p1: Int, _ _bounds: java_awt.Shape?, _ _c: JTextComponent? ) {
        paint( g: _g, p0: _p0, p1: _p1, bounds: _bounds, c: _c )
    }

}


