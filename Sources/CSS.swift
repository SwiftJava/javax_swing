
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.CSS ///

open class CSS: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var CSSJNIClass: jclass?

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.attributeMap

    /// static int javax.swing.text.html.CSS.baseFontSizeIndex

    // Skipping field: true false false false false false 

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.cssValueToInternalValueMap

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.htmlAttrToCssAttrMap

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.htmlValueToCssValueMap

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.styleConstantToCssMap

    /// private static final java.util.Hashtable javax.swing.text.html.CSS.valueMap

    /// private int javax.swing.text.html.CSS.baseFontSize

    /// private transient javax.swing.text.html.StyleSheet javax.swing.text.html.CSS.styleSheet

    /// private transient java.util.Hashtable javax.swing.text.html.CSS.valueConvertor

    /// public javax.swing.text.html.CSS()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/html/CSS", classCache: &CSS.CSSJNIClass, methodSig: "()V", methodCache: &CSS.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static javax.swing.text.html.StyleSheet javax.swing.text.html.CSS.access$500(javax.swing.text.html.CSS,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// static java.util.Hashtable javax.swing.text.html.CSS.access$600()

    // Skipping method: true false false false false 

    /// static java.util.Hashtable javax.swing.text.html.CSS.access$700()

    // Skipping method: true false false false false 

    /// static void javax.swing.text.html.CSS.calculateTiledLayout(javax.swing.text.html.CSS$LayoutIterator,int)

    // Skipping method: true false false false false 

    /// static javax.swing.SizeRequirements javax.swing.text.html.CSS.calculateTiledRequirements(javax.swing.text.html.CSS$LayoutIterator,javax.swing.SizeRequirements)

    // Skipping method: true false false false false 

    /// static java.lang.String javax.swing.text.html.CSS.colorToHex(java.awt.Color)

    // Skipping method: true false false false false 

    /// public static javax.swing.text.html.CSS$Attribute[] javax.swing.text.html.CSS.getAllAttributeKeys()

    private static var getAllAttributeKeys_MethodID_2: jmethodID?

    open class func getAllAttributeKeys() -> [CSS_Attribute]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/html/CSS", classCache: &CSSJNIClass, methodName: "getAllAttributeKeys", methodSig: "()[Ljavax/swing/text/html/CSS$Attribute;", methodCache: &getAllAttributeKeys_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [CSS_Attribute].self, from: __return )
    }


    /// public static final javax.swing.text.html.CSS$Attribute javax.swing.text.html.CSS.getAttribute(java.lang.String)

    private static var getAttribute_MethodID_3: jmethodID?

    open class func getAttribute( name: String? ) -> CSS_Attribute! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/html/CSS", classCache: &CSSJNIClass, methodName: "getAttribute", methodSig: "(Ljava/lang/String;)Ljavax/swing/text/html/CSS$Attribute;", methodCache: &getAttribute_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CSS_Attribute( javaObject: __return ) : nil
    }

    open class func getAttribute( _ _name: String? ) -> CSS_Attribute! {
        return getAttribute( name: _name )
    }

    /// private static int javax.swing.text.html.CSS.getColorComponent(java.lang.String,int[])

    /// static int javax.swing.text.html.CSS.getFontSize(javax.swing.text.AttributeSet,int,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.html.CSS.getIndexOfSize(float,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.html.CSS.getIndexOfSize(float,int[])

    // Skipping method: true false false false false 

    /// private static int javax.swing.text.html.CSS.getTableBorder(javax.swing.text.AttributeSet)

    /// static java.net.URL javax.swing.text.html.CSS.getURL(java.net.URL,java.lang.String)

    // Skipping method: true false false false false 

    /// static final javax.swing.text.html.CSS$Value javax.swing.text.html.CSS.getValue(java.lang.String)

    // Skipping method: true false false false false 

    /// static final java.awt.Color javax.swing.text.html.CSS.hexToColor(java.lang.String)

    // Skipping method: true false false false false 

    /// private static java.awt.Color javax.swing.text.html.CSS.parseRGB(java.lang.String)

    /// static java.lang.String[] javax.swing.text.html.CSS.parseStrings(java.lang.String)

    // Skipping method: true false false false false 

    /// static java.awt.Color javax.swing.text.html.CSS.stringToColor(java.lang.String)

    // Skipping method: true false false false false 

    /// void javax.swing.text.html.CSS.addInternalCSSValue(javax.swing.text.MutableAttributeSet,javax.swing.text.html.CSS$Attribute,java.lang.String)

    // Skipping method: true false false false false 

    /// java.lang.Object javax.swing.text.html.CSS.cssValueToStyleConstantsValue(javax.swing.text.StyleConstants,java.lang.Object)

    // Skipping method: true false false false false 

    /// int javax.swing.text.html.CSS.getBaseFontSize()

    // Skipping method: true false false false false 

    /// java.awt.Color javax.swing.text.html.CSS.getColor(javax.swing.text.AttributeSet,javax.swing.text.html.CSS$Attribute)

    // Skipping method: true false false false false 

    /// private javax.swing.text.html.CSS$Attribute javax.swing.text.html.CSS.getCssAlignAttribute(javax.swing.text.html.HTML$Tag,javax.swing.text.AttributeSet)

    /// private javax.swing.text.html.CSS$Attribute[] javax.swing.text.html.CSS.getCssAttribute(javax.swing.text.html.HTML$Attribute)

    /// java.lang.Object javax.swing.text.html.CSS.getCssValue(javax.swing.text.html.CSS$Attribute,java.lang.String)

    // Skipping method: true false false false false 

    /// java.awt.Font javax.swing.text.html.CSS.getFont(javax.swing.text.StyleContext,javax.swing.text.AttributeSet,int,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// private javax.swing.text.html.HTML$Tag javax.swing.text.html.CSS.getHTMLTag(javax.swing.text.AttributeSet)

    /// java.lang.Object javax.swing.text.html.CSS.getInternalCSSValue(javax.swing.text.html.CSS$Attribute,java.lang.String)

    // Skipping method: true false false false false 

    /// float javax.swing.text.html.CSS.getLength(javax.swing.text.AttributeSet,javax.swing.text.html.CSS$Attribute,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// float javax.swing.text.html.CSS.getPointSize(int,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// float javax.swing.text.html.CSS.getPointSize(java.lang.String,javax.swing.text.html.StyleSheet)

    // Skipping method: true false false false false 

    /// private javax.swing.text.html.StyleSheet javax.swing.text.html.CSS.getStyleSheet(javax.swing.text.html.StyleSheet)

    /// private boolean javax.swing.text.html.CSS.isFloater(java.lang.String)

    /// private boolean javax.swing.text.html.CSS.isHTMLFontTag(javax.swing.text.html.HTML$Tag)

    /// private void javax.swing.text.html.CSS.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// void javax.swing.text.html.CSS.setBaseFontSize(int)

    // Skipping method: true false false false false 

    /// void javax.swing.text.html.CSS.setBaseFontSize(java.lang.String)

    // Skipping method: true false false false false 

    /// javax.swing.text.html.CSS$Attribute javax.swing.text.html.CSS.styleConstantsKeyToCSSKey(javax.swing.text.StyleConstants)

    // Skipping method: true false false false false 

    /// java.lang.Object javax.swing.text.html.CSS.styleConstantsValueToCSSValue(javax.swing.text.StyleConstants,java.lang.Object)

    // Skipping method: true false false false false 

    /// private void javax.swing.text.html.CSS.translateAttribute(javax.swing.text.html.HTML$Attribute,java.lang.String,javax.swing.text.MutableAttributeSet)

    /// private void javax.swing.text.html.CSS.translateAttributes(javax.swing.text.html.HTML$Tag,javax.swing.text.AttributeSet,javax.swing.text.MutableAttributeSet)

    /// private void javax.swing.text.html.CSS.translateEmbeddedAttributes(javax.swing.text.AttributeSet,javax.swing.text.MutableAttributeSet)

    /// javax.swing.text.AttributeSet javax.swing.text.html.CSS.translateHTMLToCSS(javax.swing.text.AttributeSet)

    // Skipping method: true false false false false 

    /// private boolean javax.swing.text.html.CSS.validTextAlignValue(java.lang.String)

    /// private void javax.swing.text.html.CSS.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

