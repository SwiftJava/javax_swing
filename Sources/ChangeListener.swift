
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.event.ChangeListener ///

public protocol ChangeListener: java_util.EventListener {

    /// public abstract void javax.swing.event.ChangeListener.stateChanged(javax.swing.event.ChangeEvent)

    func stateChanged( e: ChangeEvent? )

}


open class ChangeListenerForward: java_util.EventListenerForward, ChangeListener {

    private static var ChangeListenerJNIClass: jclass?

    /// public abstract void javax.swing.event.ChangeListener.stateChanged(javax.swing.event.ChangeEvent)

    private static var stateChanged_MethodID_2: jmethodID?

    open func stateChanged( e: ChangeEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "stateChanged", methodSig: "(Ljavax/swing/event/ChangeEvent;)V", methodCache: &ChangeListenerForward.stateChanged_MethodID_2, args: &__args, locals: &__locals )
    }

    open func stateChanged( _ _e: ChangeEvent? ) {
        stateChanged( e: _e )
    }

}

private typealias ChangeListener_stateChanged_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func ChangeListener_stateChanged_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    ChangeListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).stateChanged( e: e != nil ? ChangeEvent( javaObject: e ) : nil )
}

fileprivate class ChangeListenerLocal_: JNILocalProxy<ChangeListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let ChangeListener_stateChanged_0_thunk: ChangeListener_stateChanged_0_type = ChangeListener_stateChanged_0
        natives.append( JNINativeMethod( name: strdup("__stateChanged"), signature: strdup("(JLjavax/swing/event/ChangeEvent;)V"), fnPtr: unsafeBitCast( ChangeListener_stateChanged_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/ChangeListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension ChangeListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return ChangeListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class ChangeListenerBase: ChangeListener {

    public init() {}

    /// public abstract void javax.swing.event.ChangeListener.stateChanged(javax.swing.event.ChangeEvent)

    open func stateChanged( e: ChangeEvent? ) /**/ {
    }


}
