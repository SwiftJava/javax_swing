
import java_swift
import java_awt
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.synth.SynthTreeUI ///

open class SynthTreeUI: BasicTreeUI, /* java.beans.PropertyChangeListener */ UnclassedProtocol, SynthUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SynthTreeUIJNIClass: jclass?

    /// private javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthTreeUI.style

    /// private javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthTreeUI.cellStyle

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.paintContext

    /// private boolean javax.swing.plaf.synth.SynthTreeUI.drawHorizontalLines

    /// private boolean javax.swing.plaf.synth.SynthTreeUI.drawVerticalLines

    /// private java.lang.Object javax.swing.plaf.synth.SynthTreeUI.linesStyle

    /// private int javax.swing.plaf.synth.SynthTreeUI.padding

    /// private boolean javax.swing.plaf.synth.SynthTreeUI.useTreeColors

    /// private javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.expandedIconWrapper

    /// private static final java.lang.StringBuilder javax.swing.plaf.basic.BasicTreeUI.BASELINE_COMPONENT_KEY

    /// private static final javax.swing.plaf.basic.BasicTreeUI$Actions javax.swing.plaf.basic.BasicTreeUI.SHARED_ACTION

    /// protected transient javax.swing.Icon javax.swing.plaf.basic.BasicTreeUI.collapsedIcon

    private static var collapsedIcon_FieldID: jfieldID?

    override open var collapsedIcon: Icon! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "collapsedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &SynthTreeUI.collapsedIcon_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "collapsedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &SynthTreeUI.collapsedIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient javax.swing.Icon javax.swing.plaf.basic.BasicTreeUI.expandedIcon

    private static var expandedIcon_FieldID: jfieldID?

    override open var expandedIcon: Icon! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "expandedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &SynthTreeUI.expandedIcon_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "expandedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &SynthTreeUI.expandedIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.Color javax.swing.plaf.basic.BasicTreeUI.hashColor

    /// protected int javax.swing.plaf.basic.BasicTreeUI.leftChildIndent

    private static var leftChildIndent_FieldID: jfieldID?

    override open var leftChildIndent: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "leftChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.leftChildIndent_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "leftChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.leftChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.rightChildIndent

    private static var rightChildIndent_FieldID: jfieldID?

    override open var rightChildIndent: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "rightChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.rightChildIndent_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "rightChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.rightChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.totalChildIndent

    private static var totalChildIndent_FieldID: jfieldID?

    override open var totalChildIndent: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "totalChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.totalChildIndent_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "totalChildIndent", fieldType: "I", fieldCache: &SynthTreeUI.totalChildIndent_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredMinSize

    private static var preferredMinSize_FieldID: jfieldID?

    override open var preferredMinSize: java_awt.Dimension! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "preferredMinSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &SynthTreeUI.preferredMinSize_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Dimension( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "preferredMinSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &SynthTreeUI.preferredMinSize_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.lastSelectedRow

    private static var lastSelectedRow_FieldID: jfieldID?

    override open var lastSelectedRow: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "lastSelectedRow", fieldType: "I", fieldCache: &SynthTreeUI.lastSelectedRow_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "lastSelectedRow", fieldType: "I", fieldCache: &SynthTreeUI.lastSelectedRow_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected javax.swing.JTree javax.swing.plaf.basic.BasicTreeUI.tree

    private static var tree_FieldID: jfieldID?

    override open var tree: JTree! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "tree", fieldType: "Ljavax/swing/JTree;", fieldCache: &SynthTreeUI.tree_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? JTree( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tree", fieldType: "Ljavax/swing/JTree;", fieldCache: &SynthTreeUI.tree_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient javax.swing.tree.TreeCellRenderer javax.swing.plaf.basic.BasicTreeUI.currentCellRenderer

    private static var currentCellRenderer_FieldID: jfieldID?

    override open var currentCellRenderer: TreeCellRenderer! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "currentCellRenderer", fieldType: "Ljavax/swing/tree/TreeCellRenderer;", fieldCache: &SynthTreeUI.currentCellRenderer_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? TreeCellRendererForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "currentCellRenderer", fieldType: "Ljavax/swing/tree/TreeCellRenderer;", fieldCache: &SynthTreeUI.currentCellRenderer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.createdRenderer

    private static var createdRenderer_FieldID: jfieldID?

    override open var createdRenderer: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "createdRenderer", fieldType: "Z", fieldCache: &SynthTreeUI.createdRenderer_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "createdRenderer", fieldType: "Z", fieldCache: &SynthTreeUI.createdRenderer_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected transient javax.swing.tree.TreeCellEditor javax.swing.plaf.basic.BasicTreeUI.cellEditor

    private static var cellEditor_FieldID: jfieldID?

    override open var cellEditor: TreeCellEditor! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "cellEditor", fieldType: "Ljavax/swing/tree/TreeCellEditor;", fieldCache: &SynthTreeUI.cellEditor_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? TreeCellEditorForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "cellEditor", fieldType: "Ljavax/swing/tree/TreeCellEditor;", fieldCache: &SynthTreeUI.cellEditor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.createdCellEditor

    private static var createdCellEditor_FieldID: jfieldID?

    override open var createdCellEditor: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "createdCellEditor", fieldType: "Z", fieldCache: &SynthTreeUI.createdCellEditor_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "createdCellEditor", fieldType: "Z", fieldCache: &SynthTreeUI.createdCellEditor_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.stopEditingInCompleteEditing

    private static var stopEditingInCompleteEditing_FieldID: jfieldID?

    override open var stopEditingInCompleteEditing: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "stopEditingInCompleteEditing", fieldType: "Z", fieldCache: &SynthTreeUI.stopEditingInCompleteEditing_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "stopEditingInCompleteEditing", fieldType: "Z", fieldCache: &SynthTreeUI.stopEditingInCompleteEditing_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected javax.swing.CellRendererPane javax.swing.plaf.basic.BasicTreeUI.rendererPane

    private static var rendererPane_FieldID: jfieldID?

    override open var rendererPane: CellRendererPane! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "rendererPane", fieldType: "Ljavax/swing/CellRendererPane;", fieldCache: &SynthTreeUI.rendererPane_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? CellRendererPane( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "rendererPane", fieldType: "Ljavax/swing/CellRendererPane;", fieldCache: &SynthTreeUI.rendererPane_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Dimension javax.swing.plaf.basic.BasicTreeUI.preferredSize

    private static var preferredSize_FieldID: jfieldID?

    override open var preferredSize: java_awt.Dimension! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "preferredSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &SynthTreeUI.preferredSize_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Dimension( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "preferredSize", fieldType: "Ljava/awt/Dimension;", fieldCache: &SynthTreeUI.preferredSize_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.validCachedPreferredSize

    private static var validCachedPreferredSize_FieldID: jfieldID?

    override open var validCachedPreferredSize: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "validCachedPreferredSize", fieldType: "Z", fieldCache: &SynthTreeUI.validCachedPreferredSize_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "validCachedPreferredSize", fieldType: "Z", fieldCache: &SynthTreeUI.validCachedPreferredSize_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.AbstractLayoutCache javax.swing.plaf.basic.BasicTreeUI.treeState

    private static var treeState_FieldID: jfieldID?

    override open var treeState: AbstractLayoutCache! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "treeState", fieldType: "Ljavax/swing/tree/AbstractLayoutCache;", fieldCache: &SynthTreeUI.treeState_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? AbstractLayoutCache( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeState", fieldType: "Ljavax/swing/tree/AbstractLayoutCache;", fieldCache: &SynthTreeUI.treeState_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.util.Hashtable javax.swing.plaf.basic.BasicTreeUI.drawingCache

    private static var drawingCache_FieldID: jfieldID?

    override open var drawingCache: java_util.Hashtable! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "drawingCache", fieldType: "Ljava/util/Hashtable;", fieldCache: &SynthTreeUI.drawingCache_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: java_util.Hashtable(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, mapClass: "java/util/Hashtable", locals: &__locals )
            JNIField.SetObjectField( fieldName: "drawingCache", fieldType: "Ljava/util/Hashtable;", fieldCache: &SynthTreeUI.drawingCache_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.largeModel

    private static var largeModel_FieldID: jfieldID?

    override open var largeModel: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "largeModel", fieldType: "Z", fieldCache: &SynthTreeUI.largeModel_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "largeModel", fieldType: "Z", fieldCache: &SynthTreeUI.largeModel_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.AbstractLayoutCache$NodeDimensions javax.swing.plaf.basic.BasicTreeUI.nodeDimensions

    private static var nodeDimensions_FieldID: jfieldID?

    override open var nodeDimensions: AbstractLayoutCache_NodeDimensions! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "nodeDimensions", fieldType: "Ljavax/swing/tree/AbstractLayoutCache$NodeDimensions;", fieldCache: &SynthTreeUI.nodeDimensions_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? AbstractLayoutCache_NodeDimensions( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "nodeDimensions", fieldType: "Ljavax/swing/tree/AbstractLayoutCache$NodeDimensions;", fieldCache: &SynthTreeUI.nodeDimensions_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.TreeModel javax.swing.plaf.basic.BasicTreeUI.treeModel

    private static var treeModel_FieldID: jfieldID?

    override open var treeModel: TreeModel! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "treeModel", fieldType: "Ljavax/swing/tree/TreeModel;", fieldCache: &SynthTreeUI.treeModel_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? TreeModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeModel", fieldType: "Ljavax/swing/tree/TreeModel;", fieldCache: &SynthTreeUI.treeModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.TreeSelectionModel javax.swing.plaf.basic.BasicTreeUI.treeSelectionModel

    private static var treeSelectionModel_FieldID: jfieldID?

    override open var treeSelectionModel: TreeSelectionModel! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "treeSelectionModel", fieldType: "Ljavax/swing/tree/TreeSelectionModel;", fieldCache: &SynthTreeUI.treeSelectionModel_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? TreeSelectionModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "treeSelectionModel", fieldType: "Ljavax/swing/tree/TreeSelectionModel;", fieldCache: &SynthTreeUI.treeSelectionModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.depthOffset

    private static var depthOffset_FieldID: jfieldID?

    override open var depthOffset: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "depthOffset", fieldType: "I", fieldCache: &SynthTreeUI.depthOffset_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "depthOffset", fieldType: "I", fieldCache: &SynthTreeUI.depthOffset_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.plaf.basic.BasicTreeUI.editingComponent

    private static var editingComponent_FieldID: jfieldID?

    override open var editingComponent: java_awt.Component! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "editingComponent", fieldType: "Ljava/awt/Component;", fieldCache: &SynthTreeUI.editingComponent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "editingComponent", fieldType: "Ljava/awt/Component;", fieldCache: &SynthTreeUI.editingComponent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.tree.TreePath javax.swing.plaf.basic.BasicTreeUI.editingPath

    private static var editingPath_FieldID: jfieldID?

    override open var editingPath: TreePath! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "editingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &SynthTreeUI.editingPath_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? TreePath( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue != nil ? newValue! as JNIObject : nil, locals: &__locals )
            JNIField.SetObjectField( fieldName: "editingPath", fieldType: "Ljavax/swing/tree/TreePath;", fieldCache: &SynthTreeUI.editingPath_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicTreeUI.editingRow

    private static var editingRow_FieldID: jfieldID?

    override open var editingRow: Int {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetIntField( fieldName: "editingRow", fieldType: "I", fieldCache: &SynthTreeUI.editingRow_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Int(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetIntField( fieldName: "editingRow", fieldType: "I", fieldCache: &SynthTreeUI.editingRow_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.plaf.basic.BasicTreeUI.editorHasDifferentSize

    private static var editorHasDifferentSize_FieldID: jfieldID?

    override open var editorHasDifferentSize: Bool {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetBooleanField( fieldName: "editorHasDifferentSize", fieldType: "Z", fieldCache: &SynthTreeUI.editorHasDifferentSize_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: Bool(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetBooleanField( fieldName: "editorHasDifferentSize", fieldType: "Z", fieldCache: &SynthTreeUI.editorHasDifferentSize_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private int javax.swing.plaf.basic.BasicTreeUI.leadRow

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.ignoreLAChange

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.leftToRight

    /// private java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.propertyChangeListener

    /// private java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicTreeUI.selectionModelPropertyChangeListener

    /// private java.awt.event.MouseListener javax.swing.plaf.basic.BasicTreeUI.mouseListener

    /// private java.awt.event.FocusListener javax.swing.plaf.basic.BasicTreeUI.focusListener

    /// private java.awt.event.KeyListener javax.swing.plaf.basic.BasicTreeUI.keyListener

    /// private java.awt.event.ComponentListener javax.swing.plaf.basic.BasicTreeUI.componentListener

    /// private javax.swing.event.CellEditorListener javax.swing.plaf.basic.BasicTreeUI.cellEditorListener

    /// private javax.swing.event.TreeSelectionListener javax.swing.plaf.basic.BasicTreeUI.treeSelectionListener

    /// private javax.swing.event.TreeModelListener javax.swing.plaf.basic.BasicTreeUI.treeModelListener

    /// private javax.swing.event.TreeExpansionListener javax.swing.plaf.basic.BasicTreeUI.treeExpansionListener

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.paintLines

    /// private boolean javax.swing.plaf.basic.BasicTreeUI.lineTypeDashed

    /// private long javax.swing.plaf.basic.BasicTreeUI.timeFactor

    /// private javax.swing.plaf.basic.BasicTreeUI$Handler javax.swing.plaf.basic.BasicTreeUI.handler

    /// private java.awt.event.MouseEvent javax.swing.plaf.basic.BasicTreeUI.releaseEvent

    /// private static final javax.swing.TransferHandler javax.swing.plaf.basic.BasicTreeUI.defaultTransferHandler

    /// public static final int javax.swing.plaf.synth.SynthConstants.ENABLED

    private static var ENABLED_FieldID: jfieldID?

    open static var ENABLED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ENABLED", fieldType: "I", fieldCache: &ENABLED_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.MOUSE_OVER

    private static var MOUSE_OVER_FieldID: jfieldID?

    open static var MOUSE_OVER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MOUSE_OVER", fieldType: "I", fieldCache: &MOUSE_OVER_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.PRESSED

    private static var PRESSED_FieldID: jfieldID?

    open static var PRESSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PRESSED", fieldType: "I", fieldCache: &PRESSED_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.DISABLED

    private static var DISABLED_FieldID: jfieldID?

    open static var DISABLED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DISABLED", fieldType: "I", fieldCache: &DISABLED_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.FOCUSED

    private static var FOCUSED_FieldID: jfieldID?

    open static var FOCUSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUSED", fieldType: "I", fieldCache: &FOCUSED_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.SELECTED

    private static var SELECTED_FieldID: jfieldID?

    open static var SELECTED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SELECTED", fieldType: "I", fieldCache: &SELECTED_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.DEFAULT

    private static var DEFAULT_FieldID: jfieldID?

    open static var DEFAULT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT", fieldType: "I", fieldCache: &DEFAULT_FieldID, className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass )
            return JNIType.toSwift( type: Int(), from: __value )
        }
    }

    /// public javax.swing.plaf.synth.SynthTreeUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUI.SynthTreeUIJNIClass, methodSig: "()V", methodCache: &SynthTreeUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void javax.swing.plaf.synth.SynthTreeUI.update(java.awt.Graphics,javax.swing.JComponent)

    /// static boolean javax.swing.plaf.synth.SynthTreeUI.access$100(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.JTree javax.swing.plaf.synth.SynthTreeUI.access$200(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.access$300(javax.swing.plaf.synth.SynthTreeUI,javax.swing.JComponent,javax.swing.plaf.synth.Region)

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region)

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent,int)

    /// public javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent)

    private static var getContext_MethodID_2: jmethodID?

    open func getContext( c: JComponent? ) -> SynthContext! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContext", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/synth/SynthContext;", methodCache: &SynthTreeUI.getContext_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SynthContext( javaObject: __return ) : nil
    }

    open func getContext( _ _c: JComponent? ) -> SynthContext! {
        return getContext( c: _c )
    }

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthTreeUI.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,int)

    /// static javax.swing.JTree javax.swing.plaf.synth.SynthTreeUI.access$400(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$500(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$600(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.JTree javax.swing.plaf.synth.SynthTreeUI.access$700(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$800(javax.swing.plaf.synth.SynthTreeUI)

    /// public static javax.swing.plaf.ComponentUI javax.swing.plaf.synth.SynthTreeUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_3: jmethodID?

    override open class func createUI( x: JComponent? ) -> ComponentUI! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: x != nil ? x! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/plaf/synth/SynthTreeUI", classCache: &SynthTreeUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _x: JComponent? ) -> ComponentUI! {
        return createUI( x: _x )
    }

    /// private void javax.swing.plaf.synth.SynthTreeUI.updateStyle(javax.swing.JTree)

    /// public javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.getExpandedIcon()

    /// protected javax.swing.tree.TreeCellEditor javax.swing.plaf.synth.SynthTreeUI.createDefaultCellEditor()

    private static var createDefaultCellEditor_MethodID_4: jmethodID?

    override open func createDefaultCellEditor() -> TreeCellEditor! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultCellEditor", methodSig: "()Ljavax/swing/tree/TreeCellEditor;", methodCache: &SynthTreeUI.createDefaultCellEditor_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TreeCellEditorForward( javaObject: __return ) : nil
    }


    /// protected javax.swing.tree.TreeCellRenderer javax.swing.plaf.synth.SynthTreeUI.createDefaultCellRenderer()

    private static var createDefaultCellRenderer_MethodID_5: jmethodID?

    override open func createDefaultCellRenderer() -> TreeCellRenderer! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultCellRenderer", methodSig: "()Ljavax/swing/tree/TreeCellRenderer;", methodCache: &SynthTreeUI.createDefaultCellRenderer_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TreeCellRendererForward( javaObject: __return ) : nil
    }


    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintHorizontalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)

    private static var paintHorizontalPartOfLeg_MethodID_6: jmethodID?

    override open func paintHorizontalPartOfLeg( g: java_awt.Graphics?, clipBounds: java_awt.Rectangle?, insets: java_awt.Insets?, bounds: java_awt.Rectangle?, path: TreePath?, row: Int, isExpanded: Bool, hasBeenExpanded: Bool, isLeaf: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: clipBounds != nil ? clipBounds! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: insets != nil ? insets! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: bounds != nil ? bounds! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: path != nil ? path! as JNIObject : nil, locals: &__locals )
        __args[5] = JNIType.toJava( value: row, locals: &__locals )
        __args[6] = JNIType.toJava( value: isExpanded, locals: &__locals )
        __args[7] = JNIType.toJava( value: hasBeenExpanded, locals: &__locals )
        __args[8] = JNIType.toJava( value: isLeaf, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintHorizontalPartOfLeg", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljava/awt/Rectangle;Ljavax/swing/tree/TreePath;IZZZ)V", methodCache: &SynthTreeUI.paintHorizontalPartOfLeg_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func paintHorizontalPartOfLeg( _ _g: java_awt.Graphics?, _ _clipBounds: java_awt.Rectangle?, _ _insets: java_awt.Insets?, _ _bounds: java_awt.Rectangle?, _ _path: TreePath?, _ _row: Int, _ _isExpanded: Bool, _ _hasBeenExpanded: Bool, _ _isLeaf: Bool ) {
        paintHorizontalPartOfLeg( g: _g, clipBounds: _clipBounds, insets: _insets, bounds: _bounds, path: _path, row: _row, isExpanded: _isExpanded, hasBeenExpanded: _hasBeenExpanded, isLeaf: _isLeaf )
    }

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintVerticalPartOfLeg(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,javax.swing.tree.TreePath)

    private static var paintVerticalPartOfLeg_MethodID_7: jmethodID?

    override open func paintVerticalPartOfLeg( g: java_awt.Graphics?, clipBounds: java_awt.Rectangle?, insets: java_awt.Insets?, path: TreePath? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: clipBounds != nil ? clipBounds! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: insets != nil ? insets! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: path != nil ? path! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintVerticalPartOfLeg", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljavax/swing/tree/TreePath;)V", methodCache: &SynthTreeUI.paintVerticalPartOfLeg_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func paintVerticalPartOfLeg( _ _g: java_awt.Graphics?, _ _clipBounds: java_awt.Rectangle?, _ _insets: java_awt.Insets?, _ _path: TreePath? ) {
        paintVerticalPartOfLeg( g: _g, clipBounds: _clipBounds, insets: _insets, path: _path )
    }

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintExpandControl(java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)

    private static var paintExpandControl_MethodID_8: jmethodID?

    override open func paintExpandControl( g: java_awt.Graphics?, clipBounds: java_awt.Rectangle?, insets: java_awt.Insets?, bounds: java_awt.Rectangle?, path: TreePath?, row: Int, isExpanded: Bool, hasBeenExpanded: Bool, isLeaf: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 9 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: clipBounds != nil ? clipBounds! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: insets != nil ? insets! as JNIObject : nil, locals: &__locals )
        __args[3] = JNIType.toJava( value: bounds != nil ? bounds! as JNIObject : nil, locals: &__locals )
        __args[4] = JNIType.toJava( value: path != nil ? path! as JNIObject : nil, locals: &__locals )
        __args[5] = JNIType.toJava( value: row, locals: &__locals )
        __args[6] = JNIType.toJava( value: isExpanded, locals: &__locals )
        __args[7] = JNIType.toJava( value: hasBeenExpanded, locals: &__locals )
        __args[8] = JNIType.toJava( value: isLeaf, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintExpandControl", methodSig: "(Ljava/awt/Graphics;Ljava/awt/Rectangle;Ljava/awt/Insets;Ljava/awt/Rectangle;Ljavax/swing/tree/TreePath;IZZZ)V", methodCache: &SynthTreeUI.paintExpandControl_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func paintExpandControl( _ _g: java_awt.Graphics?, _ _clipBounds: java_awt.Rectangle?, _ _insets: java_awt.Insets?, _ _bounds: java_awt.Rectangle?, _ _path: TreePath?, _ _row: Int, _ _isExpanded: Bool, _ _hasBeenExpanded: Bool, _ _isLeaf: Bool ) {
        paintExpandControl( g: _g, clipBounds: _clipBounds, insets: _insets, bounds: _bounds, path: _path, row: _row, isExpanded: _isExpanded, hasBeenExpanded: _hasBeenExpanded, isLeaf: _isLeaf )
    }

    /// private void javax.swing.plaf.synth.SynthTreeUI.paintRow(javax.swing.tree.TreeCellRenderer,javax.swing.tree.DefaultTreeCellRenderer,javax.swing.plaf.synth.SynthContext,javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle,java.awt.Insets,java.awt.Rectangle,java.awt.Rectangle,javax.swing.tree.TreePath,int,boolean,boolean,boolean)

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintVerticalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)

    private static var paintVerticalLine_MethodID_9: jmethodID?

    override open func paintVerticalLine( g: java_awt.Graphics?, c: JComponent?, x: Int, top: Int, bottom: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: x, locals: &__locals )
        __args[3] = JNIType.toJava( value: top, locals: &__locals )
        __args[4] = JNIType.toJava( value: bottom, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintVerticalLine", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;III)V", methodCache: &SynthTreeUI.paintVerticalLine_MethodID_9, args: &__args, locals: &__locals )
    }

    override open func paintVerticalLine( _ _g: java_awt.Graphics?, _ _c: JComponent?, _ _x: Int, _ _top: Int, _ _bottom: Int ) {
        paintVerticalLine( g: _g, c: _c, x: _x, top: _top, bottom: _bottom )
    }

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintHorizontalLine(java.awt.Graphics,javax.swing.JComponent,int,int,int)

    private static var paintHorizontalLine_MethodID_10: jmethodID?

    override open func paintHorizontalLine( g: java_awt.Graphics?, c: JComponent?, y: Int, left: Int, right: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: y, locals: &__locals )
        __args[3] = JNIType.toJava( value: left, locals: &__locals )
        __args[4] = JNIType.toJava( value: right, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintHorizontalLine", methodSig: "(Ljava/awt/Graphics;Ljavax/swing/JComponent;III)V", methodCache: &SynthTreeUI.paintHorizontalLine_MethodID_10, args: &__args, locals: &__locals )
    }

    override open func paintHorizontalLine( _ _g: java_awt.Graphics?, _ _c: JComponent?, _ _y: Int, _ _left: Int, _ _right: Int ) {
        paintHorizontalLine( g: _g, c: _c, y: _y, left: _left, right: _right )
    }

    /// private int javax.swing.plaf.synth.SynthTreeUI.findCenteredX(int,int)

    /// protected void javax.swing.plaf.synth.SynthTreeUI.drawCentered(java.awt.Component,java.awt.Graphics,javax.swing.Icon,int,int)

    private static var drawCentered_MethodID_11: jmethodID?

    override open func drawCentered( c: java_awt.Component?, graphics: java_awt.Graphics?, icon: Icon?, x: Int, y: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: graphics != nil ? graphics! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: icon, locals: &__locals )
        __args[3] = JNIType.toJava( value: x, locals: &__locals )
        __args[4] = JNIType.toJava( value: y, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "drawCentered", methodSig: "(Ljava/awt/Component;Ljava/awt/Graphics;Ljavax/swing/Icon;II)V", methodCache: &SynthTreeUI.drawCentered_MethodID_11, args: &__args, locals: &__locals )
    }

    override open func drawCentered( _ _c: java_awt.Component?, _ _graphics: java_awt.Graphics?, _ _icon: Icon?, _ _x: Int, _ _y: Int ) {
        drawCentered( c: _c, graphics: _graphics, icon: _icon, x: _x, y: _y )
    }

    /// protected int javax.swing.plaf.synth.SynthTreeUI.getRowX(int,int)

    private static var getRowX_MethodID_12: jmethodID?

    override open func getRowX( row: Int, depth: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: row, locals: &__locals )
        __args[1] = JNIType.toJava( value: depth, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getRowX", methodSig: "(II)I", methodCache: &SynthTreeUI.getRowX_MethodID_12, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    override open func getRowX( _ _row: Int, _ _depth: Int ) -> Int {
        return getRowX( row: _row, depth: _depth )
    }

    /// public void javax.swing.plaf.synth.SynthTreeUI.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_13: jmethodID?

    open func propertyChange( evt: /* java.beans.PropertyChangeEvent */ UnclassedObject? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: evt != nil ? evt! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &SynthTreeUI.propertyChange_MethodID_13, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* java.beans.PropertyChangeEvent */ UnclassedObject? ) {
        propertyChange( evt: _evt )
    }

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$1100(javax.swing.plaf.synth.SynthTreeUI)

    /// public void javax.swing.plaf.synth.SynthTreeUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)

    private static var paintBorder_MethodID_14: jmethodID?

    open func paintBorder( context: SynthContext?, g: java_awt.Graphics?, x: Int, y: Int, w: Int, h: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: context != nil ? context! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: x, locals: &__locals )
        __args[3] = JNIType.toJava( value: y, locals: &__locals )
        __args[4] = JNIType.toJava( value: w, locals: &__locals )
        __args[5] = JNIType.toJava( value: h, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;IIII)V", methodCache: &SynthTreeUI.paintBorder_MethodID_14, args: &__args, locals: &__locals )
    }

    open func paintBorder( _ _context: SynthContext?, _ _g: java_awt.Graphics?, _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        paintBorder( context: _context, g: _g, x: _x, y: _y, w: _w, h: _h )
    }

    /// private void javax.swing.plaf.synth.SynthTreeUI.repaintDropLocation(javax.swing.JTree$DropLocation)

    /// private int javax.swing.plaf.synth.SynthTreeUI.getComponentState(javax.swing.JComponent,javax.swing.plaf.synth.Region)

    /// private void javax.swing.plaf.synth.SynthTreeUI.configureRenderer(javax.swing.plaf.synth.SynthContext)

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$900(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.JTree javax.swing.plaf.synth.SynthTreeUI.access$1000(javax.swing.plaf.synth.SynthTreeUI)

    /// static javax.swing.Icon javax.swing.plaf.synth.SynthTreeUI.access$1200(javax.swing.plaf.synth.SynthTreeUI)

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)

    private static var paint_MethodID_15: jmethodID?

    open func paint( context: SynthContext?, g: java_awt.Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: context != nil ? context! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;)V", methodCache: &SynthTreeUI.paint_MethodID_15, args: &__args, locals: &__locals )
    }

    open func paint( _ _context: SynthContext?, _ _g: java_awt.Graphics? ) {
        paint( context: _context, g: _g )
    }

    /// public void javax.swing.plaf.synth.SynthTreeUI.paint(java.awt.Graphics,javax.swing.JComponent)

    /// protected void javax.swing.plaf.synth.SynthTreeUI.paintDropLine(java.awt.Graphics)

    private static var paintDropLine_MethodID_16: jmethodID?

    override open func paintDropLine( g: java_awt.Graphics? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: g != nil ? g! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintDropLine", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &SynthTreeUI.paintDropLine_MethodID_16, args: &__args, locals: &__locals )
    }

    override open func paintDropLine( _ _g: java_awt.Graphics? ) {
        paintDropLine( g: _g )
    }

    /// protected void javax.swing.plaf.synth.SynthTreeUI.installDefaults()

    private static var installDefaults_MethodID_17: jmethodID?

    override open func installDefaults() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "()V", methodCache: &SynthTreeUI.installDefaults_MethodID_17, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.synth.SynthTreeUI.installListeners()

    private static var installListeners_MethodID_18: jmethodID?

    override open func installListeners() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "()V", methodCache: &SynthTreeUI.installListeners_MethodID_18, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.synth.SynthTreeUI.uninstallDefaults()

    private static var uninstallDefaults_MethodID_19: jmethodID?

    override open func uninstallDefaults() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "()V", methodCache: &SynthTreeUI.uninstallDefaults_MethodID_19, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.synth.SynthTreeUI.uninstallListeners()

    private static var uninstallListeners_MethodID_20: jmethodID?

    override open func uninstallListeners() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "()V", methodCache: &SynthTreeUI.uninstallListeners_MethodID_20, args: &__args, locals: &__locals )
    }


}

