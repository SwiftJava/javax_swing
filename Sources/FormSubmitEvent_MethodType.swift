
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.FormSubmitEvent$MethodType ///

public enum FormSubmitEvent_MethodType: Int, JNIObjectProtocol, JNIObjectInit {

    case GET, POST

    static let enumConstants = try! JavaClass.forName("javax.swing.text.html.FormSubmitEvent$MethodType")
        .getEnumConstants()!.map { FormSubmitEvent_MethodTypeForward( javaObject: $0.javaObject ) }

    public func underlier() -> FormSubmitEvent_MethodTypeForward {
        return FormSubmitEvent_MethodType.enumConstants[self.rawValue]
    }

    public func localJavaObject(_ locals: UnsafeMutablePointer<[jobject]>) -> jobject? {
        return underlier().localJavaObject( locals )
    }

    public init( javaObject: jobject? ) {
        self = FormSubmitEvent_MethodType( rawValue: JavaEnum( javaObject: javaObject ).ordinal() )!
    }

    /// public static javax.swing.text.html.FormSubmitEvent$MethodType javax.swing.text.html.FormSubmitEvent$MethodType.valueOf(java.lang.String)

    private static var valueOf_MethodID_1: jmethodID?

    public static func valueOf( name: String? ) -> FormSubmitEvent_MethodType! {
        return FormSubmitEvent_MethodTypeForward.valueOf( name: name )
    }
    public static func valueOf( _ _name: String? ) -> FormSubmitEvent_MethodType! {
        return valueOf( name: _name )
    }

    /// public static javax.swing.text.html.FormSubmitEvent$MethodType[] javax.swing.text.html.FormSubmitEvent$MethodType.values()

    private static var values_MethodID_2: jmethodID?

    public static func values() -> [FormSubmitEvent_MethodType]! {
        return FormSubmitEvent_MethodTypeForward.values( )
    }

}


open class FormSubmitEvent_MethodTypeForward: JNIObjectForward {

    private static var FormSubmitEvent_MethodTypeJNIClass: jclass?

    /// private static final javax.swing.text.html.FormSubmitEvent$MethodType[] javax.swing.text.html.FormSubmitEvent$MethodType.$VALUES

    /// public static final javax.swing.text.html.FormSubmitEvent$MethodType javax.swing.text.html.FormSubmitEvent$MethodType.GET

    private static var GET_FieldID: jfieldID?

    open static var GET: FormSubmitEvent_MethodType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "GET", fieldType: "Ljavax/swing/text/html/FormSubmitEvent$MethodType;", fieldCache: &GET_FieldID, className: "javax/swing/text/html/FormSubmitEvent$MethodType", classCache: &FormSubmitEvent_MethodTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? FormSubmitEvent_MethodType( javaObject: __value ) : nil
        }
    }

    /// public static final javax.swing.text.html.FormSubmitEvent$MethodType javax.swing.text.html.FormSubmitEvent$MethodType.POST

    private static var POST_FieldID: jfieldID?

    open static var POST: FormSubmitEvent_MethodType! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "POST", fieldType: "Ljavax/swing/text/html/FormSubmitEvent$MethodType;", fieldCache: &POST_FieldID, className: "javax/swing/text/html/FormSubmitEvent$MethodType", classCache: &FormSubmitEvent_MethodTypeJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? FormSubmitEvent_MethodType( javaObject: __value ) : nil
        }
    }

    /// public static javax.swing.text.html.FormSubmitEvent$MethodType javax.swing.text.html.FormSubmitEvent$MethodType.valueOf(java.lang.String)

    private static var valueOf_MethodID_3: jmethodID?

    open class func valueOf( name: String? ) -> FormSubmitEvent_MethodType! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/html/FormSubmitEvent$MethodType", classCache: &FormSubmitEvent_MethodTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/String;)Ljavax/swing/text/html/FormSubmitEvent$MethodType;", methodCache: &valueOf_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? FormSubmitEvent_MethodType( javaObject: __return ) : nil
    }

    open class func valueOf( _ _name: String? ) -> FormSubmitEvent_MethodType! {
        return valueOf( name: _name )
    }

    /// public static java.lang.Enum java.lang.Enum.valueOf(java.lang.Class,java.lang.String)

    private static var valueOf_MethodID_4: jmethodID?

    open class func valueOf( enumType: java_swift.JavaClass?, name: String? ) -> java_swift.JavaEnum! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: enumType, locals: &__locals )
        __args[1] = JNIType.toJava( value: name, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/html/FormSubmitEvent$MethodType", classCache: &FormSubmitEvent_MethodTypeJNIClass, methodName: "valueOf", methodSig: "(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;", methodCache: &valueOf_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaEnum( javaObject: __return ) : nil
    }

    open class func valueOf( _ _enumType: java_swift.JavaClass?, _ _name: String? ) -> java_swift.JavaEnum! {
        return valueOf( enumType: _enumType, name: _name )
    }

    /// public static javax.swing.text.html.FormSubmitEvent$MethodType[] javax.swing.text.html.FormSubmitEvent$MethodType.values()

    private static var values_MethodID_5: jmethodID?

    open class func values() -> [FormSubmitEvent_MethodType]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/html/FormSubmitEvent$MethodType", classCache: &FormSubmitEvent_MethodTypeJNIClass, methodName: "values", methodSig: "()[Ljavax/swing/text/html/FormSubmitEvent$MethodType;", methodCache: &values_MethodID_5, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [FormSubmitEvent_MethodType].self, from: __return )
    }


    /// public final int java.lang.Enum.compareTo(java.lang.Enum)

    // Skipping method: false true false false false 

    /// public int java.lang.Enum.compareTo(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final boolean java.lang.Enum.equals(java.lang.Object)

    // Skipping method: false true false false false 

    /// public final native java.lang.Class java.lang.Object.getClass()

    // Skipping method: false true false false false 

    /// public final java.lang.Class java.lang.Enum.getDeclaringClass()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.hashCode()

    // Skipping method: false true false false false 

    /// public final java.lang.String java.lang.Enum.name()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notify()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.notifyAll()

    // Skipping method: false true false false false 

    /// public final int java.lang.Enum.ordinal()

    // Skipping method: false true false false false 

    /// public java.lang.String java.lang.Enum.toString()

    // Skipping method: false true false false false 

    /// public final native void java.lang.Object.wait(long) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait(long,int) throws java.lang.InterruptedException

    // Skipping method: false true false false false 

    /// public final void java.lang.Object.wait() throws java.lang.InterruptedException

    // Skipping method: false true false false false 

}

