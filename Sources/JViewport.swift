
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JViewport ///

open class JViewport: JComponent {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JViewportJNIClass: jclass?

    /// public static final int javax.swing.JViewport.BACKINGSTORE_SCROLL_MODE

    private static var BACKINGSTORE_SCROLL_MODE_FieldID: jfieldID?

    public static var BACKINGSTORE_SCROLL_MODE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BACKINGSTORE_SCROLL_MODE", fieldType: "I", fieldCache: &BACKINGSTORE_SCROLL_MODE_FieldID, className: "javax/swing/JViewport", classCache: &JViewportJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JViewport.BLIT_SCROLL_MODE

    private static var BLIT_SCROLL_MODE_FieldID: jfieldID?

    public static var BLIT_SCROLL_MODE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "BLIT_SCROLL_MODE", fieldType: "I", fieldCache: &BLIT_SCROLL_MODE_FieldID, className: "javax/swing/JViewport", classCache: &JViewportJNIClass )
            return Int(__value)
        }
    }

    /// static final java.lang.Object javax.swing.JViewport.EnableWindowBlit

    // Skipping field: true false false false false false 

    /// public static final int javax.swing.JViewport.SIMPLE_SCROLL_MODE

    private static var SIMPLE_SCROLL_MODE_FieldID: jfieldID?

    public static var SIMPLE_SCROLL_MODE: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SIMPLE_SCROLL_MODE", fieldType: "I", fieldCache: &SIMPLE_SCROLL_MODE_FieldID, className: "javax/swing/JViewport", classCache: &JViewportJNIClass )
            return Int(__value)
        }
    }

    /// private static final java.lang.String javax.swing.JViewport.uiClassID

    /// protected boolean javax.swing.JViewport.backingStore

    private static var backingStore_FieldID: jfieldID?

    open var backingStore: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "backingStore", fieldType: "Z", fieldCache: &JViewport.backingStore_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "backingStore", fieldType: "Z", fieldCache: &JViewport.backingStore_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected transient java.awt.Image javax.swing.JViewport.backingStoreImage

    private static var backingStoreImage_FieldID: jfieldID?

    open var backingStoreImage: java_awt.Image! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "backingStoreImage", fieldType: "Ljava/awt/Image;", fieldCache: &JViewport.backingStoreImage_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Image( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "backingStoreImage", fieldType: "Ljava/awt/Image;", fieldCache: &JViewport.backingStoreImage_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient javax.swing.event.ChangeEvent javax.swing.JViewport.changeEvent

    /// private boolean javax.swing.JViewport.hasHadValidView

    /// private transient boolean javax.swing.JViewport.inBlitPaint

    /// protected boolean javax.swing.JViewport.isViewSizeSet

    private static var isViewSizeSet_FieldID: jfieldID?

    open var isViewSizeSet: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "isViewSizeSet", fieldType: "Z", fieldCache: &JViewport.isViewSizeSet_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "isViewSizeSet", fieldType: "Z", fieldCache: &JViewport.isViewSizeSet_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected java.awt.Point javax.swing.JViewport.lastPaintPosition

    private static var lastPaintPosition_FieldID: jfieldID?

    open var lastPaintPosition: java_awt.Point! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "lastPaintPosition", fieldType: "Ljava/awt/Point;", fieldCache: &JViewport.lastPaintPosition_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Point( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "lastPaintPosition", fieldType: "Ljava/awt/Point;", fieldCache: &JViewport.lastPaintPosition_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient boolean javax.swing.JViewport.repaintAll

    /// private transient javax.swing.Timer javax.swing.JViewport.repaintTimer

    /// private int javax.swing.JViewport.scrollMode

    /// protected boolean javax.swing.JViewport.scrollUnderway

    private static var scrollUnderway_FieldID: jfieldID?

    open var scrollUnderway: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "scrollUnderway", fieldType: "Z", fieldCache: &JViewport.scrollUnderway_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "scrollUnderway", fieldType: "Z", fieldCache: &JViewport.scrollUnderway_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JViewport.viewChanged

    /// private java.awt.event.ComponentListener javax.swing.JViewport.viewListener

    /// private transient boolean javax.swing.JViewport.waitingForRepaint

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JViewport.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JViewport.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JViewport.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JViewport.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JViewport.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JViewport.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.JViewport()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/JViewport", classCache: &JViewport.JViewportJNIClass, methodSig: "()V", methodCache: &JViewport.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static boolean javax.swing.JViewport.access$000(javax.swing.JViewport)

    // Skipping method: true false false false false 

    /// public void javax.swing.JViewport.addChangeListener(javax.swing.event.ChangeListener)

    private static var addChangeListener_MethodID_2: jmethodID?

    open func addChangeListener( l: ChangeListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addChangeListener", methodSig: "(Ljavax/swing/event/ChangeListener;)V", methodCache: &JViewport.addChangeListener_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addChangeListener( _ _l: ChangeListener? ) {
        addChangeListener( l: _l )
    }

    /// protected void javax.swing.JViewport.addImpl(java.awt.Component,java.lang.Object,int)

    private static var addImpl_MethodID_3: jmethodID?

    open func addImpl( child: java_awt.Component?, constraints: java_swift.JavaObject?, index: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: child, locals: &__locals )
        __args[1] = JNIType.toJava( value: constraints, locals: &__locals )
        __args[2] = jvalue( i: jint(index) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addImpl", methodSig: "(Ljava/awt/Component;Ljava/lang/Object;I)V", methodCache: &JViewport.addImpl_MethodID_3, args: &__args, locals: &__locals )
    }

    override open func addImpl( _ _child: java_awt.Component?, _ _constraints: java_swift.JavaObject?, _ _index: Int ) {
        addImpl( child: _child, constraints: _constraints, index: _index )
    }

    /// private void javax.swing.JViewport.blitDoubleBuffered(javax.swing.JComponent,java.awt.Graphics,int,int,int,int,int,int,int,int,int,int)

    /// private boolean javax.swing.JViewport.canUseWindowBlitter()

    /// protected boolean javax.swing.JViewport.computeBlit(int,int,java.awt.Point,java.awt.Point,java.awt.Dimension,java.awt.Rectangle)

    private static var computeBlit_MethodID_4: jmethodID?

    open func computeBlit( dx: Int, dy: Int, blitFrom: java_awt.Point?, blitTo: java_awt.Point?, blitSize: java_awt.Dimension?, blitPaint: java_awt.Rectangle? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = jvalue( i: jint(dx) )
        __args[1] = jvalue( i: jint(dy) )
        __args[2] = JNIType.toJava( value: blitFrom, locals: &__locals )
        __args[3] = JNIType.toJava( value: blitTo, locals: &__locals )
        __args[4] = JNIType.toJava( value: blitSize, locals: &__locals )
        __args[5] = JNIType.toJava( value: blitPaint, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "computeBlit", methodSig: "(IILjava/awt/Point;Ljava/awt/Point;Ljava/awt/Dimension;Ljava/awt/Rectangle;)Z", methodCache: &JViewport.computeBlit_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func computeBlit( _ _dx: Int, _ _dy: Int, _ _blitFrom: java_awt.Point?, _ _blitTo: java_awt.Point?, _ _blitSize: java_awt.Dimension?, _ _blitPaint: java_awt.Rectangle? ) -> Bool {
        return computeBlit( dx: _dx, dy: _dy, blitFrom: _blitFrom, blitTo: _blitTo, blitSize: _blitSize, blitPaint: _blitPaint )
    }

    /// protected java.awt.LayoutManager javax.swing.JViewport.createLayoutManager()

    private static var createLayoutManager_MethodID_5: jmethodID?

    open func createLayoutManager() -> java_awt.LayoutManager! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createLayoutManager", methodSig: "()Ljava/awt/LayoutManager;", methodCache: &JViewport.createLayoutManager_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.LayoutManagerForward( javaObject: __return ) : nil
    }


    /// private javax.swing.Timer javax.swing.JViewport.createRepaintTimer()

    /// protected javax.swing.JViewport$ViewListener javax.swing.JViewport.createViewListener()

    private static var createViewListener_MethodID_6: jmethodID?

    open func createViewListener() -> /* class javax.swing.JViewport$ViewListener */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createViewListener", methodSig: "()Ljavax/swing/JViewport$ViewListener;", methodCache: &JViewport.createViewListener_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.swing.JViewport$ViewListener */ UnavailableObject( javaObject: __return ) : nil
    }


    /// protected void javax.swing.JViewport.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)

    private static var firePropertyChange_MethodID_7: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: java_swift.JavaObject?, newValue: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = JNIType.toJava( value: oldValue, locals: &__locals )
        __args[2] = JNIType.toJava( value: newValue, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", methodCache: &JViewport.firePropertyChange_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: java_swift.JavaObject?, _ _newValue: java_swift.JavaObject? ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// protected void javax.swing.JViewport.fireStateChanged()

    private static var fireStateChanged_MethodID_8: jmethodID?

    open func fireStateChanged() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireStateChanged", methodSig: "()V", methodCache: &JViewport.fireStateChanged_MethodID_8, args: &__args, locals: &__locals )
    }


    /// private void javax.swing.JViewport.flushViewDirtyRegion(java.awt.Graphics,java.awt.Rectangle)

    /// public javax.accessibility.AccessibleContext javax.swing.JViewport.getAccessibleContext()

    // Skipping method: false true false false false 

    /// private java.awt.Graphics javax.swing.JViewport.getBackingStoreGraphics(java.awt.Graphics)

    /// public javax.swing.event.ChangeListener[] javax.swing.JViewport.getChangeListeners()

    private static var getChangeListeners_MethodID_9: jmethodID?

    open func getChangeListeners() -> [ChangeListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getChangeListeners", methodSig: "()[Ljavax/swing/event/ChangeListener;", methodCache: &JViewport.getChangeListeners_MethodID_9, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [ChangeListenerForward].self, from: __return )
    }


    /// public java.awt.Dimension javax.swing.JViewport.getExtentSize()

    private static var getExtentSize_MethodID_10: jmethodID?

    open func getExtentSize() -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getExtentSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &JViewport.getExtentSize_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }


    /// public final java.awt.Insets javax.swing.JViewport.getInsets(java.awt.Insets)

    // Skipping method: false true false false false 

    /// public final java.awt.Insets javax.swing.JViewport.getInsets()

    // Skipping method: false true false false false 

    /// public int javax.swing.JViewport.getScrollMode()

    private static var getScrollMode_MethodID_11: jmethodID?

    open func getScrollMode() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getScrollMode", methodSig: "()I", methodCache: &JViewport.getScrollMode_MethodID_11, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.swing.plaf.ViewportUI javax.swing.JViewport.getUI()

    private static var getUI_MethodID_12: jmethodID?

    open func getUI() -> ViewportUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUI", methodSig: "()Ljavax/swing/plaf/ViewportUI;", methodCache: &JViewport.getUI_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ViewportUI( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JViewport.getUIClassID()

    // Skipping method: false true false false false 

    /// public java.awt.Component javax.swing.JViewport.getView()

    private static var getView_MethodID_13: jmethodID?

    open func getView() -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getView", methodSig: "()Ljava/awt/Component;", methodCache: &JViewport.getView_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }


    /// private java.awt.Point javax.swing.JViewport.getViewLocation()

    /// public java.awt.Point javax.swing.JViewport.getViewPosition()

    private static var getViewPosition_MethodID_14: jmethodID?

    open func getViewPosition() -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getViewPosition", methodSig: "()Ljava/awt/Point;", methodCache: &JViewport.getViewPosition_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle javax.swing.JViewport.getViewRect()

    private static var getViewRect_MethodID_15: jmethodID?

    open func getViewRect() -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getViewRect", methodSig: "()Ljava/awt/Rectangle;", methodCache: &JViewport.getViewRect_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.Dimension javax.swing.JViewport.getViewSize()

    private static var getViewSize_MethodID_16: jmethodID?

    open func getViewSize() -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getViewSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &JViewport.getViewSize_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }


    /// public boolean javax.swing.JViewport.isBackingStoreEnabled()

    private static var isBackingStoreEnabled_MethodID_17: jmethodID?

    open func isBackingStoreEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBackingStoreEnabled", methodSig: "()Z", methodCache: &JViewport.isBackingStoreEnabled_MethodID_17, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private boolean javax.swing.JViewport.isBlitting()

    /// public boolean javax.swing.JViewport.isOptimizedDrawingEnabled()

    // Skipping method: false true false false false 

    /// protected boolean javax.swing.JViewport.isPaintingOrigin()

    private static var isPaintingOrigin_MethodID_18: jmethodID?

    override open func isPaintingOrigin() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPaintingOrigin", methodSig: "()Z", methodCache: &JViewport.isPaintingOrigin_MethodID_18, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private boolean javax.swing.JViewport.needsRepaintAfterBlit()

    /// public void javax.swing.JViewport.paint(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// private void javax.swing.JViewport.paintViaBackingStore(java.awt.Graphics)

    /// private void javax.swing.JViewport.paintViaBackingStore(java.awt.Graphics,java.awt.Rectangle)

    /// private void javax.swing.JViewport.paintView(java.awt.Graphics)

    /// protected java.lang.String javax.swing.JViewport.paramString()

    private static var paramString_MethodID_19: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JViewport.paramString_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// private int javax.swing.JViewport.positionAdjustment(int,int,int)

    /// public void javax.swing.JViewport.remove(java.awt.Component)

    private static var remove_MethodID_20: jmethodID?

    open func remove( child: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: child, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(Ljava/awt/Component;)V", methodCache: &JViewport.remove_MethodID_20, args: &__args, locals: &__locals )
    }

    override open func remove( _ _child: java_awt.Component? ) {
        remove( child: _child )
    }

    /// public void javax.swing.JViewport.removeChangeListener(javax.swing.event.ChangeListener)

    private static var removeChangeListener_MethodID_21: jmethodID?

    open func removeChangeListener( l: ChangeListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeChangeListener", methodSig: "(Ljavax/swing/event/ChangeListener;)V", methodCache: &JViewport.removeChangeListener_MethodID_21, args: &__args, locals: &__locals )
    }

    open func removeChangeListener( _ _l: ChangeListener? ) {
        removeChangeListener( l: _l )
    }

    /// public void javax.swing.JViewport.repaint(long,int,int,int,int)

    private static var repaint_MethodID_22: jmethodID?

    open func repaint( tm: Int64, x: Int, y: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = jvalue( j: tm )
        __args[1] = jvalue( i: jint(x) )
        __args[2] = jvalue( i: jint(y) )
        __args[3] = jvalue( i: jint(w) )
        __args[4] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaint", methodSig: "(JIIII)V", methodCache: &JViewport.repaint_MethodID_22, args: &__args, locals: &__locals )
    }

    override open func repaint( _ _tm: Int64, _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        repaint( tm: _tm, x: _x, y: _y, w: _w, h: _h )
    }

    /// public void javax.swing.JViewport.reshape(int,int,int,int)

    // Skipping method: false true false false false 

    /// public void javax.swing.JViewport.scrollRectToVisible(java.awt.Rectangle)

    private static var scrollRectToVisible_MethodID_23: jmethodID?

    open func scrollRectToVisible( contentRect: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: contentRect, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scrollRectToVisible", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JViewport.scrollRectToVisible_MethodID_23, args: &__args, locals: &__locals )
    }

    override open func scrollRectToVisible( _ _contentRect: java_awt.Rectangle? ) {
        scrollRectToVisible( contentRect: _contentRect )
    }

    /// public void javax.swing.JViewport.setBackingStoreEnabled(boolean)

    private static var setBackingStoreEnabled_MethodID_24: jmethodID?

    open func setBackingStoreEnabled( enabled: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(enabled ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackingStoreEnabled", methodSig: "(Z)V", methodCache: &JViewport.setBackingStoreEnabled_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setBackingStoreEnabled( _ _enabled: Bool ) {
        setBackingStoreEnabled( enabled: _enabled )
    }

    /// public final void javax.swing.JViewport.setBorder(javax.swing.border.Border)

    // Skipping method: false true false false false 

    /// public void javax.swing.JViewport.setExtentSize(java.awt.Dimension)

    private static var setExtentSize_MethodID_25: jmethodID?

    open func setExtentSize( newExtent: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newExtent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setExtentSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JViewport.setExtentSize_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setExtentSize( _ _newExtent: java_awt.Dimension? ) {
        setExtentSize( newExtent: _newExtent )
    }

    /// public void javax.swing.JViewport.setScrollMode(int)

    private static var setScrollMode_MethodID_26: jmethodID?

    open func setScrollMode( mode: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(mode) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setScrollMode", methodSig: "(I)V", methodCache: &JViewport.setScrollMode_MethodID_26, args: &__args, locals: &__locals )
    }

    open func setScrollMode( _ _mode: Int ) {
        setScrollMode( mode: _mode )
    }

    /// public void javax.swing.JViewport.setUI(javax.swing.plaf.ViewportUI)

    private static var setUI_MethodID_27: jmethodID?

    open func setUI( ui: ViewportUI? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ui, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUI", methodSig: "(Ljavax/swing/plaf/ViewportUI;)V", methodCache: &JViewport.setUI_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setUI( _ _ui: ViewportUI? ) {
        setUI( ui: _ui )
    }

    /// public void javax.swing.JViewport.setView(java.awt.Component)

    private static var setView_MethodID_28: jmethodID?

    open func setView( view: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: view, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setView", methodSig: "(Ljava/awt/Component;)V", methodCache: &JViewport.setView_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setView( _ _view: java_awt.Component? ) {
        setView( view: _view )
    }

    /// public void javax.swing.JViewport.setViewPosition(java.awt.Point)

    private static var setViewPosition_MethodID_29: jmethodID?

    open func setViewPosition( p: java_awt.Point? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setViewPosition", methodSig: "(Ljava/awt/Point;)V", methodCache: &JViewport.setViewPosition_MethodID_29, args: &__args, locals: &__locals )
    }

    open func setViewPosition( _ _p: java_awt.Point? ) {
        setViewPosition( p: _p )
    }

    /// public void javax.swing.JViewport.setViewSize(java.awt.Dimension)

    private static var setViewSize_MethodID_30: jmethodID?

    open func setViewSize( newSize: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newSize, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setViewSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JViewport.setViewSize_MethodID_30, args: &__args, locals: &__locals )
    }

    open func setViewSize( _ _newSize: java_awt.Dimension? ) {
        setViewSize( newSize: _newSize )
    }

    /// public java.awt.Dimension javax.swing.JViewport.toViewCoordinates(java.awt.Dimension)

    private static var toViewCoordinates_MethodID_31: jmethodID?

    open func toViewCoordinates( size: java_awt.Dimension? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: size, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toViewCoordinates", methodSig: "(Ljava/awt/Dimension;)Ljava/awt/Dimension;", methodCache: &JViewport.toViewCoordinates_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func toViewCoordinates( _ _size: java_awt.Dimension? ) -> java_awt.Dimension! {
        return toViewCoordinates( size: _size )
    }

    /// public java.awt.Point javax.swing.JViewport.toViewCoordinates(java.awt.Point)

    private static var toViewCoordinates_MethodID_32: jmethodID?

    open func toViewCoordinates( p: java_awt.Point? ) -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "toViewCoordinates", methodSig: "(Ljava/awt/Point;)Ljava/awt/Point;", methodCache: &JViewport.toViewCoordinates_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }

    open func toViewCoordinates( _ _p: java_awt.Point? ) -> java_awt.Point! {
        return toViewCoordinates( p: _p )
    }

    /// public void javax.swing.JViewport.updateUI()

    // Skipping method: false true false false false 

    /// private void javax.swing.JViewport.validateView()

    /// private boolean javax.swing.JViewport.windowBlitPaint(java.awt.Graphics)

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

}

