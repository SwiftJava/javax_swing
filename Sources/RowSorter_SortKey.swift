
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.RowSorter$SortKey ///

open class RowSorter_SortKey: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var RowSorter_SortKeyJNIClass: jclass?

    /// private int javax.swing.RowSorter$SortKey.column

    /// private javax.swing.SortOrder javax.swing.RowSorter$SortKey.sortOrder

    /// public javax.swing.RowSorter$SortKey(int,javax.swing.SortOrder)

    private static var new_MethodID_1: jmethodID?

    public convenience init( column: Int, sortOrder: SortOrder? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: column, locals: &__locals )
        __args[1] = JNIType.toJava( value: sortOrder, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/RowSorter$SortKey", classCache: &RowSorter_SortKey.RowSorter_SortKeyJNIClass, methodSig: "(ILjavax/swing/SortOrder;)V", methodCache: &RowSorter_SortKey.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _column: Int, _ _sortOrder: SortOrder? ) {
        self.init( column: _column, sortOrder: _sortOrder )
    }

    /// public boolean javax.swing.RowSorter$SortKey.equals(java.lang.Object)

    private static var equals_MethodID_2: jmethodID?

    open func equals( o: java_swift.JavaObject? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: o, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "equals", methodSig: "(Ljava/lang/Object;)Z", methodCache: &RowSorter_SortKey.equals_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    override open func equals( _ _o: java_swift.JavaObject? ) -> Bool {
        return equals( o: _o )
    }

    /// public int javax.swing.RowSorter$SortKey.hashCode()

    /// public final int javax.swing.RowSorter$SortKey.getColumn()

    private static var getColumn_MethodID_3: jmethodID?

    open func getColumn() -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getColumn", methodSig: "()I", methodCache: &RowSorter_SortKey.getColumn_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }


    /// public final javax.swing.SortOrder javax.swing.RowSorter$SortKey.getSortOrder()

    private static var getSortOrder_MethodID_4: jmethodID?

    open func getSortOrder() -> SortOrder! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSortOrder", methodSig: "()Ljavax/swing/SortOrder;", methodCache: &RowSorter_SortKey.getSortOrder_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SortOrder( javaObject: __return ) : nil
    }


}

