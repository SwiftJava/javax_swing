
import java_swift
import java_awt
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.GroupLayout$ParallelGroup ///

open class GroupLayout_ParallelGroup: GroupLayout_Group {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var GroupLayout_ParallelGroupJNIClass: jclass?

    /// private final javax.swing.GroupLayout$Alignment javax.swing.GroupLayout$ParallelGroup.childAlignment

    /// private final boolean javax.swing.GroupLayout$ParallelGroup.resizable

    /// final javax.swing.GroupLayout javax.swing.GroupLayout$ParallelGroup.this$0

    // Skipping field: true false false false false false 

    /// static final boolean javax.swing.GroupLayout$Group.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// java.util.List javax.swing.GroupLayout$Group.springs

    // Skipping field: true false false false false false 

    /// final javax.swing.GroupLayout javax.swing.GroupLayout$Group.this$0

    // Skipping field: true false false false false false 

    /// private javax.swing.GroupLayout$Alignment javax.swing.GroupLayout$Spring.alignment

    /// private int javax.swing.GroupLayout$Spring.max

    /// private int javax.swing.GroupLayout$Spring.min

    /// private javax.swing.GroupLayout$Spring javax.swing.GroupLayout$Spring.parent

    /// private int javax.swing.GroupLayout$Spring.pref

    /// private int javax.swing.GroupLayout$Spring.size

    /// final javax.swing.GroupLayout javax.swing.GroupLayout$Spring.this$0

    // Skipping field: true false false false false false 

    /// javax.swing.GroupLayout$ParallelGroup(javax.swing.GroupLayout,javax.swing.GroupLayout$Alignment,boolean)

    // Skipping init: true false false 

    /// int javax.swing.GroupLayout$ParallelGroup.operator(int,int)

    // Skipping method: true false false false false 

    /// public javax.swing.GroupLayout$Group javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component,javax.swing.GroupLayout$Alignment)

    private static var addComponent_MethodID_1: jmethodID?

    open func addComponent( component: java_awt.Component?, alignment: GroupLayout_Alignment? ) -> GroupLayout_ParallelGroup! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: component, locals: &__locals )
        __args[1] = JNIType.toJava( value: alignment, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "addComponent", methodSig: "(Ljava/awt/Component;Ljavax/swing/GroupLayout$Alignment;)Ljavax/swing/GroupLayout$ParallelGroup;", methodCache: &GroupLayout_ParallelGroup.addComponent_MethodID_1, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GroupLayout_ParallelGroup( javaObject: __return ) : nil
    }

    open func addComponent( _ _component: java_awt.Component?, _ _alignment: GroupLayout_Alignment? ) -> GroupLayout_ParallelGroup! {
        return addComponent( component: _component, alignment: _alignment )
    }

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component,javax.swing.GroupLayout$Alignment,int,int,int)

    private static var addComponent_MethodID_2: jmethodID?

    open func addComponent( component: java_awt.Component?, alignment: GroupLayout_Alignment?, min: Int, pref: Int, max: Int ) -> GroupLayout_ParallelGroup! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = JNIType.toJava( value: component, locals: &__locals )
        __args[1] = JNIType.toJava( value: alignment, locals: &__locals )
        __args[2] = jvalue( i: jint(min) )
        __args[3] = jvalue( i: jint(pref) )
        __args[4] = jvalue( i: jint(max) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "addComponent", methodSig: "(Ljava/awt/Component;Ljavax/swing/GroupLayout$Alignment;III)Ljavax/swing/GroupLayout$ParallelGroup;", methodCache: &GroupLayout_ParallelGroup.addComponent_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GroupLayout_ParallelGroup( javaObject: __return ) : nil
    }

    open func addComponent( _ _component: java_awt.Component?, _ _alignment: GroupLayout_Alignment?, _ _min: Int, _ _pref: Int, _ _max: Int ) -> GroupLayout_ParallelGroup! {
        return addComponent( component: _component, alignment: _alignment, min: _min, pref: _pref, max: _max )
    }

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component,int,int,int)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$Group javax.swing.GroupLayout$ParallelGroup.addComponent(java.awt.Component,int,int,int)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$Group javax.swing.GroupLayout$ParallelGroup.addGap(int)

    private static var addGap_MethodID_3: jmethodID?

    open func addGap( pref: Int ) -> GroupLayout_Group! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(pref) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "addGap", methodSig: "(I)Ljavax/swing/GroupLayout$Group;", methodCache: &GroupLayout_ParallelGroup.addGap_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GroupLayout_Group( javaObject: __return ) : nil
    }

    override open func addGap( _ _pref: Int ) -> GroupLayout_Group! {
        return addGap( pref: _pref )
    }

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addGap(int)

    /// public javax.swing.GroupLayout$Group javax.swing.GroupLayout$ParallelGroup.addGap(int,int,int)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addGap(int,int,int)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addGroup(javax.swing.GroupLayout$Alignment,javax.swing.GroupLayout$Group)

    private static var addGroup_MethodID_4: jmethodID?

    open func addGroup( alignment: GroupLayout_Alignment?, group: GroupLayout_Group? ) -> GroupLayout_ParallelGroup! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: alignment, locals: &__locals )
        __args[1] = JNIType.toJava( value: group, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "addGroup", methodSig: "(Ljavax/swing/GroupLayout$Alignment;Ljavax/swing/GroupLayout$Group;)Ljavax/swing/GroupLayout$ParallelGroup;", methodCache: &GroupLayout_ParallelGroup.addGroup_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? GroupLayout_ParallelGroup( javaObject: __return ) : nil
    }

    open func addGroup( _ _alignment: GroupLayout_Alignment?, _ _group: GroupLayout_Group? ) -> GroupLayout_ParallelGroup! {
        return addGroup( alignment: _alignment, group: _group )
    }

    /// public javax.swing.GroupLayout$ParallelGroup javax.swing.GroupLayout$ParallelGroup.addGroup(javax.swing.GroupLayout$Group)

    // Skipping method: false true false false false 

    /// public javax.swing.GroupLayout$Group javax.swing.GroupLayout$ParallelGroup.addGroup(javax.swing.GroupLayout$Group)

    // Skipping method: false true false false false 

    /// int javax.swing.GroupLayout$ParallelGroup.calculateMaximumSize(int)

    // Skipping method: true false false false false 

    /// int javax.swing.GroupLayout$ParallelGroup.calculateMinimumSize(int)

    // Skipping method: true false false false false 

    /// private void javax.swing.GroupLayout$ParallelGroup.checkChildAlignment(javax.swing.GroupLayout$Alignment)

    /// private void javax.swing.GroupLayout$ParallelGroup.checkChildAlignment(javax.swing.GroupLayout$Alignment,boolean)

    /// void javax.swing.GroupLayout$ParallelGroup.insertAutopadding(int,java.util.List,java.util.List,java.util.List,java.util.List,boolean)

    // Skipping method: true false false false false 

    /// boolean javax.swing.GroupLayout$ParallelGroup.isResizable()

    // Skipping method: true false false false false 

    /// void javax.swing.GroupLayout$ParallelGroup.setChildSize(javax.swing.GroupLayout$Spring,int,int,int)

    // Skipping method: true false false false false 

    /// void javax.swing.GroupLayout$ParallelGroup.setValidSize(int,int,int)

    // Skipping method: true false false false false 

}

