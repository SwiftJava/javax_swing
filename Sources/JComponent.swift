
import java_swift
import java_awt
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JComponent ///

open class JComponent: java_awt.Container {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JComponentJNIClass: jclass?

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    private static var TOOL_TIP_TEXT_KEY_FieldID: jfieldID?

    public static var TOOL_TIP_TEXT_KEY: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "TOOL_TIP_TEXT_KEY", fieldType: "Ljava/lang/String;", fieldCache: &TOOL_TIP_TEXT_KEY_FieldID, className: "javax/swing/JComponent", classCache: &JComponentJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    private static var UNDEFINED_CONDITION_FieldID: jfieldID?

    public static var UNDEFINED_CONDITION: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "UNDEFINED_CONDITION", fieldType: "I", fieldCache: &UNDEFINED_CONDITION_FieldID, className: "javax/swing/JComponent", classCache: &JComponentJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    private static var WHEN_ANCESTOR_OF_FOCUSED_COMPONENT_FieldID: jfieldID?

    public static var WHEN_ANCESTOR_OF_FOCUSED_COMPONENT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WHEN_ANCESTOR_OF_FOCUSED_COMPONENT", fieldType: "I", fieldCache: &WHEN_ANCESTOR_OF_FOCUSED_COMPONENT_FieldID, className: "javax/swing/JComponent", classCache: &JComponentJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    private static var WHEN_FOCUSED_FieldID: jfieldID?

    public static var WHEN_FOCUSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WHEN_FOCUSED", fieldType: "I", fieldCache: &WHEN_FOCUSED_FieldID, className: "javax/swing/JComponent", classCache: &JComponentJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    private static var WHEN_IN_FOCUSED_WINDOW_FieldID: jfieldID?

    public static var WHEN_IN_FOCUSED_WINDOW: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "WHEN_IN_FOCUSED_WINDOW", fieldType: "I", fieldCache: &WHEN_IN_FOCUSED_WINDOW_FieldID, className: "javax/swing/JComponent", classCache: &JComponentJNIClass )
            return Int(__value)
        }
    }

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JComponent.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JComponent.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JComponent.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JComponent.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JComponent.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JComponent.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.JComponent()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/JComponent", classCache: &JComponent.JComponentJNIClass, methodSig: "()V", methodCache: &JComponent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static java.lang.Object javax.swing.JComponent.access$100()

    // Skipping method: true false false false false 

    /// static javax.accessibility.AccessibleContext javax.swing.JComponent.access$200(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static javax.accessibility.AccessibleContext javax.swing.JComponent.access$300(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static javax.accessibility.AccessibleContext javax.swing.JComponent.access$400(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static javax.accessibility.AccessibleContext javax.swing.JComponent.access$500(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static java.util.Hashtable javax.swing.JComponent.access$600()

    // Skipping method: true false false false false 

    /// static final void javax.swing.JComponent.computeVisibleRect(java.awt.Component,java.awt.Rectangle)

    // Skipping method: true false false false false 

    /// private static java.awt.Rectangle javax.swing.JComponent.fetchRectangle()

    /// public static java.util.Locale javax.swing.JComponent.getDefaultLocale()

    private static var getDefaultLocale_MethodID_2: jmethodID?

    open class func getDefaultLocale() -> java_util.JavaLocale! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/JComponent", classCache: &JComponentJNIClass, methodName: "getDefaultLocale", methodSig: "()Ljava/util/Locale;", methodCache: &getDefaultLocale_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_util.JavaLocale( javaObject: __return ) : nil
    }


    /// static void javax.swing.JComponent.getGraphicsInvoked(java.awt.Component)

    // Skipping method: true false false false false 

    /// static java.util.Set javax.swing.JComponent.getManagingFocusBackwardTraversalKeys()

    // Skipping method: true false false false false 

    /// static java.util.Set javax.swing.JComponent.getManagingFocusForwardTraversalKeys()

    // Skipping method: true false false false false 

    /// static byte javax.swing.JComponent.getWriteObjCounter(javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// private static boolean javax.swing.JComponent.isComponentObtainingGraphicsFrom(java.awt.Component)

    /// public static boolean javax.swing.JComponent.isLightweightComponent(java.awt.Component)

    private static var isLightweightComponent_MethodID_3: jmethodID?

    open class func isLightweightComponent( c: java_awt.Component? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "javax/swing/JComponent", classCache: &JComponentJNIClass, methodName: "isLightweightComponent", methodSig: "(Ljava/awt/Component;)Z", methodCache: &isLightweightComponent_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open class func isLightweightComponent( _ _c: java_awt.Component? ) -> Bool {
        return isLightweightComponent( c: _c )
    }

    /// static boolean javax.swing.JComponent.processKeyBindingsForAllComponents(java.awt.event.KeyEvent,java.awt.Container,boolean)

    // Skipping method: true false false false false 

    /// private static void javax.swing.JComponent.recycleRectangle(java.awt.Rectangle)

    /// static java.awt.Graphics javax.swing.JComponent.safelyGetGraphics(java.awt.Component)

    // Skipping method: true false false false false 

    /// static java.awt.Graphics javax.swing.JComponent.safelyGetGraphics(java.awt.Component,java.awt.Component)

    // Skipping method: true false false false false 

    /// public static void javax.swing.JComponent.setDefaultLocale(java.util.Locale)

    private static var setDefaultLocale_MethodID_4: jmethodID?

    open class func setDefaultLocale( l: java_util.JavaLocale? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "javax/swing/JComponent", classCache: &JComponentJNIClass, methodName: "setDefaultLocale", methodSig: "(Ljava/util/Locale;)V", methodCache: &setDefaultLocale_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func setDefaultLocale( _ _l: java_util.JavaLocale? ) {
        setDefaultLocale( l: _l )
    }

    /// static void javax.swing.JComponent.setWriteObjCounter(javax.swing.JComponent,byte)

    // Skipping method: true false false false false 

    /// void javax.swing.JComponent._paintImmediately(int,int,int,int)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.addAncestorListener(javax.swing.event.AncestorListener)

    private static var addAncestorListener_MethodID_5: jmethodID?

    open func addAncestorListener( listener: AncestorListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addAncestorListener", methodSig: "(Ljavax/swing/event/AncestorListener;)V", methodCache: &JComponent.addAncestorListener_MethodID_5, args: &__args, locals: &__locals )
    }

    open func addAncestorListener( _ _listener: AncestorListener? ) {
        addAncestorListener( listener: _listener )
    }

    /// public void javax.swing.JComponent.addNotify()

    // Skipping method: false true false false false 

    /// public synchronized void javax.swing.JComponent.addVetoableChangeListener(java.beans.VetoableChangeListener)

    private static var addVetoableChangeListener_MethodID_6: jmethodID?

    open func addVetoableChangeListener( listener: /* interface java.beans.VetoableChangeListener */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addVetoableChangeListener", methodSig: "(Ljava/beans/VetoableChangeListener;)V", methodCache: &JComponent.addVetoableChangeListener_MethodID_6, args: &__args, locals: &__locals )
    }

    open func addVetoableChangeListener( _ _listener: /* interface java.beans.VetoableChangeListener */ UnavailableProtocol? ) {
        addVetoableChangeListener( listener: _listener )
    }

    /// private void javax.swing.JComponent.adjustPaintFlags()

    /// boolean javax.swing.JComponent.alwaysOnTop()

    // Skipping method: true false false false false 

    /// boolean javax.swing.JComponent.checkIfChildObscuredBySibling()

    // Skipping method: true false false false false 

    /// void javax.swing.JComponent.clientPropertyChanged(java.lang.Object,java.lang.Object,java.lang.Object)

    // Skipping method: true false false false false 

    /// void javax.swing.JComponent.compWriteObjectNotify()

    // Skipping method: true false false false false 

    /// void javax.swing.JComponent.componentInputMapChanged(javax.swing.ComponentInputMap)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.computeVisibleRect(java.awt.Rectangle)

    private static var computeVisibleRect_MethodID_7: jmethodID?

    open func computeVisibleRect( visibleRect: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: visibleRect, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "computeVisibleRect", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JComponent.computeVisibleRect_MethodID_7, args: &__args, locals: &__locals )
    }

    open func computeVisibleRect( _ _visibleRect: java_awt.Rectangle? ) {
        computeVisibleRect( visibleRect: _visibleRect )
    }

    /// public boolean javax.swing.JComponent.contains(int,int)

    private static var contains_MethodID_8: jmethodID?

    open func contains( x: Int, y: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(II)Z", methodCache: &JComponent.contains_MethodID_8, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func contains( _ _x: Int, _ _y: Int ) -> Bool {
        return contains( x: _x, y: _y )
    }

    /// public javax.swing.JToolTip javax.swing.JComponent.createToolTip()

    private static var createToolTip_MethodID_9: jmethodID?

    open func createToolTip() -> JToolTip! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createToolTip", methodSig: "()Ljavax/swing/JToolTip;", methodCache: &JComponent.createToolTip_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JToolTip( javaObject: __return ) : nil
    }


    /// private void javax.swing.JComponent.deregisterNextFocusableComponent()

    /// public void javax.swing.JComponent.disable()

    // Skipping method: false true false false false 

    /// void javax.swing.JComponent.dndDone()

    // Skipping method: true false false false false 

    /// javax.swing.TransferHandler$DropLocation javax.swing.JComponent.dropLocationForPoint(java.awt.Point)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.enable()

    // Skipping method: false true false false false 

    /// public void javax.swing.JComponent.firePropertyChange(java.lang.String,boolean,boolean)

    private static var firePropertyChange_MethodID_10: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Bool, newValue: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( z: jboolean(oldValue ? JNI_TRUE : JNI_FALSE) )
        __args[2] = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;ZZ)V", methodCache: &JComponent.firePropertyChange_MethodID_10, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Bool, _ _newValue: Bool ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.JComponent.firePropertyChange(java.lang.String,int,int)

    private static var firePropertyChange_MethodID_11: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Int, newValue: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( i: jint(oldValue) )
        __args[2] = jvalue( i: jint(newValue) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;II)V", methodCache: &JComponent.firePropertyChange_MethodID_11, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Int, _ _newValue: Int ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.JComponent.firePropertyChange(java.lang.String,char,char)

    private static var firePropertyChange_MethodID_12: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: UInt16, newValue: UInt16 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( c: oldValue )
        __args[2] = jvalue( c: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;CC)V", methodCache: &JComponent.firePropertyChange_MethodID_12, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: UInt16, _ _newValue: UInt16 ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// protected void javax.swing.JComponent.fireVetoableChange(java.lang.String,java.lang.Object,java.lang.Object) throws java.beans.PropertyVetoException

    private static var fireVetoableChange_MethodID_13: jmethodID?

    open func fireVetoableChange( propertyName: String?, oldValue: java_swift.JavaObject?, newValue: java_swift.JavaObject? ) throws /* java.beans.PropertyVetoException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = JNIType.toJava( value: oldValue, locals: &__locals )
        __args[2] = JNIType.toJava( value: newValue, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireVetoableChange", methodSig: "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", methodCache: &JComponent.fireVetoableChange_MethodID_13, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.beans.PropertyVetoException */ UnavailableObject( javaObject: throwable )
        }
    }

    open func fireVetoableChange( _ _propertyName: String?, _ _oldValue: java_swift.JavaObject?, _ _newValue: java_swift.JavaObject? ) throws /* java.beans.PropertyVetoException */ {
        try fireVetoableChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public java.awt.event.ActionListener javax.swing.JComponent.getActionForKeyStroke(javax.swing.KeyStroke)

    private static var getActionForKeyStroke_MethodID_14: jmethodID?

    open func getActionForKeyStroke( aKeyStroke: KeyStroke? ) -> java_awt.ActionListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: aKeyStroke, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionForKeyStroke", methodSig: "(Ljavax/swing/KeyStroke;)Ljava/awt/event/ActionListener;", methodCache: &JComponent.getActionForKeyStroke_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.ActionListenerForward( javaObject: __return ) : nil
    }

    open func getActionForKeyStroke( _ _aKeyStroke: KeyStroke? ) -> java_awt.ActionListener! {
        return getActionForKeyStroke( aKeyStroke: _aKeyStroke )
    }

    /// final javax.swing.ActionMap javax.swing.JComponent.getActionMap(boolean)

    // Skipping method: true false false false false 

    /// public final javax.swing.ActionMap javax.swing.JComponent.getActionMap()

    private static var getActionMap_MethodID_15: jmethodID?

    open func getActionMap() -> ActionMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActionMap", methodSig: "()Ljavax/swing/ActionMap;", methodCache: &JComponent.getActionMap_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ActionMap( javaObject: __return ) : nil
    }


    /// public float javax.swing.JComponent.getAlignmentX()

    // Skipping method: false true false false false 

    /// public float javax.swing.JComponent.getAlignmentY()

    // Skipping method: false true false false false 

    /// public javax.swing.event.AncestorListener[] javax.swing.JComponent.getAncestorListeners()

    private static var getAncestorListeners_MethodID_16: jmethodID?

    open func getAncestorListeners() -> [AncestorListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAncestorListeners", methodSig: "()[Ljavax/swing/event/AncestorListener;", methodCache: &JComponent.getAncestorListeners_MethodID_16, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [AncestorListenerForward].self, from: __return )
    }


    /// private javax.swing.AncestorNotifier javax.swing.JComponent.getAncestorNotifier()

    /// public boolean javax.swing.JComponent.getAutoscrolls()

    private static var getAutoscrolls_MethodID_17: jmethodID?

    open func getAutoscrolls() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getAutoscrolls", methodSig: "()Z", methodCache: &JComponent.getAutoscrolls_MethodID_17, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public int javax.swing.JComponent.getBaseline(int,int)

    private static var getBaseline_MethodID_18: jmethodID?

    open func getBaseline( width: Int, height: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(width) )
        __args[1] = jvalue( i: jint(height) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getBaseline", methodSig: "(II)I", methodCache: &JComponent.getBaseline_MethodID_18, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func getBaseline( _ _width: Int, _ _height: Int ) -> Int {
        return getBaseline( width: _width, height: _height )
    }

    /// public java.awt.Component$BaselineResizeBehavior javax.swing.JComponent.getBaselineResizeBehavior()

    // Skipping method: false true false false false 

    /// public javax.swing.border.Border javax.swing.JComponent.getBorder()

    private static var getBorder_MethodID_19: jmethodID?

    open func getBorder() -> Border! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorder", methodSig: "()Ljavax/swing/border/Border;", methodCache: &JComponent.getBorder_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BorderForward( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle javax.swing.JComponent.getBounds(java.awt.Rectangle)

    private static var getBounds_MethodID_20: jmethodID?

    open func getBounds( rv: java_awt.Rectangle? ) -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: rv, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "(Ljava/awt/Rectangle;)Ljava/awt/Rectangle;", methodCache: &JComponent.getBounds_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }

    override open func getBounds( _ _rv: java_awt.Rectangle? ) -> java_awt.Rectangle! {
        return getBounds( rv: _rv )
    }

    /// private javax.swing.ArrayTable javax.swing.JComponent.getClientProperties()

    /// public final java.lang.Object javax.swing.JComponent.getClientProperty(java.lang.Object)

    private static var getClientProperty_MethodID_21: jmethodID?

    open func getClientProperty( key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClientProperty", methodSig: "(Ljava/lang/Object;)Ljava/lang/Object;", methodCache: &JComponent.getClientProperty_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }

    open func getClientProperty( _ _key: java_swift.JavaObject? ) -> java_swift.JavaObject! {
        return getClientProperty( key: _key )
    }

    /// protected java.awt.Graphics javax.swing.JComponent.getComponentGraphics(java.awt.Graphics)

    private static var getComponentGraphics_MethodID_22: jmethodID?

    open func getComponentGraphics( g: java_awt.Graphics? ) -> java_awt.Graphics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentGraphics", methodSig: "(Ljava/awt/Graphics;)Ljava/awt/Graphics;", methodCache: &JComponent.getComponentGraphics_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Graphics( javaObject: __return ) : nil
    }

    open func getComponentGraphics( _ _g: java_awt.Graphics? ) -> java_awt.Graphics! {
        return getComponentGraphics( g: _g )
    }

    /// public javax.swing.JPopupMenu javax.swing.JComponent.getComponentPopupMenu()

    private static var getComponentPopupMenu_MethodID_23: jmethodID?

    open func getComponentPopupMenu() -> JPopupMenu! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentPopupMenu", methodSig: "()Ljavax/swing/JPopupMenu;", methodCache: &JComponent.getComponentPopupMenu_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JPopupMenu( javaObject: __return ) : nil
    }


    /// public int javax.swing.JComponent.getConditionForKeyStroke(javax.swing.KeyStroke)

    private static var getConditionForKeyStroke_MethodID_24: jmethodID?

    open func getConditionForKeyStroke( aKeyStroke: KeyStroke? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: aKeyStroke, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getConditionForKeyStroke", methodSig: "(Ljavax/swing/KeyStroke;)I", methodCache: &JComponent.getConditionForKeyStroke_MethodID_24, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getConditionForKeyStroke( _ _aKeyStroke: KeyStroke? ) -> Int {
        return getConditionForKeyStroke( aKeyStroke: _aKeyStroke )
    }

    /// boolean javax.swing.JComponent.getCreatedDoubleBuffer()

    // Skipping method: true false false false false 

    /// public int javax.swing.JComponent.getDebugGraphicsOptions()

    private static var getDebugGraphicsOptions_MethodID_25: jmethodID?

    open func getDebugGraphicsOptions() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDebugGraphicsOptions", methodSig: "()I", methodCache: &JComponent.getDebugGraphicsOptions_MethodID_25, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// private boolean javax.swing.JComponent.getFlag(int)

    /// public java.awt.FontMetrics javax.swing.JComponent.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_26: jmethodID?

    open func getFontMetrics( font: java_awt.Font? ) -> java_awt.FontMetrics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: font, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &JComponent.getFontMetrics_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.FontMetrics( javaObject: __return ) : nil
    }

    override open func getFontMetrics( _ _font: java_awt.Font? ) -> java_awt.FontMetrics! {
        return getFontMetrics( font: _font )
    }

    /// public java.awt.Graphics javax.swing.JComponent.getGraphics()

    // Skipping method: false true false false false 

    /// public int javax.swing.JComponent.getHeight()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.JComponent.getInheritsPopupMenu()

    private static var getInheritsPopupMenu_MethodID_27: jmethodID?

    open func getInheritsPopupMenu() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getInheritsPopupMenu", methodSig: "()Z", methodCache: &JComponent.getInheritsPopupMenu_MethodID_27, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final javax.swing.InputMap javax.swing.JComponent.getInputMap(int)

    private static var getInputMap_MethodID_28: jmethodID?

    open func getInputMap( condition: Int ) -> InputMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(condition) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInputMap", methodSig: "(I)Ljavax/swing/InputMap;", methodCache: &JComponent.getInputMap_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? InputMap( javaObject: __return ) : nil
    }

    open func getInputMap( _ _condition: Int ) -> InputMap! {
        return getInputMap( condition: _condition )
    }

    /// final javax.swing.InputMap javax.swing.JComponent.getInputMap(int,boolean)

    // Skipping method: true false false false false 

    /// public final javax.swing.InputMap javax.swing.JComponent.getInputMap()

    private static var getInputMap_MethodID_29: jmethodID?

    open func getInputMap() -> InputMap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInputMap", methodSig: "()Ljavax/swing/InputMap;", methodCache: &JComponent.getInputMap_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? InputMap( javaObject: __return ) : nil
    }


    /// public javax.swing.InputVerifier javax.swing.JComponent.getInputVerifier()

    private static var getInputVerifier_MethodID_30: jmethodID?

    open func getInputVerifier() -> InputVerifier! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInputVerifier", methodSig: "()Ljavax/swing/InputVerifier;", methodCache: &JComponent.getInputVerifier_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? InputVerifier( javaObject: __return ) : nil
    }


    /// public java.awt.Insets javax.swing.JComponent.getInsets(java.awt.Insets)

    private static var getInsets_MethodID_31: jmethodID?

    open func getInsets( insets: java_awt.Insets? ) -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: insets, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInsets", methodSig: "(Ljava/awt/Insets;)Ljava/awt/Insets;", methodCache: &JComponent.getInsets_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }

    open func getInsets( _ _insets: java_awt.Insets? ) -> java_awt.Insets! {
        return getInsets( insets: _insets )
    }

    /// public java.awt.Insets javax.swing.JComponent.getInsets()

    // Skipping method: false true false false false 

    /// public java.util.EventListener[] javax.swing.JComponent.getListeners(java.lang.Class)

    private static var getListeners_MethodID_32: jmethodID?

    open func getListeners( listenerType: java_swift.JavaClass? ) -> [EventListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: listenerType, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getListeners", methodSig: "(Ljava/lang/Class;)[Ljava/util/EventListener;", methodCache: &JComponent.getListeners_MethodID_32, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [EventListenerForward].self, from: __return )
    }

    override open func getListeners( _ _listenerType: java_swift.JavaClass? ) -> [EventListener]! {
        return getListeners( listenerType: _listenerType )
    }

    /// public java.awt.Point javax.swing.JComponent.getLocation(java.awt.Point)

    private static var getLocation_MethodID_33: jmethodID?

    open func getLocation( rv: java_awt.Point? ) -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: rv, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocation", methodSig: "(Ljava/awt/Point;)Ljava/awt/Point;", methodCache: &JComponent.getLocation_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }

    override open func getLocation( _ _rv: java_awt.Point? ) -> java_awt.Point! {
        return getLocation( rv: _rv )
    }

    /// public java.awt.Dimension javax.swing.JComponent.getMaximumSize()

    // Skipping method: false true false false false 

    /// public java.awt.Dimension javax.swing.JComponent.getMinimumSize()

    // Skipping method: false true false false false 

    /// public java.awt.Component javax.swing.JComponent.getNextFocusableComponent()

    private static var getNextFocusableComponent_MethodID_34: jmethodID?

    open func getNextFocusableComponent() -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNextFocusableComponent", methodSig: "()Ljava/awt/Component;", methodCache: &JComponent.getNextFocusableComponent_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }


    /// private int javax.swing.JComponent.getObscuredState(int,int,int,int,int)

    /// public java.awt.Point javax.swing.JComponent.getPopupLocation(java.awt.event.MouseEvent)

    private static var getPopupLocation_MethodID_35: jmethodID?

    open func getPopupLocation( event: java_awt.MouseEvent? ) -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPopupLocation", methodSig: "(Ljava/awt/event/MouseEvent;)Ljava/awt/Point;", methodCache: &JComponent.getPopupLocation_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }

    open func getPopupLocation( _ _event: java_awt.MouseEvent? ) -> java_awt.Point! {
        return getPopupLocation( event: _event )
    }

    /// public java.awt.Dimension javax.swing.JComponent.getPreferredSize()

    // Skipping method: false true false false false 

    /// public javax.swing.KeyStroke[] javax.swing.JComponent.getRegisteredKeyStrokes()

    private static var getRegisteredKeyStrokes_MethodID_36: jmethodID?

    open func getRegisteredKeyStrokes() -> [KeyStroke]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRegisteredKeyStrokes", methodSig: "()[Ljavax/swing/KeyStroke;", methodCache: &JComponent.getRegisteredKeyStrokes_MethodID_36, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [KeyStroke].self, from: __return )
    }


    /// public javax.swing.JRootPane javax.swing.JComponent.getRootPane()

    private static var getRootPane_MethodID_37: jmethodID?

    open func getRootPane() -> JRootPane! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRootPane", methodSig: "()Ljavax/swing/JRootPane;", methodCache: &JComponent.getRootPane_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JRootPane( javaObject: __return ) : nil
    }


    /// public java.awt.Dimension javax.swing.JComponent.getSize(java.awt.Dimension)

    private static var getSize_MethodID_38: jmethodID?

    open func getSize( rv: java_awt.Dimension? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: rv, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSize", methodSig: "(Ljava/awt/Dimension;)Ljava/awt/Dimension;", methodCache: &JComponent.getSize_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    override open func getSize( _ _rv: java_awt.Dimension? ) -> java_awt.Dimension! {
        return getSize( rv: _rv )
    }

    /// public java.awt.Point javax.swing.JComponent.getToolTipLocation(java.awt.event.MouseEvent)

    private static var getToolTipLocation_MethodID_39: jmethodID?

    open func getToolTipLocation( event: java_awt.MouseEvent? ) -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipLocation", methodSig: "(Ljava/awt/event/MouseEvent;)Ljava/awt/Point;", methodCache: &JComponent.getToolTipLocation_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }

    open func getToolTipLocation( _ _event: java_awt.MouseEvent? ) -> java_awt.Point! {
        return getToolTipLocation( event: _event )
    }

    /// public java.lang.String javax.swing.JComponent.getToolTipText(java.awt.event.MouseEvent)

    private static var getToolTipText_MethodID_40: jmethodID?

    open func getToolTipText( event: java_awt.MouseEvent? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipText", methodSig: "(Ljava/awt/event/MouseEvent;)Ljava/lang/String;", methodCache: &JComponent.getToolTipText_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getToolTipText( _ _event: java_awt.MouseEvent? ) -> String! {
        return getToolTipText( event: _event )
    }

    /// public java.lang.String javax.swing.JComponent.getToolTipText()

    private static var getToolTipText_MethodID_41: jmethodID?

    open func getToolTipText() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipText", methodSig: "()Ljava/lang/String;", methodCache: &JComponent.getToolTipText_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.awt.Container javax.swing.JComponent.getTopLevelAncestor()

    private static var getTopLevelAncestor_MethodID_42: jmethodID?

    open func getTopLevelAncestor() -> java_awt.Container! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTopLevelAncestor", methodSig: "()Ljava/awt/Container;", methodCache: &JComponent.getTopLevelAncestor_MethodID_42, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Container( javaObject: __return ) : nil
    }


    /// public javax.swing.TransferHandler javax.swing.JComponent.getTransferHandler()

    private static var getTransferHandler_MethodID_43: jmethodID?

    open func getTransferHandler() -> TransferHandler! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTransferHandler", methodSig: "()Ljavax/swing/TransferHandler;", methodCache: &JComponent.getTransferHandler_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TransferHandler( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JComponent.getUIClassID()

    private static var getUIClassID_MethodID_44: jmethodID?

    open func getUIClassID() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUIClassID", methodSig: "()Ljava/lang/String;", methodCache: &JComponent.getUIClassID_MethodID_44, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public boolean javax.swing.JComponent.getVerifyInputWhenFocusTarget()

    private static var getVerifyInputWhenFocusTarget_MethodID_45: jmethodID?

    open func getVerifyInputWhenFocusTarget() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getVerifyInputWhenFocusTarget", methodSig: "()Z", methodCache: &JComponent.getVerifyInputWhenFocusTarget_MethodID_45, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public synchronized java.beans.VetoableChangeListener[] javax.swing.JComponent.getVetoableChangeListeners()

    private static var getVetoableChangeListeners_MethodID_46: jmethodID?

    open func getVetoableChangeListeners() -> [/* interface java.beans.VetoableChangeListener */ UnavailableProtocol]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVetoableChangeListeners", methodSig: "()[Ljava/beans/VetoableChangeListener;", methodCache: &JComponent.getVetoableChangeListeners_MethodID_46, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [/* interface java.beans.VetoableChangeListener */ UnavailableProtocolForward].self, from: __return )
    }


    /// public java.awt.Rectangle javax.swing.JComponent.getVisibleRect()

    private static var getVisibleRect_MethodID_47: jmethodID?

    open func getVisibleRect() -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVisibleRect", methodSig: "()Ljava/awt/Rectangle;", methodCache: &JComponent.getVisibleRect_MethodID_47, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// public int javax.swing.JComponent.getWidth()

    // Skipping method: false true false false false 

    /// public int javax.swing.JComponent.getX()

    // Skipping method: false true false false false 

    /// public int javax.swing.JComponent.getY()

    // Skipping method: false true false false false 

    /// public void javax.swing.JComponent.grabFocus()

    private static var grabFocus_MethodID_48: jmethodID?

    open func grabFocus() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "grabFocus", methodSig: "()V", methodCache: &JComponent.grabFocus_MethodID_48, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.JComponent.hide()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.JComponent.isDoubleBuffered()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.JComponent.isManagingFocus()

    private static var isManagingFocus_MethodID_49: jmethodID?

    open func isManagingFocus() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isManagingFocus", methodSig: "()Z", methodCache: &JComponent.isManagingFocus_MethodID_49, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JComponent.isOpaque()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.JComponent.isOptimizedDrawingEnabled()

    private static var isOptimizedDrawingEnabled_MethodID_50: jmethodID?

    open func isOptimizedDrawingEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isOptimizedDrawingEnabled", methodSig: "()Z", methodCache: &JComponent.isOptimizedDrawingEnabled_MethodID_50, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// boolean javax.swing.JComponent.isPainting()

    // Skipping method: true false false false false 

    /// public final boolean javax.swing.JComponent.isPaintingForPrint()

    private static var isPaintingForPrint_MethodID_51: jmethodID?

    open func isPaintingForPrint() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPaintingForPrint", methodSig: "()Z", methodCache: &JComponent.isPaintingForPrint_MethodID_51, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// protected boolean javax.swing.JComponent.isPaintingOrigin()

    private static var isPaintingOrigin_MethodID_52: jmethodID?

    open func isPaintingOrigin() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPaintingOrigin", methodSig: "()Z", methodCache: &JComponent.isPaintingOrigin_MethodID_52, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JComponent.isPaintingTile()

    private static var isPaintingTile_MethodID_53: jmethodID?

    open func isPaintingTile() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPaintingTile", methodSig: "()Z", methodCache: &JComponent.isPaintingTile_MethodID_53, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JComponent.isRequestFocusEnabled()

    private static var isRequestFocusEnabled_MethodID_54: jmethodID?

    open func isRequestFocusEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isRequestFocusEnabled", methodSig: "()Z", methodCache: &JComponent.isRequestFocusEnabled_MethodID_54, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JComponent.isValidateRoot()

    // Skipping method: false true false false false 

    /// private void javax.swing.JComponent.lambda$revalidate$0()

    /// public void javax.swing.JComponent.paint(java.awt.Graphics)

    private static var paint_MethodID_55: jmethodID?

    open func paint( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.paint_MethodID_55, args: &__args, locals: &__locals )
    }

    override open func paint( _ _g: java_awt.Graphics? ) {
        paint( g: _g )
    }

    /// protected void javax.swing.JComponent.paintBorder(java.awt.Graphics)

    private static var paintBorder_MethodID_56: jmethodID?

    open func paintBorder( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.paintBorder_MethodID_56, args: &__args, locals: &__locals )
    }

    open func paintBorder( _ _g: java_awt.Graphics? ) {
        paintBorder( g: _g )
    }

    /// protected void javax.swing.JComponent.paintChildren(java.awt.Graphics)

    private static var paintChildren_MethodID_57: jmethodID?

    open func paintChildren( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintChildren", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.paintChildren_MethodID_57, args: &__args, locals: &__locals )
    }

    open func paintChildren( _ _g: java_awt.Graphics? ) {
        paintChildren( g: _g )
    }

    /// protected void javax.swing.JComponent.paintComponent(java.awt.Graphics)

    private static var paintComponent_MethodID_58: jmethodID?

    open func paintComponent( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintComponent", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.paintComponent_MethodID_58, args: &__args, locals: &__locals )
    }

    open func paintComponent( _ _g: java_awt.Graphics? ) {
        paintComponent( g: _g )
    }

    /// void javax.swing.JComponent.paintForceDoubleBuffered(java.awt.Graphics)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.paintImmediately(int,int,int,int)

    private static var paintImmediately_MethodID_59: jmethodID?

    open func paintImmediately( x: Int, y: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        __args[2] = jvalue( i: jint(w) )
        __args[3] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintImmediately", methodSig: "(IIII)V", methodCache: &JComponent.paintImmediately_MethodID_59, args: &__args, locals: &__locals )
    }

    open func paintImmediately( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        paintImmediately( x: _x, y: _y, w: _w, h: _h )
    }

    /// public void javax.swing.JComponent.paintImmediately(java.awt.Rectangle)

    private static var paintImmediately_MethodID_60: jmethodID?

    open func paintImmediately( r: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: r, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintImmediately", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JComponent.paintImmediately_MethodID_60, args: &__args, locals: &__locals )
    }

    open func paintImmediately( _ _r: java_awt.Rectangle? ) {
        paintImmediately( r: _r )
    }

    /// void javax.swing.JComponent.paintToOffscreen(java.awt.Graphics,int,int,int,int,int,int)

    // Skipping method: true false false false false 

    /// protected java.lang.String javax.swing.JComponent.paramString()

    private static var paramString_MethodID_61: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JComponent.paramString_MethodID_61, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public void javax.swing.JComponent.print(java.awt.Graphics)

    private static var print_MethodID_62: jmethodID?

    open func print( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.print_MethodID_62, args: &__args, locals: &__locals )
    }

    override open func print( _ _g: java_awt.Graphics? ) {
        print( g: _g )
    }

    /// public void javax.swing.JComponent.printAll(java.awt.Graphics)

    private static var printAll_MethodID_63: jmethodID?

    open func printAll( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "printAll", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.printAll_MethodID_63, args: &__args, locals: &__locals )
    }

    override open func printAll( _ _g: java_awt.Graphics? ) {
        printAll( g: _g )
    }

    /// protected void javax.swing.JComponent.printBorder(java.awt.Graphics)

    private static var printBorder_MethodID_64: jmethodID?

    open func printBorder( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "printBorder", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.printBorder_MethodID_64, args: &__args, locals: &__locals )
    }

    open func printBorder( _ _g: java_awt.Graphics? ) {
        printBorder( g: _g )
    }

    /// protected void javax.swing.JComponent.printChildren(java.awt.Graphics)

    private static var printChildren_MethodID_65: jmethodID?

    open func printChildren( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "printChildren", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.printChildren_MethodID_65, args: &__args, locals: &__locals )
    }

    open func printChildren( _ _g: java_awt.Graphics? ) {
        printChildren( g: _g )
    }

    /// protected void javax.swing.JComponent.printComponent(java.awt.Graphics)

    private static var printComponent_MethodID_66: jmethodID?

    open func printComponent( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "printComponent", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.printComponent_MethodID_66, args: &__args, locals: &__locals )
    }

    open func printComponent( _ _g: java_awt.Graphics? ) {
        printComponent( g: _g )
    }

    /// protected void javax.swing.JComponent.processComponentKeyEvent(java.awt.event.KeyEvent)

    private static var processComponentKeyEvent_MethodID_67: jmethodID?

    open func processComponentKeyEvent( e: java_awt.KeyEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processComponentKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;)V", methodCache: &JComponent.processComponentKeyEvent_MethodID_67, args: &__args, locals: &__locals )
    }

    open func processComponentKeyEvent( _ _e: java_awt.KeyEvent? ) {
        processComponentKeyEvent( e: _e )
    }

    /// protected boolean javax.swing.JComponent.processKeyBinding(javax.swing.KeyStroke,java.awt.event.KeyEvent,int,boolean)

    private static var processKeyBinding_MethodID_68: jmethodID?

    open func processKeyBinding( ks: KeyStroke?, e: java_awt.KeyEvent?, condition: Int, pressed: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: ks, locals: &__locals )
        __args[1] = JNIType.toJava( value: e, locals: &__locals )
        __args[2] = jvalue( i: jint(condition) )
        __args[3] = jvalue( z: jboolean(pressed ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "processKeyBinding", methodSig: "(Ljavax/swing/KeyStroke;Ljava/awt/event/KeyEvent;IZ)Z", methodCache: &JComponent.processKeyBinding_MethodID_68, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func processKeyBinding( _ _ks: KeyStroke?, _ _e: java_awt.KeyEvent?, _ _condition: Int, _ _pressed: Bool ) -> Bool {
        return processKeyBinding( ks: _ks, e: _e, condition: _condition, pressed: _pressed )
    }

    /// boolean javax.swing.JComponent.processKeyBindings(java.awt.event.KeyEvent,boolean)

    // Skipping method: true false false false false 

    /// protected void javax.swing.JComponent.processKeyEvent(java.awt.event.KeyEvent)

    private static var processKeyEvent_MethodID_69: jmethodID?

    open func processKeyEvent( e: java_awt.KeyEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;)V", methodCache: &JComponent.processKeyEvent_MethodID_69, args: &__args, locals: &__locals )
    }

    override open func processKeyEvent( _ _e: java_awt.KeyEvent? ) {
        processKeyEvent( e: _e )
    }

    /// protected void javax.swing.JComponent.processMouseEvent(java.awt.event.MouseEvent)

    private static var processMouseEvent_MethodID_70: jmethodID?

    open func processMouseEvent( e: java_awt.MouseEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMouseEvent", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &JComponent.processMouseEvent_MethodID_70, args: &__args, locals: &__locals )
    }

    override open func processMouseEvent( _ _e: java_awt.MouseEvent? ) {
        processMouseEvent( e: _e )
    }

    /// protected void javax.swing.JComponent.processMouseMotionEvent(java.awt.event.MouseEvent)

    private static var processMouseMotionEvent_MethodID_71: jmethodID?

    open func processMouseMotionEvent( e: java_awt.MouseEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMouseMotionEvent", methodSig: "(Ljava/awt/event/MouseEvent;)V", methodCache: &JComponent.processMouseMotionEvent_MethodID_71, args: &__args, locals: &__locals )
    }

    override open func processMouseMotionEvent( _ _e: java_awt.MouseEvent? ) {
        processMouseMotionEvent( e: _e )
    }

    /// public final void javax.swing.JComponent.putClientProperty(java.lang.Object,java.lang.Object)

    private static var putClientProperty_MethodID_72: jmethodID?

    open func putClientProperty( key: java_swift.JavaObject?, value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        __args[1] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "putClientProperty", methodSig: "(Ljava/lang/Object;Ljava/lang/Object;)V", methodCache: &JComponent.putClientProperty_MethodID_72, args: &__args, locals: &__locals )
    }

    open func putClientProperty( _ _key: java_swift.JavaObject?, _ _value: java_swift.JavaObject? ) {
        putClientProperty( key: _key, value: _value )
    }

    /// private void javax.swing.JComponent.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// boolean javax.swing.JComponent.rectangleIsObscured(int,int,int,int)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,javax.swing.KeyStroke,int)

    private static var registerKeyboardAction_MethodID_73: jmethodID?

    open func registerKeyboardAction( anAction: java_awt.ActionListener?, aKeyStroke: KeyStroke?, aCondition: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: anAction, locals: &__locals )
        __args[1] = JNIType.toJava( value: aKeyStroke, locals: &__locals )
        __args[2] = jvalue( i: jint(aCondition) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerKeyboardAction", methodSig: "(Ljava/awt/event/ActionListener;Ljavax/swing/KeyStroke;I)V", methodCache: &JComponent.registerKeyboardAction_MethodID_73, args: &__args, locals: &__locals )
    }

    open func registerKeyboardAction( _ _anAction: java_awt.ActionListener?, _ _aKeyStroke: KeyStroke?, _ _aCondition: Int ) {
        registerKeyboardAction( anAction: _anAction, aKeyStroke: _aKeyStroke, aCondition: _aCondition )
    }

    /// public void javax.swing.JComponent.registerKeyboardAction(java.awt.event.ActionListener,java.lang.String,javax.swing.KeyStroke,int)

    private static var registerKeyboardAction_MethodID_74: jmethodID?

    open func registerKeyboardAction( anAction: java_awt.ActionListener?, aCommand: String?, aKeyStroke: KeyStroke?, aCondition: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = JNIType.toJava( value: anAction, locals: &__locals )
        __args[1] = JNIType.toJava( value: aCommand, locals: &__locals )
        __args[2] = JNIType.toJava( value: aKeyStroke, locals: &__locals )
        __args[3] = jvalue( i: jint(aCondition) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "registerKeyboardAction", methodSig: "(Ljava/awt/event/ActionListener;Ljava/lang/String;Ljavax/swing/KeyStroke;I)V", methodCache: &JComponent.registerKeyboardAction_MethodID_74, args: &__args, locals: &__locals )
    }

    open func registerKeyboardAction( _ _anAction: java_awt.ActionListener?, _ _aCommand: String?, _ _aKeyStroke: KeyStroke?, _ _aCondition: Int ) {
        registerKeyboardAction( anAction: _anAction, aCommand: _aCommand, aKeyStroke: _aKeyStroke, aCondition: _aCondition )
    }

    /// private void javax.swing.JComponent.registerNextFocusableComponent(java.awt.Component)

    /// private void javax.swing.JComponent.registerNextFocusableComponent()

    /// private void javax.swing.JComponent.registerWithKeyboardManager(boolean)

    /// private void javax.swing.JComponent.registerWithKeyboardManager(javax.swing.KeyStroke)

    /// public void javax.swing.JComponent.removeAncestorListener(javax.swing.event.AncestorListener)

    private static var removeAncestorListener_MethodID_75: jmethodID?

    open func removeAncestorListener( listener: AncestorListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeAncestorListener", methodSig: "(Ljavax/swing/event/AncestorListener;)V", methodCache: &JComponent.removeAncestorListener_MethodID_75, args: &__args, locals: &__locals )
    }

    open func removeAncestorListener( _ _listener: AncestorListener? ) {
        removeAncestorListener( listener: _listener )
    }

    /// public void javax.swing.JComponent.removeNotify()

    // Skipping method: false true false false false 

    /// public synchronized void javax.swing.JComponent.removeVetoableChangeListener(java.beans.VetoableChangeListener)

    private static var removeVetoableChangeListener_MethodID_76: jmethodID?

    open func removeVetoableChangeListener( listener: /* interface java.beans.VetoableChangeListener */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeVetoableChangeListener", methodSig: "(Ljava/beans/VetoableChangeListener;)V", methodCache: &JComponent.removeVetoableChangeListener_MethodID_76, args: &__args, locals: &__locals )
    }

    open func removeVetoableChangeListener( _ _listener: /* interface java.beans.VetoableChangeListener */ UnavailableProtocol? ) {
        removeVetoableChangeListener( listener: _listener )
    }

    /// public void javax.swing.JComponent.repaint(long,int,int,int,int)

    private static var repaint_MethodID_77: jmethodID?

    open func repaint( tm: Int64, x: Int, y: Int, width: Int, height: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = jvalue( j: tm )
        __args[1] = jvalue( i: jint(x) )
        __args[2] = jvalue( i: jint(y) )
        __args[3] = jvalue( i: jint(width) )
        __args[4] = jvalue( i: jint(height) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaint", methodSig: "(JIIII)V", methodCache: &JComponent.repaint_MethodID_77, args: &__args, locals: &__locals )
    }

    override open func repaint( _ _tm: Int64, _ _x: Int, _ _y: Int, _ _width: Int, _ _height: Int ) {
        repaint( tm: _tm, x: _x, y: _y, width: _width, height: _height )
    }

    /// public void javax.swing.JComponent.repaint(java.awt.Rectangle)

    private static var repaint_MethodID_78: jmethodID?

    open func repaint( r: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: r, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "repaint", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JComponent.repaint_MethodID_78, args: &__args, locals: &__locals )
    }

    open func repaint( _ _r: java_awt.Rectangle? ) {
        repaint( r: _r )
    }

    /// public boolean javax.swing.JComponent.requestDefaultFocus()

    private static var requestDefaultFocus_MethodID_79: jmethodID?

    open func requestDefaultFocus() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestDefaultFocus", methodSig: "()Z", methodCache: &JComponent.requestDefaultFocus_MethodID_79, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JComponent.requestFocus(boolean)

    private static var requestFocus_MethodID_80: jmethodID?

    open func requestFocus( temporary: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(temporary ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestFocus", methodSig: "(Z)Z", methodCache: &JComponent.requestFocus_MethodID_80, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func requestFocus( _ _temporary: Bool ) -> Bool {
        return requestFocus( temporary: _temporary )
    }

    /// public void javax.swing.JComponent.requestFocus()

    // Skipping method: false true false false false 

    /// protected boolean javax.swing.JComponent.requestFocusInWindow(boolean)

    private static var requestFocusInWindow_MethodID_81: jmethodID?

    open func requestFocusInWindow( temporary: Bool ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(temporary ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "requestFocusInWindow", methodSig: "(Z)Z", methodCache: &JComponent.requestFocusInWindow_MethodID_81, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    override open func requestFocusInWindow( _ _temporary: Bool ) -> Bool {
        return requestFocusInWindow( temporary: _temporary )
    }

    /// public boolean javax.swing.JComponent.requestFocusInWindow()

    // Skipping method: false true false false false 

    /// public void javax.swing.JComponent.resetKeyboardActions()

    private static var resetKeyboardActions_MethodID_82: jmethodID?

    open func resetKeyboardActions() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "resetKeyboardActions", methodSig: "()V", methodCache: &JComponent.resetKeyboardActions_MethodID_82, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.JComponent.reshape(int,int,int,int)

    private static var reshape_MethodID_83: jmethodID?

    open func reshape( x: Int, y: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 4 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        __args[2] = jvalue( i: jint(w) )
        __args[3] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "reshape", methodSig: "(IIII)V", methodCache: &JComponent.reshape_MethodID_83, args: &__args, locals: &__locals )
    }

    override open func reshape( _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        reshape( x: _x, y: _y, w: _w, h: _h )
    }

    /// public void javax.swing.JComponent.revalidate()

    // Skipping method: false true false false false 

    /// public void javax.swing.JComponent.scrollRectToVisible(java.awt.Rectangle)

    private static var scrollRectToVisible_MethodID_84: jmethodID?

    open func scrollRectToVisible( aRect: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: aRect, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "scrollRectToVisible", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JComponent.scrollRectToVisible_MethodID_84, args: &__args, locals: &__locals )
    }

    open func scrollRectToVisible( _ _aRect: java_awt.Rectangle? ) {
        scrollRectToVisible( aRect: _aRect )
    }

    /// public final void javax.swing.JComponent.setActionMap(javax.swing.ActionMap)

    private static var setActionMap_MethodID_85: jmethodID?

    open func setActionMap( am: ActionMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: am, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setActionMap", methodSig: "(Ljavax/swing/ActionMap;)V", methodCache: &JComponent.setActionMap_MethodID_85, args: &__args, locals: &__locals )
    }

    open func setActionMap( _ _am: ActionMap? ) {
        setActionMap( am: _am )
    }

    /// public void javax.swing.JComponent.setAlignmentX(float)

    private static var setAlignmentX_MethodID_86: jmethodID?

    open func setAlignmentX( alignmentX: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: alignmentX )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAlignmentX", methodSig: "(F)V", methodCache: &JComponent.setAlignmentX_MethodID_86, args: &__args, locals: &__locals )
    }

    open func setAlignmentX( _ _alignmentX: Float ) {
        setAlignmentX( alignmentX: _alignmentX )
    }

    /// public void javax.swing.JComponent.setAlignmentY(float)

    private static var setAlignmentY_MethodID_87: jmethodID?

    open func setAlignmentY( alignmentY: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( f: alignmentY )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAlignmentY", methodSig: "(F)V", methodCache: &JComponent.setAlignmentY_MethodID_87, args: &__args, locals: &__locals )
    }

    open func setAlignmentY( _ _alignmentY: Float ) {
        setAlignmentY( alignmentY: _alignmentY )
    }

    /// public void javax.swing.JComponent.setAutoscrolls(boolean)

    private static var setAutoscrolls_MethodID_88: jmethodID?

    open func setAutoscrolls( autoscrolls: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(autoscrolls ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAutoscrolls", methodSig: "(Z)V", methodCache: &JComponent.setAutoscrolls_MethodID_88, args: &__args, locals: &__locals )
    }

    open func setAutoscrolls( _ _autoscrolls: Bool ) {
        setAutoscrolls( autoscrolls: _autoscrolls )
    }

    /// public void javax.swing.JComponent.setBackground(java.awt.Color)

    private static var setBackground_MethodID_89: jmethodID?

    open func setBackground( bg: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: bg, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &JComponent.setBackground_MethodID_89, args: &__args, locals: &__locals )
    }

    override open func setBackground( _ _bg: java_awt.Color? ) {
        setBackground( bg: _bg )
    }

    /// public void javax.swing.JComponent.setBorder(javax.swing.border.Border)

    private static var setBorder_MethodID_90: jmethodID?

    open func setBorder( border: Border? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: border, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBorder", methodSig: "(Ljavax/swing/border/Border;)V", methodCache: &JComponent.setBorder_MethodID_90, args: &__args, locals: &__locals )
    }

    open func setBorder( _ _border: Border? ) {
        setBorder( border: _border )
    }

    /// public void javax.swing.JComponent.setComponentPopupMenu(javax.swing.JPopupMenu)

    private static var setComponentPopupMenu_MethodID_91: jmethodID?

    open func setComponentPopupMenu( popup: JPopupMenu? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: popup, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setComponentPopupMenu", methodSig: "(Ljavax/swing/JPopupMenu;)V", methodCache: &JComponent.setComponentPopupMenu_MethodID_91, args: &__args, locals: &__locals )
    }

    open func setComponentPopupMenu( _ _popup: JPopupMenu? ) {
        setComponentPopupMenu( popup: _popup )
    }

    /// void javax.swing.JComponent.setCreatedDoubleBuffer(boolean)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.setDebugGraphicsOptions(int)

    private static var setDebugGraphicsOptions_MethodID_92: jmethodID?

    open func setDebugGraphicsOptions( debugOptions: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(debugOptions) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDebugGraphicsOptions", methodSig: "(I)V", methodCache: &JComponent.setDebugGraphicsOptions_MethodID_92, args: &__args, locals: &__locals )
    }

    open func setDebugGraphicsOptions( _ _debugOptions: Int ) {
        setDebugGraphicsOptions( debugOptions: _debugOptions )
    }

    /// public void javax.swing.JComponent.setDoubleBuffered(boolean)

    private static var setDoubleBuffered_MethodID_93: jmethodID?

    open func setDoubleBuffered( aFlag: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(aFlag ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDoubleBuffered", methodSig: "(Z)V", methodCache: &JComponent.setDoubleBuffered_MethodID_93, args: &__args, locals: &__locals )
    }

    open func setDoubleBuffered( _ _aFlag: Bool ) {
        setDoubleBuffered( aFlag: _aFlag )
    }

    /// java.lang.Object javax.swing.JComponent.setDropLocation(javax.swing.TransferHandler$DropLocation,java.lang.Object,boolean)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.setEnabled(boolean)

    private static var setEnabled_MethodID_94: jmethodID?

    open func setEnabled( enabled: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(enabled ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &JComponent.setEnabled_MethodID_94, args: &__args, locals: &__locals )
    }

    override open func setEnabled( _ _enabled: Bool ) {
        setEnabled( enabled: _enabled )
    }

    /// private void javax.swing.JComponent.setFlag(int,boolean)

    /// public void javax.swing.JComponent.setFocusTraversalKeys(int,java.util.Set)

    private static var setFocusTraversalKeys_MethodID_95: jmethodID?

    open func setFocusTraversalKeys( id: Int, keystrokes: java_swift.JavaSet? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(id) )
        __args[1] = JNIType.toJava( value: keystrokes, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusTraversalKeys", methodSig: "(ILjava/util/Set;)V", methodCache: &JComponent.setFocusTraversalKeys_MethodID_95, args: &__args, locals: &__locals )
    }

    override open func setFocusTraversalKeys( _ _id: Int, _ _keystrokes: java_swift.JavaSet? ) {
        setFocusTraversalKeys( id: _id, keystrokes: _keystrokes )
    }

    /// public void javax.swing.JComponent.setFont(java.awt.Font)

    private static var setFont_MethodID_96: jmethodID?

    open func setFont( font: java_awt.Font? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: font, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &JComponent.setFont_MethodID_96, args: &__args, locals: &__locals )
    }

    override open func setFont( _ _font: java_awt.Font? ) {
        setFont( font: _font )
    }

    /// public void javax.swing.JComponent.setForeground(java.awt.Color)

    private static var setForeground_MethodID_97: jmethodID?

    open func setForeground( fg: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: fg, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &JComponent.setForeground_MethodID_97, args: &__args, locals: &__locals )
    }

    override open func setForeground( _ _fg: java_awt.Color? ) {
        setForeground( fg: _fg )
    }

    /// public void javax.swing.JComponent.setInheritsPopupMenu(boolean)

    private static var setInheritsPopupMenu_MethodID_98: jmethodID?

    open func setInheritsPopupMenu( value: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(value ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInheritsPopupMenu", methodSig: "(Z)V", methodCache: &JComponent.setInheritsPopupMenu_MethodID_98, args: &__args, locals: &__locals )
    }

    open func setInheritsPopupMenu( _ _value: Bool ) {
        setInheritsPopupMenu( value: _value )
    }

    /// public final void javax.swing.JComponent.setInputMap(int,javax.swing.InputMap)

    private static var setInputMap_MethodID_99: jmethodID?

    open func setInputMap( condition: Int, map: InputMap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(condition) )
        __args[1] = JNIType.toJava( value: map, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInputMap", methodSig: "(ILjavax/swing/InputMap;)V", methodCache: &JComponent.setInputMap_MethodID_99, args: &__args, locals: &__locals )
    }

    open func setInputMap( _ _condition: Int, _ _map: InputMap? ) {
        setInputMap( condition: _condition, map: _map )
    }

    /// public void javax.swing.JComponent.setInputVerifier(javax.swing.InputVerifier)

    private static var setInputVerifier_MethodID_100: jmethodID?

    open func setInputVerifier( inputVerifier: InputVerifier? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: inputVerifier, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInputVerifier", methodSig: "(Ljavax/swing/InputVerifier;)V", methodCache: &JComponent.setInputVerifier_MethodID_100, args: &__args, locals: &__locals )
    }

    open func setInputVerifier( _ _inputVerifier: InputVerifier? ) {
        setInputVerifier( inputVerifier: _inputVerifier )
    }

    /// public void javax.swing.JComponent.setMaximumSize(java.awt.Dimension)

    private static var setMaximumSize_MethodID_101: jmethodID?

    open func setMaximumSize( maximumSize: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: maximumSize, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMaximumSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JComponent.setMaximumSize_MethodID_101, args: &__args, locals: &__locals )
    }

    override open func setMaximumSize( _ _maximumSize: java_awt.Dimension? ) {
        setMaximumSize( maximumSize: _maximumSize )
    }

    /// public void javax.swing.JComponent.setMinimumSize(java.awt.Dimension)

    private static var setMinimumSize_MethodID_102: jmethodID?

    open func setMinimumSize( minimumSize: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: minimumSize, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMinimumSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JComponent.setMinimumSize_MethodID_102, args: &__args, locals: &__locals )
    }

    override open func setMinimumSize( _ _minimumSize: java_awt.Dimension? ) {
        setMinimumSize( minimumSize: _minimumSize )
    }

    /// public void javax.swing.JComponent.setNextFocusableComponent(java.awt.Component)

    private static var setNextFocusableComponent_MethodID_103: jmethodID?

    open func setNextFocusableComponent( aComponent: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: aComponent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNextFocusableComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &JComponent.setNextFocusableComponent_MethodID_103, args: &__args, locals: &__locals )
    }

    open func setNextFocusableComponent( _ _aComponent: java_awt.Component? ) {
        setNextFocusableComponent( aComponent: _aComponent )
    }

    /// public void javax.swing.JComponent.setOpaque(boolean)

    private static var setOpaque_MethodID_104: jmethodID?

    open func setOpaque( isOpaque: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(isOpaque ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpaque", methodSig: "(Z)V", methodCache: &JComponent.setOpaque_MethodID_104, args: &__args, locals: &__locals )
    }

    open func setOpaque( _ _isOpaque: Bool ) {
        setOpaque( isOpaque: _isOpaque )
    }

    /// void javax.swing.JComponent.setPaintingChild(java.awt.Component)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.setPreferredSize(java.awt.Dimension)

    private static var setPreferredSize_MethodID_105: jmethodID?

    open func setPreferredSize( preferredSize: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: preferredSize, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPreferredSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JComponent.setPreferredSize_MethodID_105, args: &__args, locals: &__locals )
    }

    override open func setPreferredSize( _ _preferredSize: java_awt.Dimension? ) {
        setPreferredSize( preferredSize: _preferredSize )
    }

    /// public void javax.swing.JComponent.setRequestFocusEnabled(boolean)

    private static var setRequestFocusEnabled_MethodID_106: jmethodID?

    open func setRequestFocusEnabled( requestFocusEnabled: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(requestFocusEnabled ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setRequestFocusEnabled", methodSig: "(Z)V", methodCache: &JComponent.setRequestFocusEnabled_MethodID_106, args: &__args, locals: &__locals )
    }

    open func setRequestFocusEnabled( _ _requestFocusEnabled: Bool ) {
        setRequestFocusEnabled( requestFocusEnabled: _requestFocusEnabled )
    }

    /// public void javax.swing.JComponent.setToolTipText(java.lang.String)

    private static var setToolTipText_MethodID_107: jmethodID?

    open func setToolTipText( text: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: text, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setToolTipText", methodSig: "(Ljava/lang/String;)V", methodCache: &JComponent.setToolTipText_MethodID_107, args: &__args, locals: &__locals )
    }

    open func setToolTipText( _ _text: String? ) {
        setToolTipText( text: _text )
    }

    /// public void javax.swing.JComponent.setTransferHandler(javax.swing.TransferHandler)

    private static var setTransferHandler_MethodID_108: jmethodID?

    open func setTransferHandler( newHandler: TransferHandler? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newHandler, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTransferHandler", methodSig: "(Ljavax/swing/TransferHandler;)V", methodCache: &JComponent.setTransferHandler_MethodID_108, args: &__args, locals: &__locals )
    }

    open func setTransferHandler( _ _newHandler: TransferHandler? ) {
        setTransferHandler( newHandler: _newHandler )
    }

    /// protected void javax.swing.JComponent.setUI(javax.swing.plaf.ComponentUI)

    private static var setUI_MethodID_109: jmethodID?

    open func setUI( newUI: ComponentUI? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newUI, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUI", methodSig: "(Ljavax/swing/plaf/ComponentUI;)V", methodCache: &JComponent.setUI_MethodID_109, args: &__args, locals: &__locals )
    }

    open func setUI( _ _newUI: ComponentUI? ) {
        setUI( newUI: _newUI )
    }

    /// void javax.swing.JComponent.setUIProperty(java.lang.String,java.lang.Object)

    // Skipping method: true false false false false 

    /// public void javax.swing.JComponent.setVerifyInputWhenFocusTarget(boolean)

    private static var setVerifyInputWhenFocusTarget_MethodID_110: jmethodID?

    open func setVerifyInputWhenFocusTarget( verifyInputWhenFocusTarget: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(verifyInputWhenFocusTarget ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVerifyInputWhenFocusTarget", methodSig: "(Z)V", methodCache: &JComponent.setVerifyInputWhenFocusTarget_MethodID_110, args: &__args, locals: &__locals )
    }

    open func setVerifyInputWhenFocusTarget( _ _verifyInputWhenFocusTarget: Bool ) {
        setVerifyInputWhenFocusTarget( verifyInputWhenFocusTarget: _verifyInputWhenFocusTarget )
    }

    /// public void javax.swing.JComponent.setVisible(boolean)

    private static var setVisible_MethodID_111: jmethodID?

    open func setVisible( aFlag: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(aFlag ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &JComponent.setVisible_MethodID_111, args: &__args, locals: &__locals )
    }

    override open func setVisible( _ _aFlag: Bool ) {
        setVisible( aFlag: _aFlag )
    }

    /// int javax.swing.JComponent.shouldDebugGraphics()

    // Skipping method: true false false false false 

    /// void javax.swing.JComponent.superProcessMouseMotionEvent(java.awt.event.MouseEvent)

    // Skipping method: true false false false false 

    /// private void javax.swing.JComponent.uninstallUIAndProperties()

    /// public void javax.swing.JComponent.unregisterKeyboardAction(javax.swing.KeyStroke)

    private static var unregisterKeyboardAction_MethodID_112: jmethodID?

    open func unregisterKeyboardAction( aKeyStroke: KeyStroke? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: aKeyStroke, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "unregisterKeyboardAction", methodSig: "(Ljavax/swing/KeyStroke;)V", methodCache: &JComponent.unregisterKeyboardAction_MethodID_112, args: &__args, locals: &__locals )
    }

    open func unregisterKeyboardAction( _ _aKeyStroke: KeyStroke? ) {
        unregisterKeyboardAction( aKeyStroke: _aKeyStroke )
    }

    /// private void javax.swing.JComponent.unregisterWithKeyboardManager(javax.swing.KeyStroke)

    /// private void javax.swing.JComponent.unregisterWithKeyboardManager()

    /// public void javax.swing.JComponent.update(java.awt.Graphics)

    private static var update_MethodID_113: jmethodID?

    open func update( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "update", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JComponent.update_MethodID_113, args: &__args, locals: &__locals )
    }

    override open func update( _ _g: java_awt.Graphics? ) {
        update( g: _g )
    }

    /// public void javax.swing.JComponent.updateUI()

    private static var updateUI_MethodID_114: jmethodID?

    open func updateUI() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "updateUI", methodSig: "()V", methodCache: &JComponent.updateUI_MethodID_114, args: &__args, locals: &__locals )
    }


    /// private void javax.swing.JComponent.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

