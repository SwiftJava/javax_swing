
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.StyleSheet$BoxPainter ///

open class StyleSheet_BoxPainter: java_swift.JavaObject, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var StyleSheet_BoxPainterJNIClass: jclass?

    /// java.awt.Color javax.swing.text.html.StyleSheet$BoxPainter.bg

    // Skipping field: true false false false false false 

    /// javax.swing.text.html.StyleSheet$BackgroundImagePainter javax.swing.text.html.StyleSheet$BoxPainter.bgPainter

    // Skipping field: true false false false false false 

    /// java.awt.Insets javax.swing.text.html.StyleSheet$BoxPainter.binsets

    // Skipping field: true false false false false false 

    /// javax.swing.border.Border javax.swing.text.html.StyleSheet$BoxPainter.border

    // Skipping field: true false false false false false 

    /// float javax.swing.text.html.StyleSheet$BoxPainter.bottomMargin

    // Skipping field: true false false false false false 

    /// javax.swing.text.html.CSS javax.swing.text.html.StyleSheet$BoxPainter.css

    // Skipping field: true false false false false false 

    /// float javax.swing.text.html.StyleSheet$BoxPainter.leftMargin

    // Skipping field: true false false false false false 

    /// short javax.swing.text.html.StyleSheet$BoxPainter.marginFlags

    // Skipping field: true false false false false false 

    /// float javax.swing.text.html.StyleSheet$BoxPainter.rightMargin

    // Skipping field: true false false false false false 

    /// javax.swing.text.html.StyleSheet javax.swing.text.html.StyleSheet$BoxPainter.ss

    // Skipping field: true false false false false false 

    /// float javax.swing.text.html.StyleSheet$BoxPainter.topMargin

    // Skipping field: true false false false false false 

    /// javax.swing.text.html.StyleSheet$BoxPainter(javax.swing.text.AttributeSet,javax.swing.text.html.CSS,javax.swing.text.html.StyleSheet)

    // Skipping init: true false false 

    /// static boolean javax.swing.text.html.StyleSheet$BoxPainter.isLeftToRight(javax.swing.text.View)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.text.html.StyleSheet$BoxPainter.isOrientationAware(javax.swing.text.View)

    // Skipping method: true false false false false 

    /// javax.swing.border.Border javax.swing.text.html.StyleSheet$BoxPainter.getBorder(javax.swing.text.AttributeSet)

    // Skipping method: true false false false false 

    /// java.awt.Color javax.swing.text.html.StyleSheet$BoxPainter.getBorderColor(javax.swing.text.AttributeSet)

    // Skipping method: true false false false false 

    /// public float javax.swing.text.html.StyleSheet$BoxPainter.getInset(int,javax.swing.text.View)

    private static var getInset_MethodID_1: jmethodID?

    open func getInset( side: Int, v: View? ) -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(side) )
        __args[1] = JNIType.toJava( value: v, locals: &__locals )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getInset", methodSig: "(ILjavax/swing/text/View;)F", methodCache: &StyleSheet_BoxPainter.getInset_MethodID_1, args: &__args, locals: &__locals )
        return __return
    }

    open func getInset( _ _side: Int, _ _v: View? ) -> Float {
        return getInset( side: _side, v: _v )
    }

    /// float javax.swing.text.html.StyleSheet$BoxPainter.getLength(javax.swing.text.html.CSS$Attribute,javax.swing.text.AttributeSet)

    // Skipping method: true false false false false 

    /// float javax.swing.text.html.StyleSheet$BoxPainter.getOrientationMargin(javax.swing.text.html.StyleSheet$BoxPainter$HorizontalMargin,float,javax.swing.text.AttributeSet,boolean)

    // Skipping method: true false false false false 

    /// public void javax.swing.text.html.StyleSheet$BoxPainter.paint(java.awt.Graphics,float,float,float,float,javax.swing.text.View)

    private static var paint_MethodID_2: jmethodID?

    open func paint( g: java_awt.Graphics?, x: Float, y: Float, w: Float, h: Float, v: View? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        __args[1] = jvalue( f: x )
        __args[2] = jvalue( f: y )
        __args[3] = jvalue( f: w )
        __args[4] = jvalue( f: h )
        __args[5] = JNIType.toJava( value: v, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljava/awt/Graphics;FFFFLjavax/swing/text/View;)V", methodCache: &StyleSheet_BoxPainter.paint_MethodID_2, args: &__args, locals: &__locals )
    }

    open func paint( _ _g: java_awt.Graphics?, _ _x: Float, _ _y: Float, _ _w: Float, _ _h: Float, _ _v: View? ) {
        paint( g: _g, x: _x, y: _y, w: _w, h: _h, v: _v )
    }

}

