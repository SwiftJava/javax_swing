
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.synth.SynthSliderUI ///

open class SynthSliderUI: BasicSliderUI, /* interface java.beans.PropertyChangeListener */ UnavailableProtocol, SynthUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var SynthSliderUIJNIClass: jclass?

    /// private java.awt.Dimension javax.swing.plaf.synth.SynthSliderUI.lastSize

    /// private boolean javax.swing.plaf.synth.SynthSliderUI.paintValue

    /// private javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthSliderUI.sliderThumbStyle

    /// private javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthSliderUI.sliderTrackStyle

    /// private javax.swing.plaf.synth.SynthStyle javax.swing.plaf.synth.SynthSliderUI.style

    /// private transient boolean javax.swing.plaf.synth.SynthSliderUI.thumbActive

    /// private int javax.swing.plaf.synth.SynthSliderUI.thumbHeight

    /// private transient boolean javax.swing.plaf.synth.SynthSliderUI.thumbPressed

    /// private int javax.swing.plaf.synth.SynthSliderUI.thumbWidth

    /// private int javax.swing.plaf.synth.SynthSliderUI.trackBorder

    /// private int javax.swing.plaf.synth.SynthSliderUI.trackHeight

    /// private java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.valueRect

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.MAX_SCROLL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.MIN_SCROLL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.NEGATIVE_SCROLL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.plaf.basic.BasicSliderUI.POSITIVE_SCROLL

    // Skipping field: false true false false false false 

    /// private static final javax.swing.plaf.basic.BasicSliderUI$Actions javax.swing.plaf.basic.BasicSliderUI.SHARED_ACTION

    /// private static java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.unionRect

    /// protected javax.swing.event.ChangeListener javax.swing.plaf.basic.BasicSliderUI.changeListener

    private static var changeListener_FieldID: jfieldID?

    override open var changeListener: ChangeListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &SynthSliderUI.changeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ChangeListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "changeListener", fieldType: "Ljavax/swing/event/ChangeListener;", fieldCache: &SynthSliderUI.changeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.plaf.basic.BasicSliderUI.checkedLabelBaselines

    /// protected java.awt.event.ComponentListener javax.swing.plaf.basic.BasicSliderUI.componentListener

    private static var componentListener_FieldID: jfieldID?

    override open var componentListener: java_awt.ComponentListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "componentListener", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &SynthSliderUI.componentListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.ComponentListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "componentListener", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &SynthSliderUI.componentListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.contentRect

    private static var contentRect_FieldID: jfieldID?

    override open var contentRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "contentRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.contentRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "contentRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.contentRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.focusColor

    /// protected java.awt.Insets javax.swing.plaf.basic.BasicSliderUI.focusInsets

    private static var focusInsets_FieldID: jfieldID?

    override open var focusInsets: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "focusInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &SynthSliderUI.focusInsets_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusInsets", fieldType: "Ljava/awt/Insets;", fieldCache: &SynthSliderUI.focusInsets_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.event.FocusListener javax.swing.plaf.basic.BasicSliderUI.focusListener

    private static var focusListener_FieldID: jfieldID?

    override open var focusListener: java_awt.FocusListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &SynthSliderUI.focusListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.FocusListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusListener", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &SynthSliderUI.focusListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.focusRect

    private static var focusRect_FieldID: jfieldID?

    override open var focusRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "focusRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.focusRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "focusRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.focusRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.plaf.basic.BasicSliderUI$Handler javax.swing.plaf.basic.BasicSliderUI.handler

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.highlightColor

    /// protected java.awt.Insets javax.swing.plaf.basic.BasicSliderUI.insetCache

    private static var insetCache_FieldID: jfieldID?

    override open var insetCache: java_awt.Insets! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "insetCache", fieldType: "Ljava/awt/Insets;", fieldCache: &SynthSliderUI.insetCache_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Insets( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "insetCache", fieldType: "Ljava/awt/Insets;", fieldCache: &SynthSliderUI.insetCache_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient boolean javax.swing.plaf.basic.BasicSliderUI.isDragging

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.labelRect

    private static var labelRect_FieldID: jfieldID?

    override open var labelRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "labelRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.labelRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "labelRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.labelRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private int javax.swing.plaf.basic.BasicSliderUI.lastValue

    /// protected boolean javax.swing.plaf.basic.BasicSliderUI.leftToRightCache

    private static var leftToRightCache_FieldID: jfieldID?

    override open var leftToRightCache: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "leftToRightCache", fieldType: "Z", fieldCache: &SynthSliderUI.leftToRightCache_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "leftToRightCache", fieldType: "Z", fieldCache: &SynthSliderUI.leftToRightCache_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected java.beans.PropertyChangeListener javax.swing.plaf.basic.BasicSliderUI.propertyChangeListener

    private static var propertyChangeListener_FieldID: jfieldID?

    override open var propertyChangeListener: /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &SynthSliderUI.propertyChangeListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "propertyChangeListener", fieldType: "Ljava/beans/PropertyChangeListener;", fieldCache: &SynthSliderUI.propertyChangeListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.plaf.basic.BasicSliderUI.sameLabelBaselines

    /// protected javax.swing.plaf.basic.BasicSliderUI$ScrollListener javax.swing.plaf.basic.BasicSliderUI.scrollListener

    private static var scrollListener_FieldID: jfieldID?

    override open var scrollListener: BasicSliderUI_ScrollListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "scrollListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$ScrollListener;", fieldCache: &SynthSliderUI.scrollListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? BasicSliderUI_ScrollListener( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "scrollListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$ScrollListener;", fieldCache: &SynthSliderUI.scrollListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Timer javax.swing.plaf.basic.BasicSliderUI.scrollTimer

    private static var scrollTimer_FieldID: jfieldID?

    override open var scrollTimer: Timer! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "scrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &SynthSliderUI.scrollTimer_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? Timer( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "scrollTimer", fieldType: "Ljavax/swing/Timer;", fieldCache: &SynthSliderUI.scrollTimer_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.awt.Color javax.swing.plaf.basic.BasicSliderUI.shadowColor

    /// protected javax.swing.JSlider javax.swing.plaf.basic.BasicSliderUI.slider

    private static var slider_FieldID: jfieldID?

    override open var slider: JSlider! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "slider", fieldType: "Ljavax/swing/JSlider;", fieldCache: &SynthSliderUI.slider_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JSlider( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "slider", fieldType: "Ljavax/swing/JSlider;", fieldCache: &SynthSliderUI.slider_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.thumbRect

    private static var thumbRect_FieldID: jfieldID?

    override open var thumbRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "thumbRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.thumbRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "thumbRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.thumbRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.tickRect

    private static var tickRect_FieldID: jfieldID?

    override open var tickRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tickRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.tickRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tickRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.tickRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.plaf.basic.BasicSliderUI.trackBuffer

    private static var trackBuffer_FieldID: jfieldID?

    override open var trackBuffer: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "trackBuffer", fieldType: "I", fieldCache: &SynthSliderUI.trackBuffer_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "trackBuffer", fieldType: "I", fieldCache: &SynthSliderUI.trackBuffer_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected javax.swing.plaf.basic.BasicSliderUI$TrackListener javax.swing.plaf.basic.BasicSliderUI.trackListener

    private static var trackListener_FieldID: jfieldID?

    override open var trackListener: BasicSliderUI_TrackListener! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "trackListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", fieldCache: &SynthSliderUI.trackListener_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? BasicSliderUI_TrackListener( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "trackListener", fieldType: "Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", fieldCache: &SynthSliderUI.trackListener_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Rectangle javax.swing.plaf.basic.BasicSliderUI.trackRect

    private static var trackRect_FieldID: jfieldID?

    override open var trackRect: java_awt.Rectangle! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "trackRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.trackRect_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Rectangle( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "trackRect", fieldType: "Ljava/awt/Rectangle;", fieldCache: &SynthSliderUI.trackRect_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.DEFAULT

    private static var DEFAULT_FieldID: jfieldID?

    open static var DEFAULT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DEFAULT", fieldType: "I", fieldCache: &DEFAULT_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.DISABLED

    private static var DISABLED_FieldID: jfieldID?

    open static var DISABLED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "DISABLED", fieldType: "I", fieldCache: &DISABLED_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.ENABLED

    private static var ENABLED_FieldID: jfieldID?

    open static var ENABLED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "ENABLED", fieldType: "I", fieldCache: &ENABLED_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.FOCUSED

    private static var FOCUSED_FieldID: jfieldID?

    open static var FOCUSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "FOCUSED", fieldType: "I", fieldCache: &FOCUSED_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.MOUSE_OVER

    private static var MOUSE_OVER_FieldID: jfieldID?

    open static var MOUSE_OVER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "MOUSE_OVER", fieldType: "I", fieldCache: &MOUSE_OVER_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.PRESSED

    private static var PRESSED_FieldID: jfieldID?

    open static var PRESSED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PRESSED", fieldType: "I", fieldCache: &PRESSED_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.plaf.synth.SynthConstants.SELECTED

    private static var SELECTED_FieldID: jfieldID?

    open static var SELECTED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "SELECTED", fieldType: "I", fieldCache: &SELECTED_FieldID, className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass )
            return Int(__value)
        }
    }

    /// protected javax.swing.plaf.synth.SynthSliderUI(javax.swing.JSlider)

    private static var new_MethodID_1: jmethodID?

    public convenience init( c: JSlider? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUI.SynthSliderUIJNIClass, methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &SynthSliderUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _c: JSlider? ) {
        self.init( c: _c )
    }

    /// static void javax.swing.plaf.synth.SynthSliderUI.access$100(javax.swing.plaf.synth.SynthSliderUI,boolean)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$1000(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$1100(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$1200(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static int javax.swing.plaf.synth.SynthSliderUI.access$1300(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$1400(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$1500(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static int javax.swing.plaf.synth.SynthSliderUI.access$1600(javax.swing.plaf.synth.SynthSliderUI,int)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.plaf.synth.SynthSliderUI.access$1700(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$1800(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$1900(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$200(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$2000(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$2100(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$2200(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$2300(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$2400(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$2500(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.plaf.synth.SynthSliderUI.access$2600(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$2700(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$2800(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$2900(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static void javax.swing.plaf.synth.SynthSliderUI.access$300(javax.swing.plaf.synth.SynthSliderUI,boolean)

    // Skipping method: true false false false false 

    /// static void javax.swing.plaf.synth.SynthSliderUI.access$3000(javax.swing.plaf.synth.SynthSliderUI,int,int)

    // Skipping method: true false false false false 

    /// static void javax.swing.plaf.synth.SynthSliderUI.access$400(javax.swing.plaf.synth.SynthSliderUI,int,int,boolean)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$500(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.plaf.synth.SynthSliderUI.access$600(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$700(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static javax.swing.JSlider javax.swing.plaf.synth.SynthSliderUI.access$800(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// static java.awt.Rectangle javax.swing.plaf.synth.SynthSliderUI.access$900(javax.swing.plaf.synth.SynthSliderUI)

    // Skipping method: true false false false false 

    /// public static javax.swing.plaf.ComponentUI javax.swing.plaf.synth.SynthSliderUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    override open class func createUI( c: JComponent? ) -> ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/plaf/synth/SynthSliderUI", classCache: &SynthSliderUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _c: JComponent? ) -> ComponentUI! {
        return createUI( c: _c )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.calculateGeometry()

    private static var calculateGeometry_MethodID_3: jmethodID?

    override open func calculateGeometry() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "calculateGeometry", methodSig: "()V", methodCache: &SynthSliderUI.calculateGeometry_MethodID_3, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.synth.SynthSliderUI.calculateThumbLocation()

    private static var calculateThumbLocation_MethodID_4: jmethodID?

    override open func calculateThumbLocation() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "calculateThumbLocation", methodSig: "()V", methodCache: &SynthSliderUI.calculateThumbLocation_MethodID_4, args: &__args, locals: &__locals )
    }


    /// protected javax.swing.plaf.basic.BasicSliderUI$TrackListener javax.swing.plaf.synth.SynthSliderUI.createTrackListener(javax.swing.JSlider)

    private static var createTrackListener_MethodID_5: jmethodID?

    open func createTrackListener( s: JSlider? ) -> BasicSliderUI_TrackListener! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createTrackListener", methodSig: "(Ljavax/swing/JSlider;)Ljavax/swing/plaf/basic/BasicSliderUI$TrackListener;", methodCache: &SynthSliderUI.createTrackListener_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? BasicSliderUI_TrackListener( javaObject: __return ) : nil
    }

    override open func createTrackListener( _ _s: JSlider? ) -> BasicSliderUI_TrackListener! {
        return createTrackListener( s: _s )
    }

    /// public int javax.swing.plaf.synth.SynthSliderUI.getBaseline(javax.swing.JComponent,int,int)

    // Skipping method: false true false false false 

    /// private int javax.swing.plaf.synth.SynthSliderUI.getComponentState(javax.swing.JComponent,javax.swing.plaf.synth.Region)

    /// public javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent)

    private static var getContext_MethodID_6: jmethodID?

    open func getContext( c: JComponent? ) -> SynthContext! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getContext", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/synth/SynthContext;", methodCache: &SynthSliderUI.getContext_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SynthContext( javaObject: __return ) : nil
    }

    open func getContext( _ _c: JComponent? ) -> SynthContext! {
        return getContext( c: _c )
    }

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent,int)

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region)

    /// private javax.swing.plaf.synth.SynthContext javax.swing.plaf.synth.SynthSliderUI.getContext(javax.swing.JComponent,javax.swing.plaf.synth.Region,int)

    /// public java.awt.Dimension javax.swing.plaf.synth.SynthSliderUI.getMinimumSize(javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// private int javax.swing.plaf.synth.SynthSliderUI.getPadForLabel(int)

    /// public java.awt.Dimension javax.swing.plaf.synth.SynthSliderUI.getPreferredSize(javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// protected java.awt.Dimension javax.swing.plaf.synth.SynthSliderUI.getThumbSize()

    private static var getThumbSize_MethodID_7: jmethodID?

    override open func getThumbSize() -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getThumbSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &SynthSliderUI.getThumbSize_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }


    /// protected void javax.swing.plaf.synth.SynthSliderUI.installDefaults(javax.swing.JSlider)

    private static var installDefaults_MethodID_8: jmethodID?

    override open func installDefaults( slider: JSlider? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: slider, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &SynthSliderUI.installDefaults_MethodID_8, args: &__args, locals: &__locals )
    }

    override open func installDefaults( _ _slider: JSlider? ) {
        installDefaults( slider: _slider )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.installListeners(javax.swing.JSlider)

    private static var installListeners_MethodID_9: jmethodID?

    override open func installListeners( slider: JSlider? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: slider, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &SynthSliderUI.installListeners_MethodID_9, args: &__args, locals: &__locals )
    }

    override open func installListeners( _ _slider: JSlider? ) {
        installListeners( slider: _slider )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.layout()

    private static var layout_MethodID_10: jmethodID?

    open func layout() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layout", methodSig: "()V", methodCache: &SynthSliderUI.layout_MethodID_10, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.synth.SynthSliderUI.paint(javax.swing.plaf.synth.SynthContext,java.awt.Graphics)

    private static var paint_MethodID_11: jmethodID?

    open func paint( context: SynthContext?, g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: context, locals: &__locals )
        __args[1] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paint", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;)V", methodCache: &SynthSliderUI.paint_MethodID_11, args: &__args, locals: &__locals )
    }

    open func paint( _ _context: SynthContext?, _ _g: java_awt.Graphics? ) {
        paint( context: _context, g: _g )
    }

    /// public void javax.swing.plaf.synth.SynthSliderUI.paint(java.awt.Graphics,javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// public void javax.swing.plaf.synth.SynthSliderUI.paintBorder(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,int,int,int,int)

    private static var paintBorder_MethodID_12: jmethodID?

    open func paintBorder( context: SynthContext?, g: java_awt.Graphics?, x: Int, y: Int, w: Int, h: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: context, locals: &__locals )
        __args[1] = JNIType.toJava( value: g, locals: &__locals )
        __args[2] = jvalue( i: jint(x) )
        __args[3] = jvalue( i: jint(y) )
        __args[4] = jvalue( i: jint(w) )
        __args[5] = jvalue( i: jint(h) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;IIII)V", methodCache: &SynthSliderUI.paintBorder_MethodID_12, args: &__args, locals: &__locals )
    }

    open func paintBorder( _ _context: SynthContext?, _ _g: java_awt.Graphics?, _ _x: Int, _ _y: Int, _ _w: Int, _ _h: Int ) {
        paintBorder( context: _context, g: _g, x: _x, y: _y, w: _w, h: _h )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.paintThumb(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)

    private static var paintThumb_MethodID_13: jmethodID?

    open func paintThumb( context: SynthContext?, g: java_awt.Graphics?, thumbBounds: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: context, locals: &__locals )
        __args[1] = JNIType.toJava( value: g, locals: &__locals )
        __args[2] = JNIType.toJava( value: thumbBounds, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintThumb", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;Ljava/awt/Rectangle;)V", methodCache: &SynthSliderUI.paintThumb_MethodID_13, args: &__args, locals: &__locals )
    }

    open func paintThumb( _ _context: SynthContext?, _ _g: java_awt.Graphics?, _ _thumbBounds: java_awt.Rectangle? ) {
        paintThumb( context: _context, g: _g, thumbBounds: _thumbBounds )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.paintTrack(javax.swing.plaf.synth.SynthContext,java.awt.Graphics,java.awt.Rectangle)

    private static var paintTrack_MethodID_14: jmethodID?

    open func paintTrack( context: SynthContext?, g: java_awt.Graphics?, trackBounds: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: context, locals: &__locals )
        __args[1] = JNIType.toJava( value: g, locals: &__locals )
        __args[2] = JNIType.toJava( value: trackBounds, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintTrack", methodSig: "(Ljavax/swing/plaf/synth/SynthContext;Ljava/awt/Graphics;Ljava/awt/Rectangle;)V", methodCache: &SynthSliderUI.paintTrack_MethodID_14, args: &__args, locals: &__locals )
    }

    open func paintTrack( _ _context: SynthContext?, _ _g: java_awt.Graphics?, _ _trackBounds: java_awt.Rectangle? ) {
        paintTrack( context: _context, g: _g, trackBounds: _trackBounds )
    }

    /// public void javax.swing.plaf.synth.SynthSliderUI.propertyChange(java.beans.PropertyChangeEvent)

    private static var propertyChange_MethodID_15: jmethodID?

    open func propertyChange( evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "propertyChange", methodSig: "(Ljava/beans/PropertyChangeEvent;)V", methodCache: &SynthSliderUI.propertyChange_MethodID_15, args: &__args, locals: &__locals )
    }

    open func propertyChange( _ _evt: /* class java.beans.PropertyChangeEvent */ UnavailableObject? ) {
        propertyChange( evt: _evt )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.recalculateIfInsetsChanged()

    private static var recalculateIfInsetsChanged_MethodID_16: jmethodID?

    override open func recalculateIfInsetsChanged() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "recalculateIfInsetsChanged", methodSig: "()V", methodCache: &SynthSliderUI.recalculateIfInsetsChanged_MethodID_16, args: &__args, locals: &__locals )
    }


    /// private void javax.swing.plaf.synth.SynthSliderUI.setThumbActive(boolean)

    /// public void javax.swing.plaf.synth.SynthSliderUI.setThumbLocation(int,int)

    // Skipping method: false true false false false 

    /// private void javax.swing.plaf.synth.SynthSliderUI.setThumbPressed(boolean)

    /// protected void javax.swing.plaf.synth.SynthSliderUI.uninstallDefaults(javax.swing.JSlider)

    private static var uninstallDefaults_MethodID_17: jmethodID?

    override open func uninstallDefaults( slider: JSlider? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: slider, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &SynthSliderUI.uninstallDefaults_MethodID_17, args: &__args, locals: &__locals )
    }

    override open func uninstallDefaults( _ _slider: JSlider? ) {
        uninstallDefaults( slider: _slider )
    }

    /// protected void javax.swing.plaf.synth.SynthSliderUI.uninstallListeners(javax.swing.JSlider)

    private static var uninstallListeners_MethodID_18: jmethodID?

    override open func uninstallListeners( slider: JSlider? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: slider, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "(Ljavax/swing/JSlider;)V", methodCache: &SynthSliderUI.uninstallListeners_MethodID_18, args: &__args, locals: &__locals )
    }

    override open func uninstallListeners( _ _slider: JSlider? ) {
        uninstallListeners( slider: _slider )
    }

    /// public void javax.swing.plaf.synth.SynthSliderUI.update(java.awt.Graphics,javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// private void javax.swing.plaf.synth.SynthSliderUI.updateStyle(javax.swing.JSlider)

    /// private void javax.swing.plaf.synth.SynthSliderUI.updateThumbState(int,int)

    /// private void javax.swing.plaf.synth.SynthSliderUI.updateThumbState(int,int,boolean)

    /// public int javax.swing.plaf.synth.SynthSliderUI.valueForXPosition(int)

    // Skipping method: false true false false false 

    /// public int javax.swing.plaf.synth.SynthSliderUI.valueForYPosition(int)

    // Skipping method: false true false false false 

    /// protected int javax.swing.plaf.synth.SynthSliderUI.xPositionForValue(int)

    private static var xPositionForValue_MethodID_19: jmethodID?

    override open func xPositionForValue( value: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(value) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "xPositionForValue", methodSig: "(I)I", methodCache: &SynthSliderUI.xPositionForValue_MethodID_19, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func xPositionForValue( _ _value: Int ) -> Int {
        return xPositionForValue( value: _value )
    }

    /// protected int javax.swing.plaf.synth.SynthSliderUI.yPositionForValue(int,int,int)

    private static var yPositionForValue_MethodID_20: jmethodID?

    override open func yPositionForValue( value: Int, trackY: Int, trackHeight: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = jvalue( i: jint(value) )
        __args[1] = jvalue( i: jint(trackY) )
        __args[2] = jvalue( i: jint(trackHeight) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "yPositionForValue", methodSig: "(III)I", methodCache: &SynthSliderUI.yPositionForValue_MethodID_20, args: &__args, locals: &__locals )
        return Int(__return)
    }

    override open func yPositionForValue( _ _value: Int, _ _trackY: Int, _ _trackHeight: Int ) -> Int {
        return yPositionForValue( value: _value, trackY: _trackY, trackHeight: _trackHeight )
    }

}

