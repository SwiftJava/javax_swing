
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.JComboBox$KeySelectionManager ///

public protocol JComboBox_KeySelectionManager: JavaProtocol {

    /// public abstract int javax.swing.JComboBox$KeySelectionManager.selectionForKey(char,javax.swing.ComboBoxModel)

    func selectionForKey( aKey: UInt16, aModel: ComboBoxModel? ) -> Int

}


open class JComboBox_KeySelectionManagerForward: JNIObjectForward, JComboBox_KeySelectionManager {

    private static var JComboBox_KeySelectionManagerJNIClass: jclass?

    /// public abstract int javax.swing.JComboBox$KeySelectionManager.selectionForKey(char,javax.swing.ComboBoxModel)

    private static var selectionForKey_MethodID_2: jmethodID?

    open func selectionForKey( aKey: UInt16, aModel: ComboBoxModel? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( c: aKey )
        __args[1] = JNIType.toJava( value: aModel, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "selectionForKey", methodSig: "(CLjavax/swing/ComboBoxModel;)I", methodCache: &JComboBox_KeySelectionManagerForward.selectionForKey_MethodID_2, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func selectionForKey( _ _aKey: UInt16, _ _aModel: ComboBoxModel? ) -> Int {
        return selectionForKey( aKey: _aKey, aModel: _aModel )
    }

}

private typealias JComboBox_KeySelectionManager_selectionForKey_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jchar, _: jobject? ) -> jint

private func JComboBox_KeySelectionManager_selectionForKey_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ aKey: jchar, _ aModel: jobject? ) -> jint {
    let __return = JComboBox_KeySelectionManagerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).selectionForKey( aKey: aKey, aModel: aModel != nil ? ComboBoxModelForward( javaObject: aModel ) : nil )
    var __locals = [jobject]()
    return JNI.check( jvalue( i: jint(__return) ).i, &__locals, removeLast: true )
}

fileprivate class JComboBox_KeySelectionManagerLocal_: JNILocalProxy<JComboBox_KeySelectionManager, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let JComboBox_KeySelectionManager_selectionForKey_0_thunk: JComboBox_KeySelectionManager_selectionForKey_0_type = JComboBox_KeySelectionManager_selectionForKey_0
        natives.append( JNINativeMethod( name: strdup("__selectionForKey"), signature: strdup("(JCLjavax/swing/ComboBoxModel;)I"), fnPtr: unsafeBitCast( JComboBox_KeySelectionManager_selectionForKey_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/JComboBox_KeySelectionManagerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension JComboBox_KeySelectionManager {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return JComboBox_KeySelectionManagerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class JComboBox_KeySelectionManagerBase: JComboBox_KeySelectionManager {

    public init() {}

    /// public abstract int javax.swing.JComboBox$KeySelectionManager.selectionForKey(char,javax.swing.ComboBoxModel)

    open func selectionForKey( aKey: UInt16, aModel: ComboBoxModel? ) -> Int /**/ {
        return 0
    }


}
