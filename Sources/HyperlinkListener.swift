
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.event.HyperlinkListener ///

public protocol HyperlinkListener: java_util.EventListener {

    /// public abstract void javax.swing.event.HyperlinkListener.hyperlinkUpdate(javax.swing.event.HyperlinkEvent)

    func hyperlinkUpdate( e: HyperlinkEvent? )

}


open class HyperlinkListenerForward: java_util.EventListenerForward, HyperlinkListener {

    private static var HyperlinkListenerJNIClass: jclass?

    /// public abstract void javax.swing.event.HyperlinkListener.hyperlinkUpdate(javax.swing.event.HyperlinkEvent)

    private static var hyperlinkUpdate_MethodID_2: jmethodID?

    open func hyperlinkUpdate( e: HyperlinkEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "hyperlinkUpdate", methodSig: "(Ljavax/swing/event/HyperlinkEvent;)V", methodCache: &HyperlinkListenerForward.hyperlinkUpdate_MethodID_2, args: &__args, locals: &__locals )
    }

    open func hyperlinkUpdate( _ _e: HyperlinkEvent? ) {
        hyperlinkUpdate( e: _e )
    }

}


private typealias HyperlinkListener_hyperlinkUpdate_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func HyperlinkListener_hyperlinkUpdate_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    HyperlinkListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).hyperlinkUpdate( e: e != nil ? HyperlinkEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

fileprivate class HyperlinkListenerLocal_: JNILocalProxy<HyperlinkListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let HyperlinkListener_hyperlinkUpdate_0_thunk: HyperlinkListener_hyperlinkUpdate_0_type = HyperlinkListener_hyperlinkUpdate_0
        natives.append( JNINativeMethod( name: strdup("__hyperlinkUpdate"), signature: strdup("(JLjavax/swing/event/HyperlinkEvent;)V"), fnPtr: unsafeBitCast( HyperlinkListener_hyperlinkUpdate_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/HyperlinkListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension HyperlinkListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return HyperlinkListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class HyperlinkListenerBase: HyperlinkListener {

    public init() {}

    /// public abstract void javax.swing.event.HyperlinkListener.hyperlinkUpdate(javax.swing.event.HyperlinkEvent)

    open func hyperlinkUpdate( e: HyperlinkEvent? ) /**/ {
    }

    open func hyperlinkUpdate( _ _e: HyperlinkEvent? ) /**/ {
        hyperlinkUpdate( e: _e )
    }

}
