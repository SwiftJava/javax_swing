
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JComponent$AccessibleJComponent ///

open class JComponent_AccessibleJComponent: /* java.awt.Container$AccessibleAWTContainer */ UnclassedObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JComponent_AccessibleJComponentJNIClass: jclass?

    /// private transient volatile int javax.swing.JComponent$AccessibleJComponent.propertyListenersCount

    /// protected java.awt.event.FocusListener javax.swing.JComponent$AccessibleJComponent.accessibleFocusHandler

    private static var accessibleFocusHandler_FieldID: jfieldID?

    open var accessibleFocusHandler: java_awt.FocusListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleFocusHandler", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleFocusHandler_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.FocusListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleFocusHandler", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleFocusHandler_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// final javax.swing.JComponent javax.swing.JComponent$AccessibleJComponent.this$0

    /// private static final long java.awt.Container$AccessibleAWTContainer.serialVersionUID

    /// private transient volatile int java.awt.Container$AccessibleAWTContainer.propertyListenersCount

    /// protected java.awt.event.ContainerListener java.awt.Container$AccessibleAWTContainer.accessibleContainerHandler

    private static var accessibleContainerHandler_FieldID: jfieldID?

    open var accessibleContainerHandler: java_awt.ContainerListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleContainerHandler", fieldType: "Ljava/awt/event/ContainerListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleContainerHandler_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.ContainerListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContainerHandler", fieldType: "Ljava/awt/event/ContainerListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleContainerHandler_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// final java.awt.Container java.awt.Container$AccessibleAWTContainer.this$0

    /// private static final long java.awt.Component$AccessibleAWTComponent.serialVersionUID

    /// private transient volatile int java.awt.Component$AccessibleAWTComponent.propertyListenersCount

    /// protected java.awt.event.ComponentListener java.awt.Component$AccessibleAWTComponent.accessibleAWTComponentHandler

    private static var accessibleAWTComponentHandler_FieldID: jfieldID?

    open var accessibleAWTComponentHandler: java_awt.ComponentListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleAWTComponentHandler", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleAWTComponentHandler_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.ComponentListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleAWTComponentHandler", fieldType: "Ljava/awt/event/ComponentListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleAWTComponentHandler_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.event.FocusListener java.awt.Component$AccessibleAWTComponent.accessibleAWTFocusHandler

    private static var accessibleAWTFocusHandler_FieldID: jfieldID?

    open var accessibleAWTFocusHandler: java_awt.FocusListener! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleAWTFocusHandler", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleAWTFocusHandler_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? java_awt.FocusListenerForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleAWTFocusHandler", fieldType: "Ljava/awt/event/FocusListener;", fieldCache: &JComponent_AccessibleJComponent.accessibleAWTFocusHandler_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// final java.awt.Component java.awt.Component$AccessibleAWTComponent.this$0

    /// private volatile sun.awt.AppContext javax.accessibility.AccessibleContext.targetAppContext

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_NAME_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_DESCRIPTION_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_STATE_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_VALUE_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_CARET_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_CHILD_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_CAPTION_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_SUMMARY_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_MODEL_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_HEADER_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_ACTION_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_PROPERTY

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED

    /// protected javax.accessibility.Accessible javax.accessibility.AccessibleContext.accessibleParent

    private static var accessibleParent_FieldID: jfieldID?

    open var accessibleParent: /* javax.accessibility.Accessible */ UnclassedProtocol! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleParent", fieldType: "Ljavax/accessibility/Accessible;", fieldCache: &JComponent_AccessibleJComponent.accessibleParent_FieldID, object: javaObject, locals: &__locals )
            return __value != nil ? /* javax.accessibility.Accessible */ UnclassedProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleParent", fieldType: "Ljavax/accessibility/Accessible;", fieldCache: &JComponent_AccessibleJComponent.accessibleParent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String javax.accessibility.AccessibleContext.accessibleName

    private static var accessibleName_FieldID: jfieldID?

    open var accessibleName: String! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleName", fieldType: "Ljava/lang/String;", fieldCache: &JComponent_AccessibleJComponent.accessibleName_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: String(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleName", fieldType: "Ljava/lang/String;", fieldCache: &JComponent_AccessibleJComponent.accessibleName_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String javax.accessibility.AccessibleContext.accessibleDescription

    private static var accessibleDescription_FieldID: jfieldID?

    open var accessibleDescription: String! {
        get {
            var __locals = [jobject]()
            let __value = JNIField.GetObjectField( fieldName: "accessibleDescription", fieldType: "Ljava/lang/String;", fieldCache: &JComponent_AccessibleJComponent.accessibleDescription_FieldID, object: javaObject, locals: &__locals )
            return JNIType.toSwift( type: String(), from: __value )
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleDescription", fieldType: "Ljava/lang/String;", fieldCache: &JComponent_AccessibleJComponent.accessibleDescription_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.beans.PropertyChangeSupport javax.accessibility.AccessibleContext.accessibleChangeSupport

    /// private javax.accessibility.AccessibleRelationSet javax.accessibility.AccessibleContext.relationSet

    /// private java.lang.Object javax.accessibility.AccessibleContext.nativeAXResource

    /// protected javax.swing.JComponent$AccessibleJComponent(javax.swing.JComponent)

    private static var new_MethodID_1: jmethodID?

    public convenience init( this_0: JComponent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: this_0 != nil ? this_0! as JNIObject : nil, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JComponent$AccessibleJComponent", classCache: &JComponent_AccessibleJComponent.JComponent_AccessibleJComponentJNIClass, methodSig: "(Ljavax/swing/JComponent;)V", methodCache: &JComponent_AccessibleJComponent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _this_0: JComponent? ) {
        self.init( this_0: _this_0 )
    }

    /// public boolean javax.swing.JComponent$AccessibleJComponent.contains(java.awt.Point)

    /// public java.awt.Point javax.swing.JComponent$AccessibleJComponent.getLocation()

    /// public java.awt.Dimension javax.swing.JComponent$AccessibleJComponent.getSize()

    /// public void javax.swing.JComponent$AccessibleJComponent.setSize(java.awt.Dimension)

    /// javax.accessibility.AccessibleExtendedComponent javax.swing.JComponent$AccessibleJComponent.getAccessibleExtendedComponent()

    /// public java.lang.String javax.swing.JComponent$AccessibleJComponent.getToolTipText()

    private static var getToolTipText_MethodID_2: jmethodID?

    open func getToolTipText() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipText", methodSig: "()Ljava/lang/String;", methodCache: &JComponent_AccessibleJComponent.getToolTipText_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public java.lang.String javax.swing.JComponent$AccessibleJComponent.getTitledBorderText()

    private static var getTitledBorderText_MethodID_3: jmethodID?

    open func getTitledBorderText() -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTitledBorderText", methodSig: "()Ljava/lang/String;", methodCache: &JComponent_AccessibleJComponent.getTitledBorderText_MethodID_3, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }


    /// public java.awt.Rectangle javax.swing.JComponent$AccessibleJComponent.getBounds()

    /// public java.util.Locale javax.swing.JComponent$AccessibleJComponent.getLocale()

    /// public boolean javax.swing.JComponent$AccessibleJComponent.isEnabled()

    /// public java.awt.Font javax.swing.JComponent$AccessibleJComponent.getFont()

    /// public java.awt.FontMetrics javax.swing.JComponent$AccessibleJComponent.getFontMetrics(java.awt.Font)

    /// public java.awt.Color javax.swing.JComponent$AccessibleJComponent.getBackground()

    /// public void javax.swing.JComponent$AccessibleJComponent.setBackground(java.awt.Color)

    /// public java.awt.Color javax.swing.JComponent$AccessibleJComponent.getForeground()

    /// public void javax.swing.JComponent$AccessibleJComponent.setForeground(java.awt.Color)

    /// public java.awt.Cursor javax.swing.JComponent$AccessibleJComponent.getCursor()

    /// public void javax.swing.JComponent$AccessibleJComponent.setCursor(java.awt.Cursor)

    /// public void javax.swing.JComponent$AccessibleJComponent.setFont(java.awt.Font)

    /// public void javax.swing.JComponent$AccessibleJComponent.setEnabled(boolean)

    /// public boolean javax.swing.JComponent$AccessibleJComponent.isVisible()

    /// public void javax.swing.JComponent$AccessibleJComponent.setVisible(boolean)

    /// public boolean javax.swing.JComponent$AccessibleJComponent.isShowing()

    /// public java.awt.Point javax.swing.JComponent$AccessibleJComponent.getLocationOnScreen()

    /// public void javax.swing.JComponent$AccessibleJComponent.setLocation(java.awt.Point)

    /// public void javax.swing.JComponent$AccessibleJComponent.setBounds(java.awt.Rectangle)

    /// public javax.accessibility.Accessible javax.swing.JComponent$AccessibleJComponent.getAccessibleAt(java.awt.Point)

    /// public boolean javax.swing.JComponent$AccessibleJComponent.isFocusTraversable()

    /// public void javax.swing.JComponent$AccessibleJComponent.requestFocus()

    /// public void javax.swing.JComponent$AccessibleJComponent.addFocusListener(java.awt.event.FocusListener)

    /// public void javax.swing.JComponent$AccessibleJComponent.removeFocusListener(java.awt.event.FocusListener)

    /// public void javax.swing.JComponent$AccessibleJComponent.addPropertyChangeListener(java.beans.PropertyChangeListener)

    private static var addPropertyChangeListener_MethodID_4: jmethodID?

    open func addPropertyChangeListener( listener: /* java.beans.PropertyChangeListener */ UnclassedProtocol? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addPropertyChangeListener", methodSig: "(Ljava/beans/PropertyChangeListener;)V", methodCache: &JComponent_AccessibleJComponent.addPropertyChangeListener_MethodID_4, args: &__args, locals: &__locals )
    }

    open func addPropertyChangeListener( _ _listener: /* java.beans.PropertyChangeListener */ UnclassedProtocol? ) {
        addPropertyChangeListener( listener: _listener )
    }

    /// public void javax.swing.JComponent$AccessibleJComponent.removePropertyChangeListener(java.beans.PropertyChangeListener)

    private static var removePropertyChangeListener_MethodID_5: jmethodID?

    open func removePropertyChangeListener( listener: /* java.beans.PropertyChangeListener */ UnclassedProtocol? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: listener, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removePropertyChangeListener", methodSig: "(Ljava/beans/PropertyChangeListener;)V", methodCache: &JComponent_AccessibleJComponent.removePropertyChangeListener_MethodID_5, args: &__args, locals: &__locals )
    }

    open func removePropertyChangeListener( _ _listener: /* java.beans.PropertyChangeListener */ UnclassedProtocol? ) {
        removePropertyChangeListener( listener: _listener )
    }

    /// protected java.lang.String javax.swing.JComponent$AccessibleJComponent.getBorderTitle(javax.swing.border.Border)

    private static var getBorderTitle_MethodID_6: jmethodID?

    open func getBorderTitle( b: Border? ) -> String! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorderTitle", methodSig: "(Ljavax/swing/border/Border;)Ljava/lang/String;", methodCache: &JComponent_AccessibleJComponent.getBorderTitle_MethodID_6, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: String(), from: __return )
    }

    open func getBorderTitle( _ _b: Border? ) -> String! {
        return getBorderTitle( b: _b )
    }

    /// public java.lang.String javax.swing.JComponent$AccessibleJComponent.getAccessibleDescription()

    /// public javax.accessibility.AccessibleRole javax.swing.JComponent$AccessibleJComponent.getAccessibleRole()

    /// public int javax.swing.JComponent$AccessibleJComponent.getAccessibleChildrenCount()

    /// public javax.accessibility.Accessible javax.swing.JComponent$AccessibleJComponent.getAccessibleChild(int)

    private static var getAccessibleChild_MethodID_7: jmethodID?

    open func getAccessibleChild( i: Int ) -> /* javax.accessibility.Accessible */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: i, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleChild", methodSig: "(I)Ljavax/accessibility/Accessible;", methodCache: &JComponent_AccessibleJComponent.getAccessibleChild_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* javax.accessibility.Accessible */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleChild( _ _i: Int ) -> /* javax.accessibility.Accessible */ UnclassedProtocol! {
        return getAccessibleChild( i: _i )
    }

    /// public javax.accessibility.AccessibleComponent javax.swing.JComponent$AccessibleJComponent.getAccessibleComponent()

    /// public int javax.swing.JComponent$AccessibleJComponent.getAccessibleIndexInParent()

    /// public javax.accessibility.Accessible javax.swing.JComponent$AccessibleJComponent.getAccessibleParent()

    /// public javax.accessibility.AccessibleKeyBinding javax.swing.JComponent$AccessibleJComponent.getAccessibleKeyBinding()

    private static var getAccessibleKeyBinding_MethodID_8: jmethodID?

    open func getAccessibleKeyBinding() -> /* javax.accessibility.AccessibleKeyBinding */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleKeyBinding", methodSig: "()Ljavax/accessibility/AccessibleKeyBinding;", methodCache: &JComponent_AccessibleJComponent.getAccessibleKeyBinding_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* javax.accessibility.AccessibleKeyBinding */ UnclassedProtocolForward( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JComponent$AccessibleJComponent.getAccessibleName()

    /// public javax.accessibility.AccessibleStateSet javax.swing.JComponent$AccessibleJComponent.getAccessibleStateSet()

    /// In declared protocol but not defined.. ///

    /// public abstract void javax.accessibility.AccessibleComponent.setBackground(java.awt.Color)

    private static var setBackground_MethodID_9: jmethodID?

    open func setBackground( c: java_awt.Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &JComponent_AccessibleJComponent.setBackground_MethodID_9, args: &__args, locals: &__locals )
    }

    open func setBackground( _ _c: java_awt.Color? ) {
        setBackground( c: _c )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.setVisible(boolean)

    private static var setVisible_MethodID_10: jmethodID?

    open func setVisible( b: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &JComponent_AccessibleJComponent.setVisible_MethodID_10, args: &__args, locals: &__locals )
    }

    open func setVisible( _ _b: Bool ) {
        setVisible( b: _b )
    }

    /// public abstract java.awt.Point javax.accessibility.AccessibleComponent.getLocation()

    /// public abstract void javax.accessibility.AccessibleComponent.removeFocusListener(java.awt.event.FocusListener)

    private static var removeFocusListener_MethodID_11: jmethodID?

    open func removeFocusListener( l: java_awt.FocusListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeFocusListener", methodSig: "(Ljava/awt/event/FocusListener;)V", methodCache: &JComponent_AccessibleJComponent.removeFocusListener_MethodID_11, args: &__args, locals: &__locals )
    }

    open func removeFocusListener( _ _l: java_awt.FocusListener? ) {
        removeFocusListener( l: _l )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.setForeground(java.awt.Color)

    private static var setForeground_MethodID_12: jmethodID?

    open func setForeground( c: java_awt.Color? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: c != nil ? c! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &JComponent_AccessibleJComponent.setForeground_MethodID_12, args: &__args, locals: &__locals )
    }

    open func setForeground( _ _c: java_awt.Color? ) {
        setForeground( c: _c )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.addFocusListener(java.awt.event.FocusListener)

    private static var addFocusListener_MethodID_13: jmethodID?

    open func addFocusListener( l: java_awt.FocusListener? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addFocusListener", methodSig: "(Ljava/awt/event/FocusListener;)V", methodCache: &JComponent_AccessibleJComponent.addFocusListener_MethodID_13, args: &__args, locals: &__locals )
    }

    open func addFocusListener( _ _l: java_awt.FocusListener? ) {
        addFocusListener( l: _l )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.setBounds(java.awt.Rectangle)

    private static var setBounds_MethodID_14: jmethodID?

    open func setBounds( r: java_awt.Rectangle? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: r != nil ? r! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBounds", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &JComponent_AccessibleJComponent.setBounds_MethodID_14, args: &__args, locals: &__locals )
    }

    open func setBounds( _ _r: java_awt.Rectangle? ) {
        setBounds( r: _r )
    }

    /// public abstract boolean javax.accessibility.AccessibleComponent.contains(java.awt.Point)

    private static var contains_MethodID_15: jmethodID?

    open func contains( p: java_awt.Point? ) -> Bool {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p != nil ? p! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/Point;)Z", methodCache: &JComponent_AccessibleJComponent.contains_MethodID_15, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Bool(), from: __return )
    }

    open func contains( _ _p: java_awt.Point? ) -> Bool {
        return contains( p: _p )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.setSize(java.awt.Dimension)

    private static var setSize_MethodID_16: jmethodID?

    open func setSize( d: java_awt.Dimension? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: d != nil ? d! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JComponent_AccessibleJComponent.setSize_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setSize( _ _d: java_awt.Dimension? ) {
        setSize( d: _d )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.setEnabled(boolean)

    private static var setEnabled_MethodID_17: jmethodID?

    open func setEnabled( b: Bool ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &JComponent_AccessibleJComponent.setEnabled_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _b: Bool ) {
        setEnabled( b: _b )
    }

    /// public abstract java.awt.FontMetrics javax.accessibility.AccessibleComponent.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_18: jmethodID?

    open func getFontMetrics( f: java_awt.Font? ) -> java_awt.FontMetrics! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: f != nil ? f! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &JComponent_AccessibleJComponent.getFontMetrics_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.FontMetrics( javaObject: __return ) : nil
    }

    open func getFontMetrics( _ _f: java_awt.Font? ) -> java_awt.FontMetrics! {
        return getFontMetrics( f: _f )
    }

    /// public abstract void javax.accessibility.AccessibleComponent.requestFocus()

    /// public abstract void javax.accessibility.AccessibleComponent.setFont(java.awt.Font)

    private static var setFont_MethodID_19: jmethodID?

    open func setFont( f: java_awt.Font? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: f != nil ? f! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &JComponent_AccessibleJComponent.setFont_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setFont( _ _f: java_awt.Font? ) {
        setFont( f: _f )
    }

    /// public abstract boolean javax.accessibility.AccessibleComponent.isShowing()

    /// public abstract java.awt.Rectangle javax.accessibility.AccessibleComponent.getBounds()

    /// public abstract java.awt.Dimension javax.accessibility.AccessibleComponent.getSize()

    /// public abstract boolean javax.accessibility.AccessibleComponent.isEnabled()

    /// public abstract java.awt.Color javax.accessibility.AccessibleComponent.getBackground()

    /// public abstract void javax.accessibility.AccessibleComponent.setCursor(java.awt.Cursor)

    private static var setCursor_MethodID_20: jmethodID?

    open func setCursor( cursor: java_awt.Cursor? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: cursor != nil ? cursor! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursor", methodSig: "(Ljava/awt/Cursor;)V", methodCache: &JComponent_AccessibleJComponent.setCursor_MethodID_20, args: &__args, locals: &__locals )
    }

    open func setCursor( _ _cursor: java_awt.Cursor? ) {
        setCursor( cursor: _cursor )
    }

    /// public abstract java.awt.Point javax.accessibility.AccessibleComponent.getLocationOnScreen()

    /// public abstract java.awt.Font javax.accessibility.AccessibleComponent.getFont()

    /// public abstract boolean javax.accessibility.AccessibleComponent.isFocusTraversable()

    /// public abstract java.awt.Cursor javax.accessibility.AccessibleComponent.getCursor()

    /// public abstract boolean javax.accessibility.AccessibleComponent.isVisible()

    /// public abstract void javax.accessibility.AccessibleComponent.setLocation(java.awt.Point)

    private static var setLocation_MethodID_21: jmethodID?

    open func setLocation( p: java_awt.Point? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p != nil ? p! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(Ljava/awt/Point;)V", methodCache: &JComponent_AccessibleJComponent.setLocation_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setLocation( _ _p: java_awt.Point? ) {
        setLocation( p: _p )
    }

    /// public abstract javax.accessibility.Accessible javax.accessibility.AccessibleComponent.getAccessibleAt(java.awt.Point)

    private static var getAccessibleAt_MethodID_22: jmethodID?

    open func getAccessibleAt( p: java_awt.Point? ) -> /* javax.accessibility.Accessible */ UnclassedProtocol! {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: p != nil ? p! as JNIObject : nil, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleAt", methodSig: "(Ljava/awt/Point;)Ljavax/accessibility/Accessible;", methodCache: &JComponent_AccessibleJComponent.getAccessibleAt_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* javax.accessibility.Accessible */ UnclassedProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleAt( _ _p: java_awt.Point? ) -> /* javax.accessibility.Accessible */ UnclassedProtocol! {
        return getAccessibleAt( p: _p )
    }

    /// public abstract java.awt.Color javax.accessibility.AccessibleComponent.getForeground()

}

