
import java_swift
import java_awt
import java_lang

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.FormView ///

open class FormView: ComponentView, java_awt.ActionListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FormViewJNIClass: jclass?

    /// static final java.lang.String javax.swing.text.html.FormView.PostDataProperty

    // Skipping field: true false false false false false 

    /// public static final java.lang.String javax.swing.text.html.FormView.RESET

    private static var RESET_FieldID: jfieldID?

    open static var RESET: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "RESET", fieldType: "Ljava/lang/String;", fieldCache: &RESET_FieldID, className: "javax/swing/text/html/FormView", classCache: &FormViewJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.text.html.FormView.SUBMIT

    private static var SUBMIT_FieldID: jfieldID?

    open static var SUBMIT: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "SUBMIT", fieldType: "Ljava/lang/String;", fieldCache: &SUBMIT_FieldID, className: "javax/swing/text/html/FormView", classCache: &FormViewJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private short javax.swing.text.html.FormView.maxIsPreferred

    /// private javax.swing.text.ComponentView$Invalidator javax.swing.text.ComponentView.c

    /// private java.awt.Component javax.swing.text.ComponentView.createdC

    /// public static final int javax.swing.text.View.BadBreakWeight

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.View.ExcellentBreakWeight

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.View.ForcedBreakWeight

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.View.GoodBreakWeight

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.View.X_AXIS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.text.View.Y_AXIS

    // Skipping field: false true false false false false 

    /// static final javax.swing.text.Position$Bias[] javax.swing.text.View.sharedBiasReturn

    // Skipping field: true false false false false false 

    /// private javax.swing.text.Element javax.swing.text.View.elem

    /// int javax.swing.text.View.firstUpdateIndex

    // Skipping field: true false false false false false 

    /// int javax.swing.text.View.lastUpdateIndex

    // Skipping field: true false false false false false 

    /// private javax.swing.text.View javax.swing.text.View.parent

    /// public static final int javax.swing.SwingConstants.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.HORIZONTAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NEXT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.PREVIOUS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.RIGHT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TRAILING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.VERTICAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.WEST

    // Skipping field: false true false false false false 

    /// public javax.swing.text.html.FormView(javax.swing.text.Element)

    private static var new_MethodID_1: jmethodID?

    public convenience init( arg0: Element? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/html/FormView", classCache: &FormView.FormViewJNIClass, methodSig: "(Ljavax/swing/text/Element;)V", methodCache: &FormView.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: Element? ) {
        self.init( arg0: _arg0 )
    }

    /// static java.lang.String javax.swing.text.html.FormView.access$000(javax.swing.text.html.FormView,java.awt.Point)

    // Skipping method: true false false false false 

    /// public void javax.swing.text.html.FormView.actionPerformed(java.awt.event.ActionEvent)

    private static var actionPerformed_MethodID_2: jmethodID?

    open func actionPerformed( e: java_awt.ActionEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "actionPerformed", methodSig: "(Ljava/awt/event/ActionEvent;)V", methodCache: &FormView.actionPerformed_MethodID_2, args: &__args, locals: &__locals )
    }

    open func actionPerformed( _ _e: java_awt.ActionEvent? ) {
        actionPerformed( e: _e )
    }

    /// private void javax.swing.text.html.FormView.appendBuffer(java.lang.StringBuilder,java.lang.String,java.lang.String)

    /// protected java.awt.Component javax.swing.text.html.FormView.createComponent()

    private static var createComponent_MethodID_3: jmethodID?

    override open func createComponent() -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createComponent", methodSig: "()Ljava/awt/Component;", methodCache: &FormView.createComponent_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }


    /// private javax.swing.JComponent javax.swing.text.html.FormView.createInputComponent(javax.swing.text.AttributeSet,java.lang.Object)

    /// private void javax.swing.text.html.FormView.getFormData(java.lang.StringBuilder)

    /// private javax.swing.text.Element javax.swing.text.html.FormView.getFormElement()

    /// private java.lang.String javax.swing.text.html.FormView.getImageData(java.awt.Point)

    /// private java.lang.String javax.swing.text.html.FormView.getInputElementData(javax.swing.text.AttributeSet)

    /// public float javax.swing.text.html.FormView.getMaximumSpan(int)

    private static var getMaximumSpan_MethodID_4: jmethodID?

    open func getMaximumSpan( arg0: Int ) -> Float {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallFloatMethod( object: javaObject, methodName: "getMaximumSpan", methodSig: "(I)F", methodCache: &FormView.getMaximumSpan_MethodID_4, args: &__args, locals: &__locals )
        return __return
    }

    override open func getMaximumSpan( _ _arg0: Int ) -> Float {
        return getMaximumSpan( arg0: _arg0 )
    }

    /// private java.lang.String javax.swing.text.html.FormView.getTextAreaData(javax.swing.text.AttributeSet)

    /// protected void javax.swing.text.html.FormView.imageSubmit(java.lang.String)

    private static var imageSubmit_MethodID_5: jmethodID?

    open func imageSubmit( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "imageSubmit", methodSig: "(Ljava/lang/String;)V", methodCache: &FormView.imageSubmit_MethodID_5, args: &__args, locals: &__locals )
    }

    open func imageSubmit( _ _arg0: String? ) {
        imageSubmit( arg0: _arg0 )
    }

    /// private boolean javax.swing.text.html.FormView.isControl(javax.swing.text.Element)

    /// boolean javax.swing.text.html.FormView.isLastTextOrPasswordField()

    // Skipping method: true false false false false 

    /// private void javax.swing.text.html.FormView.loadElementDataIntoBuffer(javax.swing.text.Element,java.lang.StringBuilder)

    /// private void javax.swing.text.html.FormView.loadSelectData(javax.swing.text.AttributeSet,java.lang.StringBuilder)

    /// private void javax.swing.text.html.FormView.removeStaleListenerForModel(java.lang.Object)

    /// void javax.swing.text.html.FormView.resetForm()

    // Skipping method: true false false false false 

    /// private void javax.swing.text.html.FormView.storePostData(javax.swing.text.html.HTMLDocument,java.lang.String,java.lang.String)

    /// protected void javax.swing.text.html.FormView.submitData(java.lang.String)

    private static var submitData_MethodID_6: jmethodID?

    open func submitData( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "submitData", methodSig: "(Ljava/lang/String;)V", methodCache: &FormView.submitData_MethodID_6, args: &__args, locals: &__locals )
    }

    open func submitData( _ _arg0: String? ) {
        submitData( arg0: _arg0 )
    }

}

