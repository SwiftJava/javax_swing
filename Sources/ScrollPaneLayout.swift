
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.ScrollPaneLayout ///

open class ScrollPaneLayout: java_swift.JavaObject, java_awt.LayoutManager, ScrollPaneConstants, /* interface java.io.Serializable */ UnavailableProtocol {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var ScrollPaneLayoutJNIClass: jclass?

    /// protected javax.swing.JViewport javax.swing.ScrollPaneLayout.colHead

    private static var colHead_FieldID: jfieldID?

    open var colHead: JViewport! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "colHead", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.colHead_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JViewport( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "colHead", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.colHead_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.hsb

    private static var hsb_FieldID: jfieldID?

    open var hsb: JScrollBar! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "hsb", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &ScrollPaneLayout.hsb_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JScrollBar( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "hsb", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &ScrollPaneLayout.hsb_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.ScrollPaneLayout.hsbPolicy

    private static var hsbPolicy_FieldID: jfieldID?

    open var hsbPolicy: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "hsbPolicy", fieldType: "I", fieldCache: &ScrollPaneLayout.hsbPolicy_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "hsbPolicy", fieldType: "I", fieldCache: &ScrollPaneLayout.hsbPolicy_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.ScrollPaneLayout.lowerLeft

    private static var lowerLeft_FieldID: jfieldID?

    open var lowerLeft: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "lowerLeft", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.lowerLeft_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "lowerLeft", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.lowerLeft_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.ScrollPaneLayout.lowerRight

    private static var lowerRight_FieldID: jfieldID?

    open var lowerRight: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "lowerRight", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.lowerRight_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "lowerRight", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.lowerRight_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JViewport javax.swing.ScrollPaneLayout.rowHead

    private static var rowHead_FieldID: jfieldID?

    open var rowHead: JViewport! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "rowHead", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.rowHead_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JViewport( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "rowHead", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.rowHead_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.ScrollPaneLayout.upperLeft

    private static var upperLeft_FieldID: jfieldID?

    open var upperLeft: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "upperLeft", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.upperLeft_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "upperLeft", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.upperLeft_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Component javax.swing.ScrollPaneLayout.upperRight

    private static var upperRight_FieldID: jfieldID?

    open var upperRight: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "upperRight", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.upperRight_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "upperRight", fieldType: "Ljava/awt/Component;", fieldCache: &ScrollPaneLayout.upperRight_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JViewport javax.swing.ScrollPaneLayout.viewport

    private static var viewport_FieldID: jfieldID?

    open var viewport: JViewport! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "viewport", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.viewport_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JViewport( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "viewport", fieldType: "Ljavax/swing/JViewport;", fieldCache: &ScrollPaneLayout.viewport_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JScrollBar javax.swing.ScrollPaneLayout.vsb

    private static var vsb_FieldID: jfieldID?

    open var vsb: JScrollBar! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "vsb", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &ScrollPaneLayout.vsb_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JScrollBar( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "vsb", fieldType: "Ljavax/swing/JScrollBar;", fieldCache: &ScrollPaneLayout.vsb_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.ScrollPaneLayout.vsbPolicy

    private static var vsbPolicy_FieldID: jfieldID?

    open var vsbPolicy: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "vsbPolicy", fieldType: "I", fieldCache: &ScrollPaneLayout.vsbPolicy_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "vsbPolicy", fieldType: "I", fieldCache: &ScrollPaneLayout.vsbPolicy_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.COLUMN_HEADER

    private static var COLUMN_HEADER_FieldID: jfieldID?

    public static var COLUMN_HEADER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "COLUMN_HEADER", fieldType: "Ljava/lang/String;", fieldCache: &COLUMN_HEADER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR

    private static var HORIZONTAL_SCROLLBAR_FieldID: jfieldID?

    public static var HORIZONTAL_SCROLLBAR: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "HORIZONTAL_SCROLLBAR", fieldType: "Ljava/lang/String;", fieldCache: &HORIZONTAL_SCROLLBAR_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS

    private static var HORIZONTAL_SCROLLBAR_ALWAYS_FieldID: jfieldID?

    public static var HORIZONTAL_SCROLLBAR_ALWAYS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HORIZONTAL_SCROLLBAR_ALWAYS", fieldType: "I", fieldCache: &HORIZONTAL_SCROLLBAR_ALWAYS_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED

    private static var HORIZONTAL_SCROLLBAR_AS_NEEDED_FieldID: jfieldID?

    public static var HORIZONTAL_SCROLLBAR_AS_NEEDED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HORIZONTAL_SCROLLBAR_AS_NEEDED", fieldType: "I", fieldCache: &HORIZONTAL_SCROLLBAR_AS_NEEDED_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER

    private static var HORIZONTAL_SCROLLBAR_NEVER_FieldID: jfieldID?

    public static var HORIZONTAL_SCROLLBAR_NEVER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "HORIZONTAL_SCROLLBAR_NEVER", fieldType: "I", fieldCache: &HORIZONTAL_SCROLLBAR_NEVER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_POLICY

    private static var HORIZONTAL_SCROLLBAR_POLICY_FieldID: jfieldID?

    public static var HORIZONTAL_SCROLLBAR_POLICY: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "HORIZONTAL_SCROLLBAR_POLICY", fieldType: "Ljava/lang/String;", fieldCache: &HORIZONTAL_SCROLLBAR_POLICY_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.LOWER_LEADING_CORNER

    private static var LOWER_LEADING_CORNER_FieldID: jfieldID?

    public static var LOWER_LEADING_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOWER_LEADING_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &LOWER_LEADING_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.LOWER_LEFT_CORNER

    private static var LOWER_LEFT_CORNER_FieldID: jfieldID?

    public static var LOWER_LEFT_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOWER_LEFT_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &LOWER_LEFT_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.LOWER_RIGHT_CORNER

    private static var LOWER_RIGHT_CORNER_FieldID: jfieldID?

    public static var LOWER_RIGHT_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOWER_RIGHT_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &LOWER_RIGHT_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.LOWER_TRAILING_CORNER

    private static var LOWER_TRAILING_CORNER_FieldID: jfieldID?

    public static var LOWER_TRAILING_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "LOWER_TRAILING_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &LOWER_TRAILING_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.ROW_HEADER

    private static var ROW_HEADER_FieldID: jfieldID?

    public static var ROW_HEADER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "ROW_HEADER", fieldType: "Ljava/lang/String;", fieldCache: &ROW_HEADER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.UPPER_LEADING_CORNER

    private static var UPPER_LEADING_CORNER_FieldID: jfieldID?

    public static var UPPER_LEADING_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UPPER_LEADING_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &UPPER_LEADING_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.UPPER_LEFT_CORNER

    private static var UPPER_LEFT_CORNER_FieldID: jfieldID?

    public static var UPPER_LEFT_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UPPER_LEFT_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &UPPER_LEFT_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.UPPER_RIGHT_CORNER

    private static var UPPER_RIGHT_CORNER_FieldID: jfieldID?

    public static var UPPER_RIGHT_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UPPER_RIGHT_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &UPPER_RIGHT_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.UPPER_TRAILING_CORNER

    private static var UPPER_TRAILING_CORNER_FieldID: jfieldID?

    public static var UPPER_TRAILING_CORNER: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "UPPER_TRAILING_CORNER", fieldType: "Ljava/lang/String;", fieldCache: &UPPER_TRAILING_CORNER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR

    private static var VERTICAL_SCROLLBAR_FieldID: jfieldID?

    public static var VERTICAL_SCROLLBAR: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "VERTICAL_SCROLLBAR", fieldType: "Ljava/lang/String;", fieldCache: &VERTICAL_SCROLLBAR_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS

    private static var VERTICAL_SCROLLBAR_ALWAYS_FieldID: jfieldID?

    public static var VERTICAL_SCROLLBAR_ALWAYS: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "VERTICAL_SCROLLBAR_ALWAYS", fieldType: "I", fieldCache: &VERTICAL_SCROLLBAR_ALWAYS_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED

    private static var VERTICAL_SCROLLBAR_AS_NEEDED_FieldID: jfieldID?

    public static var VERTICAL_SCROLLBAR_AS_NEEDED: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "VERTICAL_SCROLLBAR_AS_NEEDED", fieldType: "I", fieldCache: &VERTICAL_SCROLLBAR_AS_NEEDED_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER

    private static var VERTICAL_SCROLLBAR_NEVER_FieldID: jfieldID?

    public static var VERTICAL_SCROLLBAR_NEVER: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "VERTICAL_SCROLLBAR_NEVER", fieldType: "I", fieldCache: &VERTICAL_SCROLLBAR_NEVER_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            return Int(__value)
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_POLICY

    private static var VERTICAL_SCROLLBAR_POLICY_FieldID: jfieldID?

    public static var VERTICAL_SCROLLBAR_POLICY: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "VERTICAL_SCROLLBAR_POLICY", fieldType: "Ljava/lang/String;", fieldCache: &VERTICAL_SCROLLBAR_POLICY_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public static final java.lang.String javax.swing.ScrollPaneConstants.VIEWPORT

    private static var VIEWPORT_FieldID: jfieldID?

    public static var VIEWPORT: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "VIEWPORT", fieldType: "Ljava/lang/String;", fieldCache: &VIEWPORT_FieldID, className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayoutJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// public javax.swing.ScrollPaneLayout()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/ScrollPaneLayout", classCache: &ScrollPaneLayout.ScrollPaneLayoutJNIClass, methodSig: "()V", methodCache: &ScrollPaneLayout.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void javax.swing.ScrollPaneLayout.addLayoutComponent(java.lang.String,java.awt.Component)

    private static var addLayoutComponent_MethodID_2: jmethodID?

    open func addLayoutComponent( name: String?, comp: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addLayoutComponent", methodSig: "(Ljava/lang/String;Ljava/awt/Component;)V", methodCache: &ScrollPaneLayout.addLayoutComponent_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addLayoutComponent( _ _name: String?, _ _comp: java_awt.Component? ) {
        addLayoutComponent( name: _name, comp: _comp )
    }

    /// protected java.awt.Component javax.swing.ScrollPaneLayout.addSingletonComponent(java.awt.Component,java.awt.Component)

    private static var addSingletonComponent_MethodID_3: jmethodID?

    open func addSingletonComponent( oldC: java_awt.Component?, newC: java_awt.Component? ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: oldC, locals: &__locals )
        __args[1] = JNIType.toJava( value: newC, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "addSingletonComponent", methodSig: "(Ljava/awt/Component;Ljava/awt/Component;)Ljava/awt/Component;", methodCache: &ScrollPaneLayout.addSingletonComponent_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func addSingletonComponent( _ _oldC: java_awt.Component?, _ _newC: java_awt.Component? ) -> java_awt.Component! {
        return addSingletonComponent( oldC: _oldC, newC: _newC )
    }

    /// private void javax.swing.ScrollPaneLayout.adjustForHSB(boolean,java.awt.Rectangle,java.awt.Rectangle,java.awt.Insets)

    /// private void javax.swing.ScrollPaneLayout.adjustForVSB(boolean,java.awt.Rectangle,java.awt.Rectangle,java.awt.Insets,boolean)

    /// public javax.swing.JViewport javax.swing.ScrollPaneLayout.getColumnHeader()

    private static var getColumnHeader_MethodID_4: jmethodID?

    open func getColumnHeader() -> JViewport! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColumnHeader", methodSig: "()Ljavax/swing/JViewport;", methodCache: &ScrollPaneLayout.getColumnHeader_MethodID_4, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JViewport( javaObject: __return ) : nil
    }


    /// public java.awt.Component javax.swing.ScrollPaneLayout.getCorner(java.lang.String)

    private static var getCorner_MethodID_5: jmethodID?

    open func getCorner( key: String? ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: key, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCorner", methodSig: "(Ljava/lang/String;)Ljava/awt/Component;", methodCache: &ScrollPaneLayout.getCorner_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getCorner( _ _key: String? ) -> java_awt.Component! {
        return getCorner( key: _key )
    }

    /// public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getHorizontalScrollBar()

    private static var getHorizontalScrollBar_MethodID_6: jmethodID?

    open func getHorizontalScrollBar() -> JScrollBar! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getHorizontalScrollBar", methodSig: "()Ljavax/swing/JScrollBar;", methodCache: &ScrollPaneLayout.getHorizontalScrollBar_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JScrollBar( javaObject: __return ) : nil
    }


    /// public int javax.swing.ScrollPaneLayout.getHorizontalScrollBarPolicy()

    private static var getHorizontalScrollBarPolicy_MethodID_7: jmethodID?

    open func getHorizontalScrollBarPolicy() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getHorizontalScrollBarPolicy", methodSig: "()I", methodCache: &ScrollPaneLayout.getHorizontalScrollBarPolicy_MethodID_7, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.swing.JViewport javax.swing.ScrollPaneLayout.getRowHeader()

    private static var getRowHeader_MethodID_8: jmethodID?

    open func getRowHeader() -> JViewport! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getRowHeader", methodSig: "()Ljavax/swing/JViewport;", methodCache: &ScrollPaneLayout.getRowHeader_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JViewport( javaObject: __return ) : nil
    }


    /// public javax.swing.JScrollBar javax.swing.ScrollPaneLayout.getVerticalScrollBar()

    private static var getVerticalScrollBar_MethodID_9: jmethodID?

    open func getVerticalScrollBar() -> JScrollBar! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getVerticalScrollBar", methodSig: "()Ljavax/swing/JScrollBar;", methodCache: &ScrollPaneLayout.getVerticalScrollBar_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JScrollBar( javaObject: __return ) : nil
    }


    /// public int javax.swing.ScrollPaneLayout.getVerticalScrollBarPolicy()

    private static var getVerticalScrollBarPolicy_MethodID_10: jmethodID?

    open func getVerticalScrollBarPolicy() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getVerticalScrollBarPolicy", methodSig: "()I", methodCache: &ScrollPaneLayout.getVerticalScrollBarPolicy_MethodID_10, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.swing.JViewport javax.swing.ScrollPaneLayout.getViewport()

    private static var getViewport_MethodID_11: jmethodID?

    open func getViewport() -> JViewport! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getViewport", methodSig: "()Ljavax/swing/JViewport;", methodCache: &ScrollPaneLayout.getViewport_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JViewport( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle javax.swing.ScrollPaneLayout.getViewportBorderBounds(javax.swing.JScrollPane)

    private static var getViewportBorderBounds_MethodID_12: jmethodID?

    open func getViewportBorderBounds( scrollpane: JScrollPane? ) -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: scrollpane, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getViewportBorderBounds", methodSig: "(Ljavax/swing/JScrollPane;)Ljava/awt/Rectangle;", methodCache: &ScrollPaneLayout.getViewportBorderBounds_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }

    open func getViewportBorderBounds( _ _scrollpane: JScrollPane? ) -> java_awt.Rectangle! {
        return getViewportBorderBounds( scrollpane: _scrollpane )
    }

    /// public void javax.swing.ScrollPaneLayout.layoutContainer(java.awt.Container)

    private static var layoutContainer_MethodID_13: jmethodID?

    open func layoutContainer( parent: java_awt.Container? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "layoutContainer", methodSig: "(Ljava/awt/Container;)V", methodCache: &ScrollPaneLayout.layoutContainer_MethodID_13, args: &__args, locals: &__locals )
    }

    open func layoutContainer( _ _parent: java_awt.Container? ) {
        layoutContainer( parent: _parent )
    }

    /// public java.awt.Dimension javax.swing.ScrollPaneLayout.minimumLayoutSize(java.awt.Container)

    private static var minimumLayoutSize_MethodID_14: jmethodID?

    open func minimumLayoutSize( parent: java_awt.Container? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "minimumLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &ScrollPaneLayout.minimumLayoutSize_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func minimumLayoutSize( _ _parent: java_awt.Container? ) -> java_awt.Dimension! {
        return minimumLayoutSize( parent: _parent )
    }

    /// public java.awt.Dimension javax.swing.ScrollPaneLayout.preferredLayoutSize(java.awt.Container)

    private static var preferredLayoutSize_MethodID_15: jmethodID?

    open func preferredLayoutSize( parent: java_awt.Container? ) -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: parent, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "preferredLayoutSize", methodSig: "(Ljava/awt/Container;)Ljava/awt/Dimension;", methodCache: &ScrollPaneLayout.preferredLayoutSize_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }

    open func preferredLayoutSize( _ _parent: java_awt.Container? ) -> java_awt.Dimension! {
        return preferredLayoutSize( parent: _parent )
    }

    /// public void javax.swing.ScrollPaneLayout.removeLayoutComponent(java.awt.Component)

    private static var removeLayoutComponent_MethodID_16: jmethodID?

    open func removeLayoutComponent( comp: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: comp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeLayoutComponent", methodSig: "(Ljava/awt/Component;)V", methodCache: &ScrollPaneLayout.removeLayoutComponent_MethodID_16, args: &__args, locals: &__locals )
    }

    open func removeLayoutComponent( _ _comp: java_awt.Component? ) {
        removeLayoutComponent( comp: _comp )
    }

    /// public void javax.swing.ScrollPaneLayout.setHorizontalScrollBarPolicy(int)

    private static var setHorizontalScrollBarPolicy_MethodID_17: jmethodID?

    open func setHorizontalScrollBarPolicy( x: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(x) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setHorizontalScrollBarPolicy", methodSig: "(I)V", methodCache: &ScrollPaneLayout.setHorizontalScrollBarPolicy_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setHorizontalScrollBarPolicy( _ _x: Int ) {
        setHorizontalScrollBarPolicy( x: _x )
    }

    /// public void javax.swing.ScrollPaneLayout.setVerticalScrollBarPolicy(int)

    private static var setVerticalScrollBarPolicy_MethodID_18: jmethodID?

    open func setVerticalScrollBarPolicy( x: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(x) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVerticalScrollBarPolicy", methodSig: "(I)V", methodCache: &ScrollPaneLayout.setVerticalScrollBarPolicy_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setVerticalScrollBarPolicy( _ _x: Int ) {
        setVerticalScrollBarPolicy( x: _x )
    }

    /// public void javax.swing.ScrollPaneLayout.syncWithScrollPane(javax.swing.JScrollPane)

    private static var syncWithScrollPane_MethodID_19: jmethodID?

    open func syncWithScrollPane( sp: JScrollPane? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: sp, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "syncWithScrollPane", methodSig: "(Ljavax/swing/JScrollPane;)V", methodCache: &ScrollPaneLayout.syncWithScrollPane_MethodID_19, args: &__args, locals: &__locals )
    }

    open func syncWithScrollPane( _ _sp: JScrollPane? ) {
        syncWithScrollPane( sp: _sp )
    }

}

