
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.tree.TreeCellRenderer ///

public protocol TreeCellRenderer: JavaProtocol {

    /// public abstract java.awt.Component javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)

    func getTreeCellRendererComponent( tree: JTree?, value: java_swift.JavaObject?, selected: Bool, expanded: Bool, leaf: Bool, row: Int, hasFocus: Bool ) -> java_awt.Component!

}


open class TreeCellRendererForward: JNIObjectForward, TreeCellRenderer {

    private static var TreeCellRendererJNIClass: jclass?

    /// public abstract java.awt.Component javax.swing.tree.TreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)

    private static var getTreeCellRendererComponent_MethodID_2: jmethodID?

    open func getTreeCellRendererComponent( tree: JTree?, value: java_swift.JavaObject?, selected: Bool, expanded: Bool, leaf: Bool, row: Int, hasFocus: Bool ) -> java_awt.Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: tree != nil ? tree! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: value != nil ? value! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: selected, locals: &__locals )
        __args[3] = JNIType.toJava( value: expanded, locals: &__locals )
        __args[4] = JNIType.toJava( value: leaf, locals: &__locals )
        __args[5] = JNIType.toJava( value: row, locals: &__locals )
        __args[6] = JNIType.toJava( value: hasFocus, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTreeCellRendererComponent", methodSig: "(Ljavax/swing/JTree;Ljava/lang/Object;ZZZIZ)Ljava/awt/Component;", methodCache: &TreeCellRendererForward.getTreeCellRendererComponent_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getTreeCellRendererComponent( _ _tree: JTree?, _ _value: java_swift.JavaObject?, _ _selected: Bool, _ _expanded: Bool, _ _leaf: Bool, _ _row: Int, _ _hasFocus: Bool ) -> java_awt.Component! {
        return getTreeCellRendererComponent( tree: _tree, value: _value, selected: _selected, expanded: _expanded, leaf: _leaf, row: _row, hasFocus: _hasFocus )
    }

}


