
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.event.RowSorterListener ///

public protocol RowSorterListener: java_util.EventListener {

    /// public abstract void javax.swing.event.RowSorterListener.sorterChanged(javax.swing.event.RowSorterEvent)

    func sorterChanged( e: RowSorterEvent? )

}


open class RowSorterListenerForward: java_util.EventListenerForward, RowSorterListener {

    private static var RowSorterListenerJNIClass: jclass?

    /// public abstract void javax.swing.event.RowSorterListener.sorterChanged(javax.swing.event.RowSorterEvent)

    private static var sorterChanged_MethodID_2: jmethodID?

    open func sorterChanged( e: RowSorterEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "sorterChanged", methodSig: "(Ljavax/swing/event/RowSorterEvent;)V", methodCache: &RowSorterListenerForward.sorterChanged_MethodID_2, args: &__args, locals: &__locals )
    }

    open func sorterChanged( _ _e: RowSorterEvent? ) {
        sorterChanged( e: _e )
    }

}

private typealias RowSorterListener_sorterChanged_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func RowSorterListener_sorterChanged_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    RowSorterListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).sorterChanged( e: e != nil ? RowSorterEvent( javaObject: e ) : nil )
}

fileprivate class RowSorterListenerLocal_: JNILocalProxy<RowSorterListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let RowSorterListener_sorterChanged_0_thunk: RowSorterListener_sorterChanged_0_type = RowSorterListener_sorterChanged_0
        natives.append( JNINativeMethod( name: strdup("__sorterChanged"), signature: strdup("(JLjavax/swing/event/RowSorterEvent;)V"), fnPtr: unsafeBitCast( RowSorterListener_sorterChanged_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        natives.withUnsafeBufferPointer {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr.baseAddress, jint(nativesPtr.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/RowSorterListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension RowSorterListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return RowSorterListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class RowSorterListenerBase: RowSorterListener {

    public init() {}

    /// public abstract void javax.swing.event.RowSorterListener.sorterChanged(javax.swing.event.RowSorterEvent)

    open func sorterChanged( e: RowSorterEvent? ) /**/ {
    }


}
