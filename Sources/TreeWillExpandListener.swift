
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.event.TreeWillExpandListener ///

public protocol TreeWillExpandListener: java_util.EventListener {

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillExpand(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    func treeWillExpand( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillCollapse(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    func treeWillCollapse( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */

}


open class TreeWillExpandListenerForward: java_util.EventListenerForward, TreeWillExpandListener {

    private static var TreeWillExpandListenerJNIClass: jclass?

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillExpand(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    private static var treeWillExpand_MethodID_3: jmethodID?

    open func treeWillExpand( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "treeWillExpand", methodSig: "(Ljavax/swing/event/TreeExpansionEvent;)V", methodCache: &TreeWillExpandListenerForward.treeWillExpand_MethodID_3, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw ExpandVetoException( javaObject: throwable )
        }
    }

    open func treeWillExpand( _ _event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ {
        try treeWillExpand( event: _event )
    }

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillCollapse(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    private static var treeWillCollapse_MethodID_4: jmethodID?

    open func treeWillCollapse( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "treeWillCollapse", methodSig: "(Ljavax/swing/event/TreeExpansionEvent;)V", methodCache: &TreeWillExpandListenerForward.treeWillCollapse_MethodID_4, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            throw ExpandVetoException( javaObject: throwable )
        }
    }

    open func treeWillCollapse( _ _event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ {
        try treeWillCollapse( event: _event )
    }

}


private typealias TreeWillExpandListener_treeWillExpand_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func TreeWillExpandListener_treeWillExpand_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ event: jobject? ) -> () {
    do {
    JNI.inNative = true;
    try TreeWillExpandListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).treeWillExpand( event: event != nil ? TreeExpansionEvent( javaObject: event ) : nil )
    JNI.inNative = false;
    }
    catch let exception as Throwable {
        _ = exception.withJavaObject { JNI.api.Throw( JNI.env, $0 ) }
    }
    catch {
        _ = Exception("Unknown exception").withJavaObject { JNI.api.Throw( JNI.env, $0 ) }
    }
}

private typealias TreeWillExpandListener_treeWillCollapse_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func TreeWillExpandListener_treeWillCollapse_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ event: jobject? ) -> () {
    do {
    JNI.inNative = true;
    try TreeWillExpandListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).treeWillCollapse( event: event != nil ? TreeExpansionEvent( javaObject: event ) : nil )
    JNI.inNative = false;
    }
    catch let exception as Throwable {
        _ = exception.withJavaObject { JNI.api.Throw( JNI.env, $0 ) }
    }
    catch {
        _ = Exception("Unknown exception").withJavaObject { JNI.api.Throw( JNI.env, $0 ) }
    }
}

fileprivate class TreeWillExpandListenerLocal_: JNILocalProxy<TreeWillExpandListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let TreeWillExpandListener_treeWillExpand_0_thunk: TreeWillExpandListener_treeWillExpand_0_type = TreeWillExpandListener_treeWillExpand_0
        natives.append( JNINativeMethod( name: strdup("__treeWillExpand"), signature: strdup("(JLjavax/swing/event/TreeExpansionEvent;)V"), fnPtr: unsafeBitCast( TreeWillExpandListener_treeWillExpand_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let TreeWillExpandListener_treeWillCollapse_1_thunk: TreeWillExpandListener_treeWillCollapse_1_type = TreeWillExpandListener_treeWillCollapse_1
        natives.append( JNINativeMethod( name: strdup("__treeWillCollapse"), signature: strdup("(JLjavax/swing/event/TreeExpansionEvent;)V"), fnPtr: unsafeBitCast( TreeWillExpandListener_treeWillCollapse_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/TreeWillExpandListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension TreeWillExpandListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return TreeWillExpandListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class TreeWillExpandListenerBase: TreeWillExpandListener {

    public init() {}

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillExpand(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    open func treeWillExpand( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ /**/ {
    }

    open func treeWillExpand( _ _event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ /**/ {
        try treeWillExpand( event: _event )
    }

    /// public abstract void javax.swing.event.TreeWillExpandListener.treeWillCollapse(javax.swing.event.TreeExpansionEvent) throws javax.swing.tree.ExpandVetoException

    open func treeWillCollapse( event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ /**/ {
    }

    open func treeWillCollapse( _ _event: TreeExpansionEvent? ) throws /* javax.swing.tree.ExpandVetoException */ /**/ {
        try treeWillCollapse( event: _event )
    }

}
