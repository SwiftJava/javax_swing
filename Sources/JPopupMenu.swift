
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JPopupMenu ///

open class JPopupMenu: JComponent, MenuElement {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JPopupMenuJNIClass: jclass?

    /// private static final boolean javax.swing.JPopupMenu.DEBUG

    /// private static final boolean javax.swing.JPopupMenu.TRACE

    /// private static final boolean javax.swing.JPopupMenu.VERBOSE

    /// private static final java.lang.Object javax.swing.JPopupMenu.classLock

    /// private static final java.lang.Object javax.swing.JPopupMenu.defaultLWPopupEnabledKey

    /// static boolean javax.swing.JPopupMenu.popupPostionFixDisabled

    // Skipping field: true false false false false false 

    /// private static final java.lang.String javax.swing.JPopupMenu.uiClassID

    /// private int javax.swing.JPopupMenu.desiredLocationX

    /// private int javax.swing.JPopupMenu.desiredLocationY

    /// transient java.awt.Frame javax.swing.JPopupMenu.frame

    // Skipping field: true false false false false false 

    /// transient java.awt.Component javax.swing.JPopupMenu.invoker

    // Skipping field: true false false false false false 

    /// private java.lang.String javax.swing.JPopupMenu.label

    /// private boolean javax.swing.JPopupMenu.lightWeightPopup

    /// private java.awt.Insets javax.swing.JPopupMenu.margin

    /// private boolean javax.swing.JPopupMenu.paintBorder

    /// transient javax.swing.Popup javax.swing.JPopupMenu.popup

    // Skipping field: true false false false false false 

    /// private javax.swing.SingleSelectionModel javax.swing.JPopupMenu.selectionModel

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JPopupMenu.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JPopupMenu.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JPopupMenu.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JPopupMenu.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JPopupMenu.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JPopupMenu.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.JPopupMenu()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/JPopupMenu", classCache: &JPopupMenu.JPopupMenuJNIClass, methodSig: "()V", methodCache: &JPopupMenu.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public javax.swing.JPopupMenu(java.lang.String)

    private static var new_MethodID_2: jmethodID?

    public convenience init( label: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JPopupMenu", classCache: &JPopupMenu.JPopupMenuJNIClass, methodSig: "(Ljava/lang/String;)V", methodCache: &JPopupMenu.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _label: String? ) {
        self.init( label: _label )
    }

    /// static boolean javax.swing.JPopupMenu.canPopupOverlapTaskBar()

    // Skipping method: true false false false false 

    /// public static boolean javax.swing.JPopupMenu.getDefaultLightWeightPopupEnabled()

    private static var getDefaultLightWeightPopupEnabled_MethodID_3: jmethodID?

    open class func getDefaultLightWeightPopupEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallStaticBooleanMethod( className: "javax/swing/JPopupMenu", classCache: &JPopupMenuJNIClass, methodName: "getDefaultLightWeightPopupEnabled", methodSig: "()Z", methodCache: &getDefaultLightWeightPopupEnabled_MethodID_3, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private static java.awt.Frame javax.swing.JPopupMenu.getFrame(java.awt.Component)

    /// public static void javax.swing.JPopupMenu.setDefaultLightWeightPopupEnabled(boolean)

    private static var setDefaultLightWeightPopupEnabled_MethodID_4: jmethodID?

    open class func setDefaultLightWeightPopupEnabled( aFlag: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(aFlag ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallStaticVoidMethod( className: "javax/swing/JPopupMenu", classCache: &JPopupMenuJNIClass, methodName: "setDefaultLightWeightPopupEnabled", methodSig: "(Z)V", methodCache: &setDefaultLightWeightPopupEnabled_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func setDefaultLightWeightPopupEnabled( _ _aFlag: Bool ) {
        setDefaultLightWeightPopupEnabled( aFlag: _aFlag )
    }

    /// public javax.swing.JMenuItem javax.swing.JPopupMenu.add(javax.swing.Action)

    private static var add_MethodID_5: jmethodID?

    open func add( a: Action? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljavax/swing/Action;)Ljavax/swing/JMenuItem;", methodCache: &JPopupMenu.add_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _a: Action? ) -> JMenuItem! {
        return add( a: _a )
    }

    /// public javax.swing.JMenuItem javax.swing.JPopupMenu.add(javax.swing.JMenuItem)

    private static var add_MethodID_6: jmethodID?

    open func add( menuItem: JMenuItem? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: menuItem, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljavax/swing/JMenuItem;)Ljavax/swing/JMenuItem;", methodCache: &JPopupMenu.add_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _menuItem: JMenuItem? ) -> JMenuItem! {
        return add( menuItem: _menuItem )
    }

    /// public javax.swing.JMenuItem javax.swing.JPopupMenu.add(java.lang.String)

    private static var add_MethodID_7: jmethodID?

    open func add( s: String? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: s, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "add", methodSig: "(Ljava/lang/String;)Ljavax/swing/JMenuItem;", methodCache: &JPopupMenu.add_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func add( _ _s: String? ) -> JMenuItem! {
        return add( s: _s )
    }

    /// public void javax.swing.JPopupMenu.addMenuKeyListener(javax.swing.event.MenuKeyListener)

    private static var addMenuKeyListener_MethodID_8: jmethodID?

    open func addMenuKeyListener( l: MenuKeyListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addMenuKeyListener", methodSig: "(Ljavax/swing/event/MenuKeyListener;)V", methodCache: &JPopupMenu.addMenuKeyListener_MethodID_8, args: &__args, locals: &__locals )
    }

    open func addMenuKeyListener( _ _l: MenuKeyListener? ) {
        addMenuKeyListener( l: _l )
    }

    /// public void javax.swing.JPopupMenu.addPopupMenuListener(javax.swing.event.PopupMenuListener)

    private static var addPopupMenuListener_MethodID_9: jmethodID?

    open func addPopupMenuListener( l: PopupMenuListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addPopupMenuListener", methodSig: "(Ljavax/swing/event/PopupMenuListener;)V", methodCache: &JPopupMenu.addPopupMenuListener_MethodID_9, args: &__args, locals: &__locals )
    }

    open func addPopupMenuListener( _ _l: PopupMenuListener? ) {
        addPopupMenuListener( l: _l )
    }

    /// public void javax.swing.JPopupMenu.addSeparator()

    private static var addSeparator_MethodID_10: jmethodID?

    open func addSeparator() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addSeparator", methodSig: "()V", methodCache: &JPopupMenu.addSeparator_MethodID_10, args: &__args, locals: &__locals )
    }


    /// java.awt.Point javax.swing.JPopupMenu.adjustPopupLocationToFitScreen(int,int)

    // Skipping method: true false false false false 

    /// boolean javax.swing.JPopupMenu.alwaysOnTop()

    // Skipping method: true false false false false 

    /// protected java.beans.PropertyChangeListener javax.swing.JPopupMenu.createActionChangeListener(javax.swing.JMenuItem)

    private static var createActionChangeListener_MethodID_11: jmethodID?

    open func createActionChangeListener( b: JMenuItem? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: b, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createActionChangeListener", methodSig: "(Ljavax/swing/JMenuItem;)Ljava/beans/PropertyChangeListener;", methodCache: &JPopupMenu.createActionChangeListener_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface java.beans.PropertyChangeListener */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func createActionChangeListener( _ _b: JMenuItem? ) -> /* interface java.beans.PropertyChangeListener */ UnavailableProtocol! {
        return createActionChangeListener( b: _b )
    }

    /// protected javax.swing.JMenuItem javax.swing.JPopupMenu.createActionComponent(javax.swing.Action)

    private static var createActionComponent_MethodID_12: jmethodID?

    open func createActionComponent( a: Action? ) -> JMenuItem! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createActionComponent", methodSig: "(Ljavax/swing/Action;)Ljavax/swing/JMenuItem;", methodCache: &JPopupMenu.createActionComponent_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JMenuItem( javaObject: __return ) : nil
    }

    open func createActionComponent( _ _a: Action? ) -> JMenuItem! {
        return createActionComponent( a: _a )
    }

    /// private void javax.swing.JPopupMenu.fireMenuKeyPressed(javax.swing.event.MenuKeyEvent)

    /// private void javax.swing.JPopupMenu.fireMenuKeyReleased(javax.swing.event.MenuKeyEvent)

    /// private void javax.swing.JPopupMenu.fireMenuKeyTyped(javax.swing.event.MenuKeyEvent)

    /// protected void javax.swing.JPopupMenu.firePopupMenuCanceled()

    private static var firePopupMenuCanceled_MethodID_13: jmethodID?

    open func firePopupMenuCanceled() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePopupMenuCanceled", methodSig: "()V", methodCache: &JPopupMenu.firePopupMenuCanceled_MethodID_13, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeInvisible()

    private static var firePopupMenuWillBecomeInvisible_MethodID_14: jmethodID?

    open func firePopupMenuWillBecomeInvisible() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePopupMenuWillBecomeInvisible", methodSig: "()V", methodCache: &JPopupMenu.firePopupMenuWillBecomeInvisible_MethodID_14, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.JPopupMenu.firePopupMenuWillBecomeVisible()

    private static var firePopupMenuWillBecomeVisible_MethodID_15: jmethodID?

    open func firePopupMenuWillBecomeVisible() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePopupMenuWillBecomeVisible", methodSig: "()V", methodCache: &JPopupMenu.firePopupMenuWillBecomeVisible_MethodID_15, args: &__args, locals: &__locals )
    }


    /// public javax.accessibility.AccessibleContext javax.swing.JPopupMenu.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public java.awt.Component javax.swing.JPopupMenu.getComponent()

    private static var getComponent_MethodID_16: jmethodID?

    open func getComponent() -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponent", methodSig: "()Ljava/awt/Component;", methodCache: &JPopupMenu.getComponent_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }


    /// public java.awt.Component javax.swing.JPopupMenu.getComponentAtIndex(int)

    private static var getComponentAtIndex_MethodID_17: jmethodID?

    open func getComponentAtIndex( i: Int ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getComponentAtIndex", methodSig: "(I)Ljava/awt/Component;", methodCache: &JPopupMenu.getComponentAtIndex_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getComponentAtIndex( _ _i: Int ) -> java_awt.Component! {
        return getComponentAtIndex( i: _i )
    }

    /// public int javax.swing.JPopupMenu.getComponentIndex(java.awt.Component)

    private static var getComponentIndex_MethodID_18: jmethodID?

    open func getComponentIndex( c: java_awt.Component? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getComponentIndex", methodSig: "(Ljava/awt/Component;)I", methodCache: &JPopupMenu.getComponentIndex_MethodID_18, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getComponentIndex( _ _c: java_awt.Component? ) -> Int {
        return getComponentIndex( c: _c )
    }

    /// private java.awt.GraphicsConfiguration javax.swing.JPopupMenu.getCurrentGraphicsConfiguration(java.awt.Point)

    /// public java.awt.Component javax.swing.JPopupMenu.getInvoker()

    private static var getInvoker_MethodID_19: jmethodID?

    open func getInvoker() -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getInvoker", methodSig: "()Ljava/awt/Component;", methodCache: &JPopupMenu.getInvoker_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JPopupMenu.getLabel()

    private static var getLabel_MethodID_20: jmethodID?

    open func getLabel() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLabel", methodSig: "()Ljava/lang/String;", methodCache: &JPopupMenu.getLabel_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.awt.Insets javax.swing.JPopupMenu.getMargin()

    private static var getMargin_MethodID_21: jmethodID?

    open func getMargin() -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMargin", methodSig: "()Ljava/awt/Insets;", methodCache: &JPopupMenu.getMargin_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }


    /// public javax.swing.event.MenuKeyListener[] javax.swing.JPopupMenu.getMenuKeyListeners()

    private static var getMenuKeyListeners_MethodID_22: jmethodID?

    open func getMenuKeyListeners() -> [MenuKeyListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMenuKeyListeners", methodSig: "()[Ljavax/swing/event/MenuKeyListener;", methodCache: &JPopupMenu.getMenuKeyListeners_MethodID_22, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [MenuKeyListenerForward].self, from: __return )
    }


    /// public javax.swing.event.PopupMenuListener[] javax.swing.JPopupMenu.getPopupMenuListeners()

    private static var getPopupMenuListeners_MethodID_23: jmethodID?

    open func getPopupMenuListeners() -> [PopupMenuListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPopupMenuListeners", methodSig: "()[Ljavax/swing/event/PopupMenuListener;", methodCache: &JPopupMenu.getPopupMenuListeners_MethodID_23, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [PopupMenuListenerForward].self, from: __return )
    }


    /// javax.swing.JPopupMenu javax.swing.JPopupMenu.getRootPopupMenu()

    // Skipping method: true false false false false 

    /// public javax.swing.SingleSelectionModel javax.swing.JPopupMenu.getSelectionModel()

    private static var getSelectionModel_MethodID_24: jmethodID?

    open func getSelectionModel() -> SingleSelectionModel! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectionModel", methodSig: "()Ljavax/swing/SingleSelectionModel;", methodCache: &JPopupMenu.getSelectionModel_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? SingleSelectionModelForward( javaObject: __return ) : nil
    }


    /// public javax.swing.MenuElement[] javax.swing.JPopupMenu.getSubElements()

    private static var getSubElements_MethodID_25: jmethodID?

    open func getSubElements() -> [MenuElement]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSubElements", methodSig: "()[Ljavax/swing/MenuElement;", methodCache: &JPopupMenu.getSubElements_MethodID_25, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [MenuElementForward].self, from: __return )
    }


    /// public javax.swing.plaf.PopupMenuUI javax.swing.JPopupMenu.getUI()

    private static var getUI_MethodID_26: jmethodID?

    open func getUI() -> PopupMenuUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUI", methodSig: "()Ljavax/swing/plaf/PopupMenuUI;", methodCache: &JPopupMenu.getUI_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? PopupMenuUI( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JPopupMenu.getUIClassID()

    // Skipping method: false true false false false 

    /// public void javax.swing.JPopupMenu.insert(javax.swing.Action,int)

    private static var insert_MethodID_27: jmethodID?

    open func insert( a: Action?, index: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        __args[1] = jvalue( i: jint(index) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insert", methodSig: "(Ljavax/swing/Action;I)V", methodCache: &JPopupMenu.insert_MethodID_27, args: &__args, locals: &__locals )
    }

    open func insert( _ _a: Action?, _ _index: Int ) {
        insert( a: _a, index: _index )
    }

    /// public void javax.swing.JPopupMenu.insert(java.awt.Component,int)

    private static var insert_MethodID_28: jmethodID?

    open func insert( component: java_awt.Component?, index: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: component, locals: &__locals )
        __args[1] = jvalue( i: jint(index) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insert", methodSig: "(Ljava/awt/Component;I)V", methodCache: &JPopupMenu.insert_MethodID_28, args: &__args, locals: &__locals )
    }

    open func insert( _ _component: java_awt.Component?, _ _index: Int ) {
        insert( component: _component, index: _index )
    }

    /// public boolean javax.swing.JPopupMenu.isBorderPainted()

    private static var isBorderPainted_MethodID_29: jmethodID?

    open func isBorderPainted() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isBorderPainted", methodSig: "()Z", methodCache: &JPopupMenu.isBorderPainted_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.JPopupMenu.isLightWeightPopupEnabled()

    private static var isLightWeightPopupEnabled_MethodID_30: jmethodID?

    open func isLightWeightPopupEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isLightWeightPopupEnabled", methodSig: "()Z", methodCache: &JPopupMenu.isLightWeightPopupEnabled_MethodID_30, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private boolean javax.swing.JPopupMenu.isPopupMenu()

    /// public boolean javax.swing.JPopupMenu.isPopupTrigger(java.awt.event.MouseEvent)

    private static var isPopupTrigger_MethodID_31: jmethodID?

    open func isPopupTrigger( e: java_awt.MouseEvent? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isPopupTrigger", methodSig: "(Ljava/awt/event/MouseEvent;)Z", methodCache: &JPopupMenu.isPopupTrigger_MethodID_31, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isPopupTrigger( _ _e: java_awt.MouseEvent? ) -> Bool {
        return isPopupTrigger( e: _e )
    }

    /// boolean javax.swing.JPopupMenu.isSubPopupMenu(javax.swing.JPopupMenu)

    // Skipping method: true false false false false 

    /// public boolean javax.swing.JPopupMenu.isVisible()

    // Skipping method: false true false false false 

    /// public void javax.swing.JPopupMenu.menuSelectionChanged(boolean)

    private static var menuSelectionChanged_MethodID_32: jmethodID?

    open func menuSelectionChanged( isIncluded: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(isIncluded ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "menuSelectionChanged", methodSig: "(Z)V", methodCache: &JPopupMenu.menuSelectionChanged_MethodID_32, args: &__args, locals: &__locals )
    }

    open func menuSelectionChanged( _ _isIncluded: Bool ) {
        menuSelectionChanged( isIncluded: _isIncluded )
    }

    /// public void javax.swing.JPopupMenu.pack()

    private static var pack_MethodID_33: jmethodID?

    open func pack() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "pack", methodSig: "()V", methodCache: &JPopupMenu.pack_MethodID_33, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.JPopupMenu.paintBorder(java.awt.Graphics)

    private static var paintBorder_MethodID_34: jmethodID?

    override open func paintBorder( g: java_awt.Graphics? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: g, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paintBorder", methodSig: "(Ljava/awt/Graphics;)V", methodCache: &JPopupMenu.paintBorder_MethodID_34, args: &__args, locals: &__locals )
    }

    override open func paintBorder( _ _g: java_awt.Graphics? ) {
        paintBorder( g: _g )
    }

    /// protected java.lang.String javax.swing.JPopupMenu.paramString()

    private static var paramString_MethodID_35: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JPopupMenu.paramString_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// protected void javax.swing.JPopupMenu.processFocusEvent(java.awt.event.FocusEvent)

    private static var processFocusEvent_MethodID_36: jmethodID?

    open func processFocusEvent( evt: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processFocusEvent", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &JPopupMenu.processFocusEvent_MethodID_36, args: &__args, locals: &__locals )
    }

    override open func processFocusEvent( _ _evt: java_awt.FocusEvent? ) {
        processFocusEvent( evt: _evt )
    }

    /// protected void javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent)

    private static var processKeyEvent_MethodID_37: jmethodID?

    open func processKeyEvent( evt: java_awt.KeyEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: evt, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;)V", methodCache: &JPopupMenu.processKeyEvent_MethodID_37, args: &__args, locals: &__locals )
    }

    override open func processKeyEvent( _ _evt: java_awt.KeyEvent? ) {
        processKeyEvent( evt: _evt )
    }

    /// public void javax.swing.JPopupMenu.processKeyEvent(java.awt.event.KeyEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)

    private static var processKeyEvent_MethodID_38: jmethodID?

    open func processKeyEvent( event: java_awt.KeyEvent?, path: [MenuElement]?, manager: MenuSelectionManager? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        __args[1] = JNIType.toJava( value: path, locals: &__locals )
        __args[2] = JNIType.toJava( value: manager, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processKeyEvent", methodSig: "(Ljava/awt/event/KeyEvent;[Ljavax/swing/MenuElement;Ljavax/swing/MenuSelectionManager;)V", methodCache: &JPopupMenu.processKeyEvent_MethodID_38, args: &__args, locals: &__locals )
    }

    open func processKeyEvent( _ _event: java_awt.KeyEvent?, _ _path: [MenuElement]?, _ _manager: MenuSelectionManager? ) {
        processKeyEvent( event: _event, path: _path, manager: _manager )
    }

    /// private void javax.swing.JPopupMenu.processMenuKeyEvent(javax.swing.event.MenuKeyEvent)

    /// public void javax.swing.JPopupMenu.processMouseEvent(java.awt.event.MouseEvent,javax.swing.MenuElement[],javax.swing.MenuSelectionManager)

    private static var processMouseEvent_MethodID_39: jmethodID?

    open func processMouseEvent( event: java_awt.MouseEvent?, path: [MenuElement]?, manager: MenuSelectionManager? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: event, locals: &__locals )
        __args[1] = JNIType.toJava( value: path, locals: &__locals )
        __args[2] = JNIType.toJava( value: manager, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processMouseEvent", methodSig: "(Ljava/awt/event/MouseEvent;[Ljavax/swing/MenuElement;Ljavax/swing/MenuSelectionManager;)V", methodCache: &JPopupMenu.processMouseEvent_MethodID_39, args: &__args, locals: &__locals )
    }

    open func processMouseEvent( _ _event: java_awt.MouseEvent?, _ _path: [MenuElement]?, _ _manager: MenuSelectionManager? ) {
        processMouseEvent( event: _event, path: _path, manager: _manager )
    }

    /// private void javax.swing.JPopupMenu.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public void javax.swing.JPopupMenu.remove(int)

    private static var remove_MethodID_40: jmethodID?

    open func remove( pos: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(pos) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "remove", methodSig: "(I)V", methodCache: &JPopupMenu.remove_MethodID_40, args: &__args, locals: &__locals )
    }

    override open func remove( _ _pos: Int ) {
        remove( pos: _pos )
    }

    /// public void javax.swing.JPopupMenu.removeMenuKeyListener(javax.swing.event.MenuKeyListener)

    private static var removeMenuKeyListener_MethodID_41: jmethodID?

    open func removeMenuKeyListener( l: MenuKeyListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeMenuKeyListener", methodSig: "(Ljavax/swing/event/MenuKeyListener;)V", methodCache: &JPopupMenu.removeMenuKeyListener_MethodID_41, args: &__args, locals: &__locals )
    }

    open func removeMenuKeyListener( _ _l: MenuKeyListener? ) {
        removeMenuKeyListener( l: _l )
    }

    /// public void javax.swing.JPopupMenu.removePopupMenuListener(javax.swing.event.PopupMenuListener)

    private static var removePopupMenuListener_MethodID_42: jmethodID?

    open func removePopupMenuListener( l: PopupMenuListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removePopupMenuListener", methodSig: "(Ljavax/swing/event/PopupMenuListener;)V", methodCache: &JPopupMenu.removePopupMenuListener_MethodID_42, args: &__args, locals: &__locals )
    }

    open func removePopupMenuListener( _ _l: PopupMenuListener? ) {
        removePopupMenuListener( l: _l )
    }

    /// public void javax.swing.JPopupMenu.setBorderPainted(boolean)

    private static var setBorderPainted_MethodID_43: jmethodID?

    open func setBorderPainted( b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBorderPainted", methodSig: "(Z)V", methodCache: &JPopupMenu.setBorderPainted_MethodID_43, args: &__args, locals: &__locals )
    }

    open func setBorderPainted( _ _b: Bool ) {
        setBorderPainted( b: _b )
    }

    /// public void javax.swing.JPopupMenu.setInvoker(java.awt.Component)

    private static var setInvoker_MethodID_44: jmethodID?

    open func setInvoker( invoker: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: invoker, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setInvoker", methodSig: "(Ljava/awt/Component;)V", methodCache: &JPopupMenu.setInvoker_MethodID_44, args: &__args, locals: &__locals )
    }

    open func setInvoker( _ _invoker: java_awt.Component? ) {
        setInvoker( invoker: _invoker )
    }

    /// public void javax.swing.JPopupMenu.setLabel(java.lang.String)

    private static var setLabel_MethodID_45: jmethodID?

    open func setLabel( label: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: label, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLabel", methodSig: "(Ljava/lang/String;)V", methodCache: &JPopupMenu.setLabel_MethodID_45, args: &__args, locals: &__locals )
    }

    open func setLabel( _ _label: String? ) {
        setLabel( label: _label )
    }

    /// public void javax.swing.JPopupMenu.setLightWeightPopupEnabled(boolean)

    private static var setLightWeightPopupEnabled_MethodID_46: jmethodID?

    open func setLightWeightPopupEnabled( aFlag: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(aFlag ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLightWeightPopupEnabled", methodSig: "(Z)V", methodCache: &JPopupMenu.setLightWeightPopupEnabled_MethodID_46, args: &__args, locals: &__locals )
    }

    open func setLightWeightPopupEnabled( _ _aFlag: Bool ) {
        setLightWeightPopupEnabled( aFlag: _aFlag )
    }

    /// public void javax.swing.JPopupMenu.setLocation(int,int)

    private static var setLocation_MethodID_47: jmethodID?

    open func setLocation( x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(x) )
        __args[1] = jvalue( i: jint(y) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(II)V", methodCache: &JPopupMenu.setLocation_MethodID_47, args: &__args, locals: &__locals )
    }

    override open func setLocation( _ _x: Int, _ _y: Int ) {
        setLocation( x: _x, y: _y )
    }

    /// public void javax.swing.JPopupMenu.setPopupSize(int,int)

    private static var setPopupSize_MethodID_48: jmethodID?

    open func setPopupSize( width: Int, height: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(width) )
        __args[1] = jvalue( i: jint(height) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPopupSize", methodSig: "(II)V", methodCache: &JPopupMenu.setPopupSize_MethodID_48, args: &__args, locals: &__locals )
    }

    open func setPopupSize( _ _width: Int, _ _height: Int ) {
        setPopupSize( width: _width, height: _height )
    }

    /// public void javax.swing.JPopupMenu.setPopupSize(java.awt.Dimension)

    private static var setPopupSize_MethodID_49: jmethodID?

    open func setPopupSize( d: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: d, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setPopupSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &JPopupMenu.setPopupSize_MethodID_49, args: &__args, locals: &__locals )
    }

    open func setPopupSize( _ _d: java_awt.Dimension? ) {
        setPopupSize( d: _d )
    }

    /// public void javax.swing.JPopupMenu.setSelected(java.awt.Component)

    private static var setSelected_MethodID_50: jmethodID?

    open func setSelected( sel: java_awt.Component? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: sel, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelected", methodSig: "(Ljava/awt/Component;)V", methodCache: &JPopupMenu.setSelected_MethodID_50, args: &__args, locals: &__locals )
    }

    open func setSelected( _ _sel: java_awt.Component? ) {
        setSelected( sel: _sel )
    }

    /// public void javax.swing.JPopupMenu.setSelectionModel(javax.swing.SingleSelectionModel)

    private static var setSelectionModel_MethodID_51: jmethodID?

    open func setSelectionModel( model: SingleSelectionModel? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: model, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelectionModel", methodSig: "(Ljavax/swing/SingleSelectionModel;)V", methodCache: &JPopupMenu.setSelectionModel_MethodID_51, args: &__args, locals: &__locals )
    }

    open func setSelectionModel( _ _model: SingleSelectionModel? ) {
        setSelectionModel( model: _model )
    }

    /// public void javax.swing.JPopupMenu.setUI(javax.swing.plaf.PopupMenuUI)

    private static var setUI_MethodID_52: jmethodID?

    open func setUI( ui: PopupMenuUI? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: ui, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUI", methodSig: "(Ljavax/swing/plaf/PopupMenuUI;)V", methodCache: &JPopupMenu.setUI_MethodID_52, args: &__args, locals: &__locals )
    }

    open func setUI( _ _ui: PopupMenuUI? ) {
        setUI( ui: _ui )
    }

    /// public void javax.swing.JPopupMenu.setVisible(boolean)

    private static var setVisible_MethodID_53: jmethodID?

    open func setVisible( b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &JPopupMenu.setVisible_MethodID_53, args: &__args, locals: &__locals )
    }

    override open func setVisible( _ _b: Bool ) {
        setVisible( b: _b )
    }

    /// public void javax.swing.JPopupMenu.show(java.awt.Component,int,int)

    private static var show_MethodID_54: jmethodID?

    open func show( invoker: java_awt.Component?, x: Int, y: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: invoker, locals: &__locals )
        __args[1] = jvalue( i: jint(x) )
        __args[2] = jvalue( i: jint(y) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "show", methodSig: "(Ljava/awt/Component;II)V", methodCache: &JPopupMenu.show_MethodID_54, args: &__args, locals: &__locals )
    }

    open func show( _ _invoker: java_awt.Component?, _ _x: Int, _ _y: Int ) {
        show( invoker: _invoker, x: _x, y: _y )
    }

    /// private void javax.swing.JPopupMenu.showPopup()

    /// public void javax.swing.JPopupMenu.updateUI()

    // Skipping method: false true false false false 

    /// private void javax.swing.JPopupMenu.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

}

