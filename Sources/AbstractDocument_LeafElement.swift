
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.AbstractDocument$LeafElement ///

open class AbstractDocument_LeafElement: AbstractDocument_AbstractElement {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AbstractDocument_LeafElementJNIClass: jclass?

    /// private transient javax.swing.text.Position javax.swing.text.AbstractDocument$LeafElement.p0

    /// private transient javax.swing.text.Position javax.swing.text.AbstractDocument$LeafElement.p1

    /// final javax.swing.text.AbstractDocument javax.swing.text.AbstractDocument$LeafElement.this$0

    /// private javax.swing.text.Element javax.swing.text.AbstractDocument$AbstractElement.parent

    /// private transient javax.swing.text.AttributeSet javax.swing.text.AbstractDocument$AbstractElement.attributes

    /// final javax.swing.text.AbstractDocument javax.swing.text.AbstractDocument$AbstractElement.this$0

    /// public static final java.lang.Object javax.swing.text.AttributeSet.NameAttribute

    /// public static final java.lang.Object javax.swing.text.AttributeSet.ResolveAttribute

    /// public javax.swing.text.AbstractDocument$LeafElement(javax.swing.text.AbstractDocument,javax.swing.text.Element,javax.swing.text.AttributeSet,int,int)

    private static var new_MethodID_1: jmethodID?

    public convenience init( this_0: AbstractDocument?, parent: Element?, a: AttributeSet?, offs0: Int, offs1: Int ) {
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: this_0 != nil ? this_0! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: parent, locals: &__locals )
        __args[2] = JNIType.toJava( value: a, locals: &__locals )
        __args[3] = JNIType.toJava( value: offs0, locals: &__locals )
        __args[4] = JNIType.toJava( value: offs1, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/AbstractDocument$LeafElement", classCache: &AbstractDocument_LeafElement.AbstractDocument_LeafElementJNIClass, methodSig: "(Ljavax/swing/text/AbstractDocument;Ljavax/swing/text/Element;Ljavax/swing/text/AttributeSet;II)V", methodCache: &AbstractDocument_LeafElement.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _this_0: AbstractDocument?, _ _parent: Element?, _ _a: AttributeSet?, _ _offs0: Int, _ _offs1: Int ) {
        self.init( this_0: _this_0, parent: _parent, a: _a, offs0: _offs0, offs1: _offs1 )
    }

    /// public java.lang.String javax.swing.text.AbstractDocument$LeafElement.toString()

    /// public java.lang.String javax.swing.text.AbstractDocument$LeafElement.getName()

    /// private void javax.swing.text.AbstractDocument$LeafElement.readObject(java.io.ObjectInputStream) throws java.lang.ClassNotFoundException,java.io.IOException

    /// private void javax.swing.text.AbstractDocument$LeafElement.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// public int javax.swing.text.AbstractDocument$LeafElement.getElementIndex(int)

    private static var getElementIndex_MethodID_2: jmethodID?

    open func getElementIndex( pos: Int ) -> Int {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: pos, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getElementIndex", methodSig: "(I)I", methodCache: &AbstractDocument_LeafElement.getElementIndex_MethodID_2, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: Int(), from: __return )
    }

    override open func getElementIndex( _ _pos: Int ) -> Int {
        return getElementIndex( pos: _pos )
    }

    /// public javax.swing.text.Element javax.swing.text.AbstractDocument$LeafElement.getElement(int)

    /// public int javax.swing.text.AbstractDocument$LeafElement.getEndOffset()

    /// public int javax.swing.text.AbstractDocument$LeafElement.getStartOffset()

    /// public int javax.swing.text.AbstractDocument$LeafElement.getElementCount()

    /// public java.util.Enumeration javax.swing.text.AbstractDocument$LeafElement.children()

    /// public boolean javax.swing.text.AbstractDocument$LeafElement.getAllowsChildren()

    /// public boolean javax.swing.text.AbstractDocument$LeafElement.isLeaf()

}

