
import java_swift
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.event.DocumentListener ///

public protocol DocumentListener: java_util.EventListener {

    /// public abstract void javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent)

    func changedUpdate( e: DocumentEvent? )

    /// public abstract void javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent)

    func insertUpdate( e: DocumentEvent? )

    /// public abstract void javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent)

    func removeUpdate( e: DocumentEvent? )

}


open class DocumentListenerForward: java_util.EventListenerForward, DocumentListener {

    private static var DocumentListenerJNIClass: jclass?

    /// public abstract void javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent)

    private static var changedUpdate_MethodID_4: jmethodID?

    open func changedUpdate( e: DocumentEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "changedUpdate", methodSig: "(Ljavax/swing/event/DocumentEvent;)V", methodCache: &DocumentListenerForward.changedUpdate_MethodID_4, args: &__args, locals: &__locals )
    }

    open func changedUpdate( _ _e: DocumentEvent? ) {
        changedUpdate( e: _e )
    }

    /// public abstract void javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent)

    private static var insertUpdate_MethodID_5: jmethodID?

    open func insertUpdate( e: DocumentEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "insertUpdate", methodSig: "(Ljavax/swing/event/DocumentEvent;)V", methodCache: &DocumentListenerForward.insertUpdate_MethodID_5, args: &__args, locals: &__locals )
    }

    open func insertUpdate( _ _e: DocumentEvent? ) {
        insertUpdate( e: _e )
    }

    /// public abstract void javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent)

    private static var removeUpdate_MethodID_6: jmethodID?

    open func removeUpdate( e: DocumentEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeUpdate", methodSig: "(Ljavax/swing/event/DocumentEvent;)V", methodCache: &DocumentListenerForward.removeUpdate_MethodID_6, args: &__args, locals: &__locals )
    }

    open func removeUpdate( _ _e: DocumentEvent? ) {
        removeUpdate( e: _e )
    }

}

private typealias DocumentListener_changedUpdate_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func DocumentListener_changedUpdate_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    DocumentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).changedUpdate( e: e != nil ? DocumentEventForward( javaObject: e ) : nil )
}

private typealias DocumentListener_insertUpdate_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func DocumentListener_insertUpdate_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    DocumentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).insertUpdate( e: e != nil ? DocumentEventForward( javaObject: e ) : nil )
}

private typealias DocumentListener_removeUpdate_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func DocumentListener_removeUpdate_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    DocumentListenerLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).removeUpdate( e: e != nil ? DocumentEventForward( javaObject: e ) : nil )
}

fileprivate class DocumentListenerLocal_: JNILocalProxy<DocumentListener, Any> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let DocumentListener_changedUpdate_0_thunk: DocumentListener_changedUpdate_0_type = DocumentListener_changedUpdate_0
        natives.append( JNINativeMethod( name: strdup("__changedUpdate"), signature: strdup("(JLjavax/swing/event/DocumentEvent;)V"), fnPtr: unsafeBitCast( DocumentListener_changedUpdate_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let DocumentListener_insertUpdate_1_thunk: DocumentListener_insertUpdate_1_type = DocumentListener_insertUpdate_1
        natives.append( JNINativeMethod( name: strdup("__insertUpdate"), signature: strdup("(JLjavax/swing/event/DocumentEvent;)V"), fnPtr: unsafeBitCast( DocumentListener_insertUpdate_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let DocumentListener_removeUpdate_2_thunk: DocumentListener_removeUpdate_2_type = DocumentListener_removeUpdate_2
        natives.append( JNINativeMethod( name: strdup("__removeUpdate"), signature: strdup("(JLjavax/swing/event/DocumentEvent;)V"), fnPtr: unsafeBitCast( DocumentListener_removeUpdate_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/DocumentListenerProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

extension DocumentListener {

    public func localJavaObject( _ locals: UnsafeMutablePointer<[jobject]> ) -> jobject? {
        return DocumentListenerLocal_( owned: self, proto: self ).localJavaObject( locals )
    }

}

open class DocumentListenerBase: DocumentListener {

    public init() {}

    /// public abstract void javax.swing.event.DocumentListener.changedUpdate(javax.swing.event.DocumentEvent)

    open func changedUpdate( e: DocumentEvent? ) /**/ {
    }


    /// public abstract void javax.swing.event.DocumentListener.insertUpdate(javax.swing.event.DocumentEvent)

    open func insertUpdate( e: DocumentEvent? ) /**/ {
    }


    /// public abstract void javax.swing.event.DocumentListener.removeUpdate(javax.swing.event.DocumentEvent)

    open func removeUpdate( e: DocumentEvent? ) /**/ {
    }


}
