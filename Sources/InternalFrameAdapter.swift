
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.event.InternalFrameAdapter ///

open class InternalFrameAdapter: java_swift.JavaObject, InternalFrameListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var InternalFrameAdapterJNIClass: jclass?

    /// public javax.swing.event.InternalFrameAdapter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        let __object = JNIMethod.NewObject( className: "javax/swing/event/InternalFrameAdapter", classCache: &InternalFrameAdapter.InternalFrameAdapterJNIClass, methodSig: "()V", methodCache: &InternalFrameAdapter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameOpened(javax.swing.event.InternalFrameEvent)

    private static var internalFrameOpened_MethodID_2: jmethodID?

    open func internalFrameOpened( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameOpened", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameOpened_MethodID_2, args: &__args, locals: &__locals )
    }

    open func internalFrameOpened( _ _e: InternalFrameEvent? ) {
        internalFrameOpened( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameClosing(javax.swing.event.InternalFrameEvent)

    private static var internalFrameClosing_MethodID_3: jmethodID?

    open func internalFrameClosing( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameClosing", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameClosing_MethodID_3, args: &__args, locals: &__locals )
    }

    open func internalFrameClosing( _ _e: InternalFrameEvent? ) {
        internalFrameClosing( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameClosed(javax.swing.event.InternalFrameEvent)

    private static var internalFrameClosed_MethodID_4: jmethodID?

    open func internalFrameClosed( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameClosed", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameClosed_MethodID_4, args: &__args, locals: &__locals )
    }

    open func internalFrameClosed( _ _e: InternalFrameEvent? ) {
        internalFrameClosed( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameIconified(javax.swing.event.InternalFrameEvent)

    private static var internalFrameIconified_MethodID_5: jmethodID?

    open func internalFrameIconified( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameIconified", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameIconified_MethodID_5, args: &__args, locals: &__locals )
    }

    open func internalFrameIconified( _ _e: InternalFrameEvent? ) {
        internalFrameIconified( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameDeiconified(javax.swing.event.InternalFrameEvent)

    private static var internalFrameDeiconified_MethodID_6: jmethodID?

    open func internalFrameDeiconified( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameDeiconified", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameDeiconified_MethodID_6, args: &__args, locals: &__locals )
    }

    open func internalFrameDeiconified( _ _e: InternalFrameEvent? ) {
        internalFrameDeiconified( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameActivated(javax.swing.event.InternalFrameEvent)

    private static var internalFrameActivated_MethodID_7: jmethodID?

    open func internalFrameActivated( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameActivated", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameActivated_MethodID_7, args: &__args, locals: &__locals )
    }

    open func internalFrameActivated( _ _e: InternalFrameEvent? ) {
        internalFrameActivated( e: _e )
    }

    /// public void javax.swing.event.InternalFrameAdapter.internalFrameDeactivated(javax.swing.event.InternalFrameEvent)

    private static var internalFrameDeactivated_MethodID_8: jmethodID?

    open func internalFrameDeactivated( e: InternalFrameEvent? ) {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: e != nil ? e! as JNIObject : nil, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "internalFrameDeactivated", methodSig: "(Ljavax/swing/event/InternalFrameEvent;)V", methodCache: &InternalFrameAdapter.internalFrameDeactivated_MethodID_8, args: &__args, locals: &__locals )
    }

    open func internalFrameDeactivated( _ _e: InternalFrameEvent? ) {
        internalFrameDeactivated( e: _e )
    }

}

private typealias InternalFrameAdapter_internalFrameOpened_0_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameOpened_0( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameOpened( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameClosing_1_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameClosing_1( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameClosing( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameClosed_2_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameClosed_2( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameClosed( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameIconified_3_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameIconified_3( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameIconified( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameDeiconified_4_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameDeiconified_4( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameDeiconified( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameActivated_5_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameActivated_5( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameActivated( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_internalFrameDeactivated_6_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> ()

private func InternalFrameAdapter_internalFrameDeactivated_6( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ e: jobject? ) -> () {
    JNI.inNative = true;
    InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).internalFrameDeactivated( e: e != nil ? InternalFrameEvent( javaObject: e ) : nil )
    JNI.inNative = false;
}

private typealias InternalFrameAdapter_equals_10_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong, _: jobject? ) -> jboolean

private func InternalFrameAdapter_equals_10( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong, _ arg0: jobject? ) -> jboolean {
    JNI.inNative = true;
    let __return = InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).equals( arg0: arg0 != nil ? java_swift.JavaObject( javaObject: arg0 ) : nil )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).z, &locals, removeLast: true )
}

private typealias InternalFrameAdapter_toString_11_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jobject?

private func InternalFrameAdapter_toString_11( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jobject? {
    JNI.inNative = true;
    let __return = InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).toString( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).l, &locals, removeLast: true )
}

private typealias InternalFrameAdapter_hashCode_12_type = @convention(c) ( _: UnsafeMutablePointer<JNIEnv?>, _: jobject?, _: jlong ) -> jint

private func InternalFrameAdapter_hashCode_12( _ __env: UnsafeMutablePointer<JNIEnv?>, _ __this: jobject?, _ __swiftObject: jlong ) -> jint {
    JNI.inNative = true;
    let __return = InternalFrameAdapterLocal_.swiftObject( jniEnv: __env, javaObject: __this, swiftObject: __swiftObject ).hashCode( )
    JNI.inNative = false;
    var locals = [jobject]()
    return JNI.check( JNIType.toJava( value: __return, locals: &locals ).i, &locals, removeLast: true )
}

fileprivate class InternalFrameAdapterLocal_: JNIObjectProxy<InternalFrameAdapter> {

    fileprivate static let _proxyClass: jclass = {
        var natives = [JNINativeMethod]()

        let InternalFrameAdapter_internalFrameOpened_0_thunk: InternalFrameAdapter_internalFrameOpened_0_type = InternalFrameAdapter_internalFrameOpened_0
        natives.append( JNINativeMethod( name: strdup("__internalFrameOpened"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameOpened_0_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameClosing_1_thunk: InternalFrameAdapter_internalFrameClosing_1_type = InternalFrameAdapter_internalFrameClosing_1
        natives.append( JNINativeMethod( name: strdup("__internalFrameClosing"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameClosing_1_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameClosed_2_thunk: InternalFrameAdapter_internalFrameClosed_2_type = InternalFrameAdapter_internalFrameClosed_2
        natives.append( JNINativeMethod( name: strdup("__internalFrameClosed"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameClosed_2_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameIconified_3_thunk: InternalFrameAdapter_internalFrameIconified_3_type = InternalFrameAdapter_internalFrameIconified_3
        natives.append( JNINativeMethod( name: strdup("__internalFrameIconified"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameIconified_3_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameDeiconified_4_thunk: InternalFrameAdapter_internalFrameDeiconified_4_type = InternalFrameAdapter_internalFrameDeiconified_4
        natives.append( JNINativeMethod( name: strdup("__internalFrameDeiconified"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameDeiconified_4_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameActivated_5_thunk: InternalFrameAdapter_internalFrameActivated_5_type = InternalFrameAdapter_internalFrameActivated_5
        natives.append( JNINativeMethod( name: strdup("__internalFrameActivated"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameActivated_5_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_internalFrameDeactivated_6_thunk: InternalFrameAdapter_internalFrameDeactivated_6_type = InternalFrameAdapter_internalFrameDeactivated_6
        natives.append( JNINativeMethod( name: strdup("__internalFrameDeactivated"), signature: strdup("(JLjavax/swing/event/InternalFrameEvent;)V"), fnPtr: unsafeBitCast( InternalFrameAdapter_internalFrameDeactivated_6_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_equals_10_thunk: InternalFrameAdapter_equals_10_type = InternalFrameAdapter_equals_10
        natives.append( JNINativeMethod( name: strdup("__equals"), signature: strdup("(JLjava/lang/Object;)Z"), fnPtr: unsafeBitCast( InternalFrameAdapter_equals_10_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_toString_11_thunk: InternalFrameAdapter_toString_11_type = InternalFrameAdapter_toString_11
        natives.append( JNINativeMethod( name: strdup("__toString"), signature: strdup("(J)Ljava/lang/String;"), fnPtr: unsafeBitCast( InternalFrameAdapter_toString_11_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let InternalFrameAdapter_hashCode_12_thunk: InternalFrameAdapter_hashCode_12_type = InternalFrameAdapter_hashCode_12
        natives.append( JNINativeMethod( name: strdup("__hashCode"), signature: strdup("(J)I"), fnPtr: unsafeBitCast( InternalFrameAdapter_hashCode_12_thunk, to: UnsafeMutableRawPointer.self ) ) )

        natives.append( JNINativeMethod( name: strdup("__finalize"), signature: strdup("(J)V"), fnPtr: unsafeBitCast( JNIReleasableProxy__finalize_thunk, to: UnsafeMutableRawPointer.self ) ) )

        let clazz = JNI.FindClass( proxyClassName() )
        withUnsafePointer(to: &natives[0]) {
            nativesPtr in
            if JNI.api.RegisterNatives( JNI.env, clazz, nativesPtr, jint(natives.count) ) != jint(JNI_OK) {
                JNI.report( "Unable to register java natives" )
            }
        }

        defer { JNI.DeleteLocalRef( clazz ) }
        return JNI.api.NewGlobalRef( JNI.env, clazz )!
    }()

    override open class func proxyClassName() -> String { return "org/swiftjava/javax_swing/InternalFrameAdapterProxy" }
    override open class func proxyClass() -> jclass? { return _proxyClass }

}

open class InternalFrameAdapterBase: InternalFrameAdapter {

    private static var InternalFrameAdapterBaseJNIClass: jclass? = InternalFrameAdapterLocal_.proxyClass()

    private lazy var __local: InternalFrameAdapterLocal_? = InternalFrameAdapterLocal_( owned: self, proto: self )

    override open func clearLocal() {
        __local = nil
    }

    open func inherit( _ parent: JNIObjectProtocol ) {
        parent.withJavaObject {
            self.javaObject = $0
            self.__local?.takeOwnership(javaObject: $0)
        }
    }

    /// public javax.swing.event.InternalFrameAdapter()

    private static var new_MethodID_9: jmethodID?

    public convenience init() {
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        var __locals = [jobject]()

        self.init( javaObject: nil )
        __args[0] = __local!.swiftValue()

        let __object = JNIMethod.NewObject( className: "org/swiftjava/javax_swing/InternalFrameAdapterProxy", classCache: &InternalFrameAdapterBase.InternalFrameAdapterBaseJNIClass, methodSig: "(J)V", methodCache: &InternalFrameAdapterBase.new_MethodID_9, args: &__args, locals: &__locals )
        self.javaObject = __object
        JNI.DeleteLocalRef( __object )
    }

}
