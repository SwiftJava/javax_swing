
import java_swift
import java_awt
import java_util

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext ///

open class AccessibleHTML_TableElementInfo_TableAccessibleContext: /* class javax.swing.text.html.AccessibleHTML$HTMLAccessibleContext */ UnavailableObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var AccessibleHTML_TableElementInfo_TableAccessibleContextJNIClass: jclass?

    /// private javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext$AccessibleHeadersTable javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.rowHeadersTable

    /// final javax.swing.text.html.AccessibleHTML$TableElementInfo javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.this$1

    // Skipping field: true false false false false false 

    /// protected javax.swing.text.html.AccessibleHTML$ElementInfo javax.swing.text.html.AccessibleHTML$HTMLAccessibleContext.elementInfo

    private static var elementInfo_FieldID: jfieldID?

    open var elementInfo: /* class javax.swing.text.html.AccessibleHTML$ElementInfo */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "elementInfo", fieldType: "Ljavax/swing/text/html/AccessibleHTML$ElementInfo;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.elementInfo_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.swing.text.html.AccessibleHTML$ElementInfo */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "elementInfo", fieldType: "Ljavax/swing/text/html/AccessibleHTML$ElementInfo;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.elementInfo_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// final javax.swing.text.html.AccessibleHTML javax.swing.text.html.AccessibleHTML$HTMLAccessibleContext.this$0

    // Skipping field: true false false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_ACTION_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_CARET_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_CHILD_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_COMPONENT_BOUNDS_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_DESCRIPTION_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_HYPERTEXT_OFFSET

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_INVALIDATE_CHILDREN

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_NAME_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_SELECTION_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_STATE_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_CAPTION_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_MODEL_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_ROW_HEADER_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TABLE_SUMMARY_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_TEXT_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_VALUE_PROPERTY

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.accessibility.AccessibleContext.ACCESSIBLE_VISIBLE_DATA_PROPERTY

    // Skipping field: false true false false false false 

    /// private java.beans.PropertyChangeSupport javax.accessibility.AccessibleContext.accessibleChangeSupport

    /// protected java.lang.String javax.accessibility.AccessibleContext.accessibleDescription

    private static var accessibleDescription_FieldID: jfieldID?

    open var accessibleDescription: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleDescription", fieldType: "Ljava/lang/String;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleDescription_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleDescription", fieldType: "Ljava/lang/String;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleDescription_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.lang.String javax.accessibility.AccessibleContext.accessibleName

    private static var accessibleName_FieldID: jfieldID?

    open var accessibleName: String! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleName", fieldType: "Ljava/lang/String;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleName_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleName", fieldType: "Ljava/lang/String;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleName_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.accessibility.Accessible javax.accessibility.AccessibleContext.accessibleParent

    private static var accessibleParent_FieldID: jfieldID?

    open var accessibleParent: /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleParent", fieldType: "Ljavax/accessibility/Accessible;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleParent_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleParent", fieldType: "Ljavax/accessibility/Accessible;", fieldCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.accessibleParent_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private java.lang.Object javax.accessibility.AccessibleContext.nativeAXResource

    /// private javax.accessibility.AccessibleRelationSet javax.accessibility.AccessibleContext.relationSet

    /// private volatile sun.awt.AppContext javax.accessibility.AccessibleContext.targetAppContext

    /// public javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext(javax.swing.text.html.AccessibleHTML$TableElementInfo,javax.swing.text.html.AccessibleHTML$ElementInfo)

    private static var new_MethodID_1: jmethodID?

    public convenience init( this_1: /* class javax.swing.text.html.AccessibleHTML$TableElementInfo */ UnavailableObject?, elementInfo: /* class javax.swing.text.html.AccessibleHTML$ElementInfo */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: this_1, locals: &__locals )
        __args[1] = JNIType.toJava( value: elementInfo, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/html/AccessibleHTML$TableElementInfo$TableAccessibleContext", classCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.AccessibleHTML_TableElementInfo_TableAccessibleContextJNIClass, methodSig: "(Ljavax/swing/text/html/AccessibleHTML$TableElementInfo;Ljavax/swing/text/html/AccessibleHTML$ElementInfo;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _this_1: /* class javax.swing.text.html.AccessibleHTML$TableElementInfo */ UnavailableObject?, _ _elementInfo: /* class javax.swing.text.html.AccessibleHTML$ElementInfo */ UnavailableObject? ) {
        self.init( this_1: _this_1, elementInfo: _elementInfo )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.addFocusListener(java.awt.event.FocusListener)

    private static var addFocusListener_MethodID_2: jmethodID?

    open func addFocusListener( l: java_awt.FocusListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addFocusListener", methodSig: "(Ljava/awt/event/FocusListener;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.addFocusListener_MethodID_2, args: &__args, locals: &__locals )
    }

    open func addFocusListener( _ _l: java_awt.FocusListener? ) {
        addFocusListener( l: _l )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.addRowHeader(javax.swing.text.html.AccessibleHTML$TableElementInfo$TableCellElementInfo,int)

    private static var addRowHeader_MethodID_3: jmethodID?

    open func addRowHeader( cellInfo: /* class javax.swing.text.html.AccessibleHTML$TableElementInfo$TableCellElementInfo */ UnavailableObject?, rowNumber: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: cellInfo, locals: &__locals )
        __args[1] = jvalue( i: jint(rowNumber) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addRowHeader", methodSig: "(Ljavax/swing/text/html/AccessibleHTML$TableElementInfo$TableCellElementInfo;I)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.addRowHeader_MethodID_3, args: &__args, locals: &__locals )
    }

    open func addRowHeader( _ _cellInfo: /* class javax.swing.text.html.AccessibleHTML$TableElementInfo$TableCellElementInfo */ UnavailableObject?, _ _rowNumber: Int ) {
        addRowHeader( cellInfo: _cellInfo, rowNumber: _rowNumber )
    }

    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.contains(java.awt.Point)

    private static var contains_MethodID_4: jmethodID?

    open func contains( p: java_awt.Point? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "contains", methodSig: "(Ljava/awt/Point;)Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.contains_MethodID_4, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func contains( _ _p: java_awt.Point? ) -> Bool {
        return contains( p: _p )
    }

    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleAt(int,int)

    private static var getAccessibleAt_MethodID_5: jmethodID?

    open func getAccessibleAt( r: Int, c: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleAt", methodSig: "(II)Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleAt_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleAt( _ _r: Int, _ _c: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        return getAccessibleAt( r: _r, c: _c )
    }

    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleAt(java.awt.Point)

    private static var getAccessibleAt_MethodID_6: jmethodID?

    open func getAccessibleAt( p: java_awt.Point? ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleAt", methodSig: "(Ljava/awt/Point;)Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleAt_MethodID_6, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleAt( _ _p: java_awt.Point? ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        return getAccessibleAt( p: _p )
    }

    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleCaption()

    private static var getAccessibleCaption_MethodID_7: jmethodID?

    open func getAccessibleCaption() -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleCaption", methodSig: "()Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleCaption_MethodID_7, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleChild(int)

    private static var getAccessibleChild_MethodID_8: jmethodID?

    open func getAccessibleChild( i: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(i) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleChild", methodSig: "(I)Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleChild_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleChild( _ _i: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        return getAccessibleChild( i: _i )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleChildrenCount()

    private static var getAccessibleChildrenCount_MethodID_9: jmethodID?

    open func getAccessibleChildrenCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleChildrenCount", methodSig: "()I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleChildrenCount_MethodID_9, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumn(int)

    private static var getAccessibleColumn_MethodID_10: jmethodID?

    open func getAccessibleColumn( index: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleColumn", methodSig: "(I)I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumn_MethodID_10, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getAccessibleColumn( _ _index: Int ) -> Int {
        return getAccessibleColumn( index: _index )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumnCount()

    private static var getAccessibleColumnCount_MethodID_11: jmethodID?

    open func getAccessibleColumnCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleColumnCount", methodSig: "()I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumnCount_MethodID_11, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumnDescription(int)

    private static var getAccessibleColumnDescription_MethodID_12: jmethodID?

    open func getAccessibleColumnDescription( c: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleColumnDescription", methodSig: "(I)Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumnDescription_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleColumnDescription( _ _c: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        return getAccessibleColumnDescription( c: _c )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumnExtentAt(int,int)

    private static var getAccessibleColumnExtentAt_MethodID_13: jmethodID?

    open func getAccessibleColumnExtentAt( r: Int, c: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleColumnExtentAt", methodSig: "(II)I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumnExtentAt_MethodID_13, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getAccessibleColumnExtentAt( _ _r: Int, _ _c: Int ) -> Int {
        return getAccessibleColumnExtentAt( r: _r, c: _c )
    }

    /// public java.lang.String javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumnHeader(int)

    private static var getAccessibleColumnHeader_MethodID_14: jmethodID?

    open func getAccessibleColumnHeader( c: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleColumnHeader", methodSig: "(I)Ljava/lang/String;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumnHeader_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getAccessibleColumnHeader( _ _c: Int ) -> String! {
        return getAccessibleColumnHeader( c: _c )
    }

    /// public javax.accessibility.AccessibleTable javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleColumnHeader()

    private static var getAccessibleColumnHeader_MethodID_15: jmethodID?

    open func getAccessibleColumnHeader() -> /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleColumnHeader", methodSig: "()Ljavax/accessibility/AccessibleTable;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleColumnHeader_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.AccessibleTable */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleComponent javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleComponent()

    private static var getAccessibleComponent_MethodID_16: jmethodID?

    open func getAccessibleComponent() -> /* interface javax.accessibility.AccessibleComponent */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleComponent", methodSig: "()Ljavax/accessibility/AccessibleComponent;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleComponent_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.AccessibleComponent */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleContext javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleContext()

    private static var getAccessibleContext_MethodID_17: jmethodID?

    open func getAccessibleContext() -> /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleContext", methodSig: "()Ljavax/accessibility/AccessibleContext;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleContext_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleDescription()

    private static var getAccessibleDescription_MethodID_18: jmethodID?

    open func getAccessibleDescription() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleDescription", methodSig: "()Ljava/lang/String;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleDescription_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleIndex(int,int)

    private static var getAccessibleIndex_MethodID_19: jmethodID?

    open func getAccessibleIndex( r: Int, c: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleIndex", methodSig: "(II)I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleIndex_MethodID_19, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getAccessibleIndex( _ _r: Int, _ _c: Int ) -> Int {
        return getAccessibleIndex( r: _r, c: _c )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleIndexInParent()

    private static var getAccessibleIndexInParent_MethodID_20: jmethodID?

    open func getAccessibleIndexInParent() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleIndexInParent", methodSig: "()I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleIndexInParent_MethodID_20, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleName()

    private static var getAccessibleName_MethodID_21: jmethodID?

    open func getAccessibleName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleName", methodSig: "()Ljava/lang/String;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleName_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleRole javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRole()

    private static var getAccessibleRole_MethodID_22: jmethodID?

    open func getAccessibleRole() -> /* class javax.accessibility.AccessibleRole */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleRole", methodSig: "()Ljavax/accessibility/AccessibleRole;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRole_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.accessibility.AccessibleRole */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRow(int)

    private static var getAccessibleRow_MethodID_23: jmethodID?

    open func getAccessibleRow( index: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(index) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleRow", methodSig: "(I)I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRow_MethodID_23, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getAccessibleRow( _ _index: Int ) -> Int {
        return getAccessibleRow( index: _index )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRowCount()

    private static var getAccessibleRowCount_MethodID_24: jmethodID?

    open func getAccessibleRowCount() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleRowCount", methodSig: "()I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRowCount_MethodID_24, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRowDescription(int)

    private static var getAccessibleRowDescription_MethodID_25: jmethodID?

    open func getAccessibleRowDescription( r: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(r) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleRowDescription", methodSig: "(I)Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRowDescription_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }

    open func getAccessibleRowDescription( _ _r: Int ) -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        return getAccessibleRowDescription( r: _r )
    }

    /// public int javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRowExtentAt(int,int)

    private static var getAccessibleRowExtentAt_MethodID_26: jmethodID?

    open func getAccessibleRowExtentAt( r: Int, c: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getAccessibleRowExtentAt", methodSig: "(II)I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRowExtentAt_MethodID_26, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getAccessibleRowExtentAt( _ _r: Int, _ _c: Int ) -> Int {
        return getAccessibleRowExtentAt( r: _r, c: _c )
    }

    /// public java.lang.String javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRowHeader(int)

    private static var getAccessibleRowHeader_MethodID_27: jmethodID?

    open func getAccessibleRowHeader( r: Int ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(r) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleRowHeader", methodSig: "(I)Ljava/lang/String;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRowHeader_MethodID_27, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getAccessibleRowHeader( _ _r: Int ) -> String! {
        return getAccessibleRowHeader( r: _r )
    }

    /// public javax.accessibility.AccessibleTable javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleRowHeader()

    private static var getAccessibleRowHeader_MethodID_28: jmethodID?

    open func getAccessibleRowHeader() -> /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleRowHeader", methodSig: "()Ljavax/accessibility/AccessibleTable;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleRowHeader_MethodID_28, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.AccessibleTable */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleStateSet javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleStateSet()

    private static var getAccessibleStateSet_MethodID_29: jmethodID?

    open func getAccessibleStateSet() -> /* class javax.accessibility.AccessibleStateSet */ UnavailableObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleStateSet", methodSig: "()Ljavax/accessibility/AccessibleStateSet;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleStateSet_MethodID_29, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* class javax.accessibility.AccessibleStateSet */ UnavailableObject( javaObject: __return ) : nil
    }


    /// public javax.accessibility.Accessible javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleSummary()

    private static var getAccessibleSummary_MethodID_30: jmethodID?

    open func getAccessibleSummary() -> /* interface javax.accessibility.Accessible */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleSummary", methodSig: "()Ljavax/accessibility/Accessible;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleSummary_MethodID_30, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.Accessible */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleTable javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getAccessibleTable()

    private static var getAccessibleTable_MethodID_31: jmethodID?

    open func getAccessibleTable() -> /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getAccessibleTable", methodSig: "()Ljavax/accessibility/AccessibleTable;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getAccessibleTable_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? /* interface javax.accessibility.AccessibleTable */ UnavailableProtocolForward( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getBackground()

    private static var getBackground_MethodID_32: jmethodID?

    open func getBackground() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackground", methodSig: "()Ljava/awt/Color;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getBackground_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Rectangle javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getBounds()

    private static var getBounds_MethodID_33: jmethodID?

    open func getBounds() -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBounds", methodSig: "()Ljava/awt/Rectangle;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getBounds_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }


    /// public java.awt.Cursor javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getCursor()

    private static var getCursor_MethodID_34: jmethodID?

    open func getCursor() -> java_awt.Cursor! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCursor", methodSig: "()Ljava/awt/Cursor;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getCursor_MethodID_34, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Cursor( javaObject: __return ) : nil
    }


    /// public java.awt.Font javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getFont()

    private static var getFont_MethodID_35: jmethodID?

    open func getFont() -> java_awt.Font! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFont", methodSig: "()Ljava/awt/Font;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getFont_MethodID_35, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Font( javaObject: __return ) : nil
    }


    /// public java.awt.FontMetrics javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getFontMetrics(java.awt.Font)

    private static var getFontMetrics_MethodID_36: jmethodID?

    open func getFontMetrics( f: java_awt.Font? ) -> java_awt.FontMetrics! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: f, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFontMetrics", methodSig: "(Ljava/awt/Font;)Ljava/awt/FontMetrics;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getFontMetrics_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.FontMetrics( javaObject: __return ) : nil
    }

    open func getFontMetrics( _ _f: java_awt.Font? ) -> java_awt.FontMetrics! {
        return getFontMetrics( f: _f )
    }

    /// public java.awt.Color javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getForeground()

    private static var getForeground_MethodID_37: jmethodID?

    open func getForeground() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getForeground", methodSig: "()Ljava/awt/Color;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getForeground_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.util.Locale javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getLocale() throws java.awt.IllegalComponentStateException

    private static var getLocale_MethodID_38: jmethodID?

    open func getLocale() throws /* java.awt.IllegalComponentStateException */ -> java_util.JavaLocale! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocale", methodSig: "()Ljava/util/Locale;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getLocale_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_awt.IllegalComponentStateException( javaObject: throwable )
        }
        return __return != nil ? java_util.JavaLocale( javaObject: __return ) : nil
    }


    /// public java.awt.Point javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getLocation()

    private static var getLocation_MethodID_39: jmethodID?

    open func getLocation() -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocation", methodSig: "()Ljava/awt/Point;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getLocation_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }


    /// public java.awt.Point javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getLocationOnScreen()

    private static var getLocationOnScreen_MethodID_40: jmethodID?

    open func getLocationOnScreen() -> java_awt.Point! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLocationOnScreen", methodSig: "()Ljava/awt/Point;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getLocationOnScreen_MethodID_40, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Point( javaObject: __return ) : nil
    }


    /// public int[] javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getSelectedAccessibleColumns()

    private static var getSelectedAccessibleColumns_MethodID_41: jmethodID?

    open func getSelectedAccessibleColumns() -> [Int32]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedAccessibleColumns", methodSig: "()[I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getSelectedAccessibleColumns_MethodID_41, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Int32].self, from: __return )
    }


    /// public int[] javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getSelectedAccessibleRows()

    private static var getSelectedAccessibleRows_MethodID_42: jmethodID?

    open func getSelectedAccessibleRows() -> [Int32]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedAccessibleRows", methodSig: "()[I", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getSelectedAccessibleRows_MethodID_42, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [Int32].self, from: __return )
    }


    /// public java.awt.Dimension javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.getSize()

    private static var getSize_MethodID_43: jmethodID?

    open func getSize() -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.getSize_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }


    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isAccessibleColumnSelected(int)

    private static var isAccessibleColumnSelected_MethodID_44: jmethodID?

    open func isAccessibleColumnSelected( c: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAccessibleColumnSelected", methodSig: "(I)Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isAccessibleColumnSelected_MethodID_44, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isAccessibleColumnSelected( _ _c: Int ) -> Bool {
        return isAccessibleColumnSelected( c: _c )
    }

    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isAccessibleRowSelected(int)

    private static var isAccessibleRowSelected_MethodID_45: jmethodID?

    open func isAccessibleRowSelected( r: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(r) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAccessibleRowSelected", methodSig: "(I)Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isAccessibleRowSelected_MethodID_45, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isAccessibleRowSelected( _ _r: Int ) -> Bool {
        return isAccessibleRowSelected( r: _r )
    }

    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isAccessibleSelected(int,int)

    private static var isAccessibleSelected_MethodID_46: jmethodID?

    open func isAccessibleSelected( r: Int, c: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = jvalue( i: jint(c) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isAccessibleSelected", methodSig: "(II)Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isAccessibleSelected_MethodID_46, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func isAccessibleSelected( _ _r: Int, _ _c: Int ) -> Bool {
        return isAccessibleSelected( r: _r, c: _c )
    }

    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isEnabled()

    private static var isEnabled_MethodID_47: jmethodID?

    open func isEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEnabled", methodSig: "()Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isEnabled_MethodID_47, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isFocusTraversable()

    private static var isFocusTraversable_MethodID_48: jmethodID?

    open func isFocusTraversable() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isFocusTraversable", methodSig: "()Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isFocusTraversable_MethodID_48, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isShowing()

    private static var isShowing_MethodID_49: jmethodID?

    open func isShowing() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isShowing", methodSig: "()Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isShowing_MethodID_49, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.isVisible()

    private static var isVisible_MethodID_50: jmethodID?

    open func isVisible() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isVisible", methodSig: "()Z", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.isVisible_MethodID_50, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.removeFocusListener(java.awt.event.FocusListener)

    private static var removeFocusListener_MethodID_51: jmethodID?

    open func removeFocusListener( l: java_awt.FocusListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: l, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeFocusListener", methodSig: "(Ljava/awt/event/FocusListener;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.removeFocusListener_MethodID_51, args: &__args, locals: &__locals )
    }

    open func removeFocusListener( _ _l: java_awt.FocusListener? ) {
        removeFocusListener( l: _l )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.requestFocus()

    private static var requestFocus_MethodID_52: jmethodID?

    open func requestFocus() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "requestFocus", methodSig: "()V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.requestFocus_MethodID_52, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleCaption(javax.accessibility.Accessible)

    private static var setAccessibleCaption_MethodID_53: jmethodID?

    open func setAccessibleCaption( a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleCaption", methodSig: "(Ljavax/accessibility/Accessible;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleCaption_MethodID_53, args: &__args, locals: &__locals )
    }

    open func setAccessibleCaption( _ _a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        setAccessibleCaption( a: _a )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleColumnDescription(int,javax.accessibility.Accessible)

    private static var setAccessibleColumnDescription_MethodID_54: jmethodID?

    open func setAccessibleColumnDescription( c: Int, a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(c) )
        __args[1] = JNIType.toJava( value: a, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleColumnDescription", methodSig: "(ILjavax/accessibility/Accessible;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleColumnDescription_MethodID_54, args: &__args, locals: &__locals )
    }

    open func setAccessibleColumnDescription( _ _c: Int, _ _a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        setAccessibleColumnDescription( c: _c, a: _a )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleColumnHeader(javax.accessibility.AccessibleTable)

    private static var setAccessibleColumnHeader_MethodID_55: jmethodID?

    open func setAccessibleColumnHeader( table: /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: table, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleColumnHeader", methodSig: "(Ljavax/accessibility/AccessibleTable;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleColumnHeader_MethodID_55, args: &__args, locals: &__locals )
    }

    open func setAccessibleColumnHeader( _ _table: /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol? ) {
        setAccessibleColumnHeader( table: _table )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleRowDescription(int,javax.accessibility.Accessible)

    private static var setAccessibleRowDescription_MethodID_56: jmethodID?

    open func setAccessibleRowDescription( r: Int, a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(r) )
        __args[1] = JNIType.toJava( value: a, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleRowDescription", methodSig: "(ILjavax/accessibility/Accessible;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleRowDescription_MethodID_56, args: &__args, locals: &__locals )
    }

    open func setAccessibleRowDescription( _ _r: Int, _ _a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        setAccessibleRowDescription( r: _r, a: _a )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleRowHeader(javax.accessibility.AccessibleTable)

    private static var setAccessibleRowHeader_MethodID_57: jmethodID?

    open func setAccessibleRowHeader( table: /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: table, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleRowHeader", methodSig: "(Ljavax/accessibility/AccessibleTable;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleRowHeader_MethodID_57, args: &__args, locals: &__locals )
    }

    open func setAccessibleRowHeader( _ _table: /* interface javax.accessibility.AccessibleTable */ UnavailableProtocol? ) {
        setAccessibleRowHeader( table: _table )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setAccessibleSummary(javax.accessibility.Accessible)

    private static var setAccessibleSummary_MethodID_58: jmethodID?

    open func setAccessibleSummary( a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: a, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setAccessibleSummary", methodSig: "(Ljavax/accessibility/Accessible;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setAccessibleSummary_MethodID_58, args: &__args, locals: &__locals )
    }

    open func setAccessibleSummary( _ _a: /* interface javax.accessibility.Accessible */ UnavailableProtocol? ) {
        setAccessibleSummary( a: _a )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setBackground(java.awt.Color)

    private static var setBackground_MethodID_59: jmethodID?

    open func setBackground( c: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setBackground_MethodID_59, args: &__args, locals: &__locals )
    }

    open func setBackground( _ _c: java_awt.Color? ) {
        setBackground( c: _c )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setBounds(java.awt.Rectangle)

    private static var setBounds_MethodID_60: jmethodID?

    open func setBounds( r: java_awt.Rectangle? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: r, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBounds", methodSig: "(Ljava/awt/Rectangle;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setBounds_MethodID_60, args: &__args, locals: &__locals )
    }

    open func setBounds( _ _r: java_awt.Rectangle? ) {
        setBounds( r: _r )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setCursor(java.awt.Cursor)

    private static var setCursor_MethodID_61: jmethodID?

    open func setCursor( cursor: java_awt.Cursor? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: cursor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCursor", methodSig: "(Ljava/awt/Cursor;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setCursor_MethodID_61, args: &__args, locals: &__locals )
    }

    open func setCursor( _ _cursor: java_awt.Cursor? ) {
        setCursor( cursor: _cursor )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setEnabled(boolean)

    private static var setEnabled_MethodID_62: jmethodID?

    open func setEnabled( b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEnabled", methodSig: "(Z)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setEnabled_MethodID_62, args: &__args, locals: &__locals )
    }

    open func setEnabled( _ _b: Bool ) {
        setEnabled( b: _b )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setFont(java.awt.Font)

    private static var setFont_MethodID_63: jmethodID?

    open func setFont( f: java_awt.Font? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: f, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFont", methodSig: "(Ljava/awt/Font;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setFont_MethodID_63, args: &__args, locals: &__locals )
    }

    open func setFont( _ _f: java_awt.Font? ) {
        setFont( f: _f )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setForeground(java.awt.Color)

    private static var setForeground_MethodID_64: jmethodID?

    open func setForeground( c: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: c, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setForeground", methodSig: "(Ljava/awt/Color;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setForeground_MethodID_64, args: &__args, locals: &__locals )
    }

    open func setForeground( _ _c: java_awt.Color? ) {
        setForeground( c: _c )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setLocation(java.awt.Point)

    private static var setLocation_MethodID_65: jmethodID?

    open func setLocation( p: java_awt.Point? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: p, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLocation", methodSig: "(Ljava/awt/Point;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setLocation_MethodID_65, args: &__args, locals: &__locals )
    }

    open func setLocation( _ _p: java_awt.Point? ) {
        setLocation( p: _p )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setSize(java.awt.Dimension)

    private static var setSize_MethodID_66: jmethodID?

    open func setSize( d: java_awt.Dimension? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: d, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSize", methodSig: "(Ljava/awt/Dimension;)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setSize_MethodID_66, args: &__args, locals: &__locals )
    }

    open func setSize( _ _d: java_awt.Dimension? ) {
        setSize( d: _d )
    }

    /// public void javax.swing.text.html.AccessibleHTML$TableElementInfo$TableAccessibleContext.setVisible(boolean)

    private static var setVisible_MethodID_67: jmethodID?

    open func setVisible( b: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(b ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setVisible", methodSig: "(Z)V", methodCache: &AccessibleHTML_TableElementInfo_TableAccessibleContext.setVisible_MethodID_67, args: &__args, locals: &__locals )
    }

    open func setVisible( _ _b: Bool ) {
        setVisible( b: _b )
    }

}

