
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.UIManager$LookAndFeelInfo ///

open class UIManager_LookAndFeelInfo: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var UIManager_LookAndFeelInfoJNIClass: jclass?

    /// private java.lang.String javax.swing.UIManager$LookAndFeelInfo.className

    /// private java.lang.String javax.swing.UIManager$LookAndFeelInfo.name

    /// public javax.swing.UIManager$LookAndFeelInfo(java.lang.String,java.lang.String)

    private static var new_MethodID_1: jmethodID?

    public convenience init( name: String?, className: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: name, locals: &__locals )
        __args[1] = JNIType.toJava( value: className, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/UIManager$LookAndFeelInfo", classCache: &UIManager_LookAndFeelInfo.UIManager_LookAndFeelInfoJNIClass, methodSig: "(Ljava/lang/String;Ljava/lang/String;)V", methodCache: &UIManager_LookAndFeelInfo.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _name: String?, _ _className: String? ) {
        self.init( name: _name, className: _className )
    }

    /// public java.lang.String javax.swing.UIManager$LookAndFeelInfo.getClassName()

    private static var getClassName_MethodID_2: jmethodID?

    open func getClassName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClassName", methodSig: "()Ljava/lang/String;", methodCache: &UIManager_LookAndFeelInfo.getClassName_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.UIManager$LookAndFeelInfo.getName()

    private static var getName_MethodID_3: jmethodID?

    open func getName() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getName", methodSig: "()Ljava/lang/String;", methodCache: &UIManager_LookAndFeelInfo.getName_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.UIManager$LookAndFeelInfo.toString()

    // Skipping method: false true false false false 

}

