
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.basic.BasicPopupMenuUI ///

open class BasicPopupMenuUI: PopupMenuUI {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BasicPopupMenuUIJNIClass: jclass?

    /// static final java.lang.StringBuilder javax.swing.plaf.basic.BasicPopupMenuUI.MENU_KEYBOARD_HELPER_KEY

    // Skipping field: true false false false false false 

    /// static final java.lang.StringBuilder javax.swing.plaf.basic.BasicPopupMenuUI.MOUSE_GRABBER_KEY

    // Skipping field: true false false false false false 

    /// private static boolean javax.swing.plaf.basic.BasicPopupMenuUI.checkedUnpostPopup

    /// private static boolean javax.swing.plaf.basic.BasicPopupMenuUI.unpostPopup

    /// private javax.swing.event.MenuKeyListener javax.swing.plaf.basic.BasicPopupMenuUI.menuKeyListener

    /// protected javax.swing.JPopupMenu javax.swing.plaf.basic.BasicPopupMenuUI.popupMenu

    private static var popupMenu_FieldID: jfieldID?

    open var popupMenu: JPopupMenu! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "popupMenu", fieldType: "Ljavax/swing/JPopupMenu;", fieldCache: &BasicPopupMenuUI.popupMenu_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JPopupMenu( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "popupMenu", fieldType: "Ljavax/swing/JPopupMenu;", fieldCache: &BasicPopupMenuUI.popupMenu_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private transient javax.swing.event.PopupMenuListener javax.swing.plaf.basic.BasicPopupMenuUI.popupMenuListener

    /// public javax.swing.plaf.basic.BasicPopupMenuUI()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/basic/BasicPopupMenuUI", classCache: &BasicPopupMenuUI.BasicPopupMenuUIJNIClass, methodSig: "()V", methodCache: &BasicPopupMenuUI.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static boolean javax.swing.plaf.basic.BasicPopupMenuUI.access$300(javax.swing.MenuElement,javax.swing.MenuElement)

    // Skipping method: true false false false false 

    /// private static boolean javax.swing.plaf.basic.BasicPopupMenuUI.checkInvokerEqual(javax.swing.MenuElement,javax.swing.MenuElement)

    /// public static javax.swing.plaf.ComponentUI javax.swing.plaf.basic.BasicPopupMenuUI.createUI(javax.swing.JComponent)

    private static var createUI_MethodID_2: jmethodID?

    open class func createUI( x: JComponent? ) -> ComponentUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: x, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/plaf/basic/BasicPopupMenuUI", classCache: &BasicPopupMenuUIJNIClass, methodName: "createUI", methodSig: "(Ljavax/swing/JComponent;)Ljavax/swing/plaf/ComponentUI;", methodCache: &createUI_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? ComponentUI( javaObject: __return ) : nil
    }

    override open class func createUI( _ _x: JComponent? ) -> ComponentUI! {
        return createUI( x: _x )
    }

    /// static javax.swing.MenuElement javax.swing.plaf.basic.BasicPopupMenuUI.findEnabledChild(javax.swing.MenuElement[],int,boolean)

    // Skipping method: true false false false false 

    /// static javax.swing.MenuElement javax.swing.plaf.basic.BasicPopupMenuUI.findEnabledChild(javax.swing.MenuElement[],javax.swing.MenuElement,boolean)

    // Skipping method: true false false false false 

    /// static javax.swing.ActionMap javax.swing.plaf.basic.BasicPopupMenuUI.getActionMap()

    // Skipping method: true false false false false 

    /// static javax.swing.MenuElement javax.swing.plaf.basic.BasicPopupMenuUI.getFirstPopup()

    // Skipping method: true false false false false 

    /// static javax.swing.InputMap javax.swing.plaf.basic.BasicPopupMenuUI.getInputMap(javax.swing.JPopupMenu,javax.swing.JComponent)

    // Skipping method: true false false false false 

    /// static javax.swing.JPopupMenu javax.swing.plaf.basic.BasicPopupMenuUI.getLastPopup()

    // Skipping method: true false false false false 

    /// static java.util.List javax.swing.plaf.basic.BasicPopupMenuUI.getPopups()

    // Skipping method: true false false false false 

    /// static void javax.swing.plaf.basic.BasicPopupMenuUI.loadActionMap(javax.swing.plaf.basic.LazyActionMap)

    // Skipping method: true false false false false 

    /// private static javax.swing.MenuElement javax.swing.plaf.basic.BasicPopupMenuUI.nextEnabledChild(javax.swing.MenuElement[],int,int)

    /// private static javax.swing.MenuElement javax.swing.plaf.basic.BasicPopupMenuUI.previousEnabledChild(javax.swing.MenuElement[],int,int)

    /// public void javax.swing.plaf.basic.BasicPopupMenuUI.installDefaults()

    private static var installDefaults_MethodID_3: jmethodID?

    open func installDefaults() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installDefaults", methodSig: "()V", methodCache: &BasicPopupMenuUI.installDefaults_MethodID_3, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.basic.BasicPopupMenuUI.installKeyboardActions()

    private static var installKeyboardActions_MethodID_4: jmethodID?

    open func installKeyboardActions() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installKeyboardActions", methodSig: "()V", methodCache: &BasicPopupMenuUI.installKeyboardActions_MethodID_4, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.basic.BasicPopupMenuUI.installListeners()

    private static var installListeners_MethodID_5: jmethodID?

    open func installListeners() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "installListeners", methodSig: "()V", methodCache: &BasicPopupMenuUI.installListeners_MethodID_5, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.plaf.basic.BasicPopupMenuUI.installUI(javax.swing.JComponent)

    // Skipping method: false true false false false 

    /// public boolean javax.swing.plaf.basic.BasicPopupMenuUI.isPopupTrigger(java.awt.event.MouseEvent)

    // Skipping method: false true false false false 

    /// protected void javax.swing.plaf.basic.BasicPopupMenuUI.uninstallDefaults()

    private static var uninstallDefaults_MethodID_6: jmethodID?

    open func uninstallDefaults() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallDefaults", methodSig: "()V", methodCache: &BasicPopupMenuUI.uninstallDefaults_MethodID_6, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.basic.BasicPopupMenuUI.uninstallKeyboardActions()

    private static var uninstallKeyboardActions_MethodID_7: jmethodID?

    open func uninstallKeyboardActions() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallKeyboardActions", methodSig: "()V", methodCache: &BasicPopupMenuUI.uninstallKeyboardActions_MethodID_7, args: &__args, locals: &__locals )
    }


    /// protected void javax.swing.plaf.basic.BasicPopupMenuUI.uninstallListeners()

    private static var uninstallListeners_MethodID_8: jmethodID?

    open func uninstallListeners() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "uninstallListeners", methodSig: "()V", methodCache: &BasicPopupMenuUI.uninstallListeners_MethodID_8, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.plaf.basic.BasicPopupMenuUI.uninstallUI(javax.swing.JComponent)

    // Skipping method: false true false false false 

}

