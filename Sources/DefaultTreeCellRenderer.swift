
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.tree.DefaultTreeCellRenderer ///

open class DefaultTreeCellRenderer: JLabel, TreeCellRenderer {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var DefaultTreeCellRendererJNIClass: jclass?

    /// protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundNonSelectionColor

    private static var backgroundNonSelectionColor_FieldID: jfieldID?

    open var backgroundNonSelectionColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "backgroundNonSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.backgroundNonSelectionColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "backgroundNonSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.backgroundNonSelectionColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.backgroundSelectionColor

    private static var backgroundSelectionColor_FieldID: jfieldID?

    open var backgroundSelectionColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "backgroundSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.backgroundSelectionColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "backgroundSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.backgroundSelectionColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.borderSelectionColor

    private static var borderSelectionColor_FieldID: jfieldID?

    open var borderSelectionColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "borderSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.borderSelectionColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "borderSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.borderSelectionColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.closedIcon

    private static var closedIcon_FieldID: jfieldID?

    open var closedIcon: Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "closedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.closedIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "closedIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.closedIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.tree.DefaultTreeCellRenderer.drawDashedFocusIndicator

    /// private boolean javax.swing.tree.DefaultTreeCellRenderer.drawsFocusBorderAroundIcon

    /// private boolean javax.swing.tree.DefaultTreeCellRenderer.fillBackground

    /// private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.focusBGColor

    /// protected boolean javax.swing.tree.DefaultTreeCellRenderer.hasFocus

    private static var hasFocus_FieldID: jfieldID?

    open var hasFocus: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "hasFocus", fieldType: "Z", fieldCache: &DefaultTreeCellRenderer.hasFocus_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "hasFocus", fieldType: "Z", fieldCache: &DefaultTreeCellRenderer.hasFocus_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private boolean javax.swing.tree.DefaultTreeCellRenderer.inited

    /// private boolean javax.swing.tree.DefaultTreeCellRenderer.isDropCell

    /// protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.leafIcon

    private static var leafIcon_FieldID: jfieldID?

    open var leafIcon: Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "leafIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.leafIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "leafIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.leafIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.openIcon

    private static var openIcon_FieldID: jfieldID?

    open var openIcon: Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "openIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.openIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "openIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &DefaultTreeCellRenderer.openIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.tree.DefaultTreeCellRenderer.selected

    private static var selected_FieldID: jfieldID?

    open var selected: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "selected", fieldType: "Z", fieldCache: &DefaultTreeCellRenderer.selected_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "selected", fieldType: "Z", fieldCache: &DefaultTreeCellRenderer.selected_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textNonSelectionColor

    private static var textNonSelectionColor_FieldID: jfieldID?

    open var textNonSelectionColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "textNonSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.textNonSelectionColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "textNonSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.textNonSelectionColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.textSelectionColor

    private static var textSelectionColor_FieldID: jfieldID?

    open var textSelectionColor: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "textSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.textSelectionColor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "textSelectionColor", fieldType: "Ljava/awt/Color;", fieldCache: &DefaultTreeCellRenderer.textSelectionColor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.JTree javax.swing.tree.DefaultTreeCellRenderer.tree

    /// private java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.treeBGColor

    /// static final java.lang.String javax.swing.JLabel.LABELED_BY_PROPERTY

    // Skipping field: true false false false false false 

    /// private static final java.lang.String javax.swing.JLabel.uiClassID

    /// private javax.swing.Icon javax.swing.JLabel.defaultIcon

    /// private javax.swing.Icon javax.swing.JLabel.disabledIcon

    /// private boolean javax.swing.JLabel.disabledIconSet

    /// private int javax.swing.JLabel.horizontalAlignment

    /// private int javax.swing.JLabel.horizontalTextPosition

    /// private int javax.swing.JLabel.iconTextGap

    /// protected java.awt.Component javax.swing.JLabel.labelFor

    private static var labelFor_FieldID: jfieldID?

    override open var labelFor: java_awt.Component! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "labelFor", fieldType: "Ljava/awt/Component;", fieldCache: &DefaultTreeCellRenderer.labelFor_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Component( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "labelFor", fieldType: "Ljava/awt/Component;", fieldCache: &DefaultTreeCellRenderer.labelFor_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private int javax.swing.JLabel.mnemonic

    /// private int javax.swing.JLabel.mnemonicIndex

    /// private java.lang.String javax.swing.JLabel.text

    /// private int javax.swing.JLabel.verticalAlignment

    /// private int javax.swing.JLabel.verticalTextPosition

    /// public static final int javax.swing.SwingConstants.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.HORIZONTAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NEXT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.PREVIOUS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.RIGHT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TRAILING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.VERTICAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.WEST

    // Skipping field: false true false false false false 

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &DefaultTreeCellRenderer.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &DefaultTreeCellRenderer.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &DefaultTreeCellRenderer.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &DefaultTreeCellRenderer.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &DefaultTreeCellRenderer.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &DefaultTreeCellRenderer.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.tree.DefaultTreeCellRenderer()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/tree/DefaultTreeCellRenderer", classCache: &DefaultTreeCellRenderer.DefaultTreeCellRendererJNIClass, methodSig: "()V", methodCache: &DefaultTreeCellRenderer.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,boolean,boolean)

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,double,double)

    private static var firePropertyChange_MethodID_2: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Double, newValue: Double ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( d: oldValue )
        __args[2] = jvalue( d: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;DD)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_2, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Double, _ _newValue: Double ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,float,float)

    private static var firePropertyChange_MethodID_3: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Float, newValue: Float ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( f: oldValue )
        __args[2] = jvalue( f: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;FF)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_3, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Float, _ _newValue: Float ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,int,int)

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,short,short)

    private static var firePropertyChange_MethodID_4: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Int16, newValue: Int16 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( s: oldValue )
        __args[2] = jvalue( s: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;SS)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_4, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Int16, _ _newValue: Int16 ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,long,long)

    private static var firePropertyChange_MethodID_5: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Int64, newValue: Int64 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( j: oldValue )
        __args[2] = jvalue( j: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;JJ)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_5, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Int64, _ _newValue: Int64 ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,byte,byte)

    private static var firePropertyChange_MethodID_6: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: Int8, newValue: Int8 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = jvalue( b: oldValue )
        __args[2] = jvalue( b: newValue )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;BB)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_6, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: Int8, _ _newValue: Int8 ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,char,char)

    // Skipping method: false true false false false 

    /// protected void javax.swing.tree.DefaultTreeCellRenderer.firePropertyChange(java.lang.String,java.lang.Object,java.lang.Object)

    private static var firePropertyChange_MethodID_7: jmethodID?

    open func firePropertyChange( propertyName: String?, oldValue: java_swift.JavaObject?, newValue: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: propertyName, locals: &__locals )
        __args[1] = JNIType.toJava( value: oldValue, locals: &__locals )
        __args[2] = JNIType.toJava( value: newValue, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "firePropertyChange", methodSig: "(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V", methodCache: &DefaultTreeCellRenderer.firePropertyChange_MethodID_7, args: &__args, locals: &__locals )
    }

    override open func firePropertyChange( _ _propertyName: String?, _ _oldValue: java_swift.JavaObject?, _ _newValue: java_swift.JavaObject? ) {
        firePropertyChange( propertyName: _propertyName, oldValue: _oldValue, newValue: _newValue )
    }

    /// public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundNonSelectionColor()

    private static var getBackgroundNonSelectionColor_MethodID_8: jmethodID?

    open func getBackgroundNonSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackgroundNonSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &DefaultTreeCellRenderer.getBackgroundNonSelectionColor_MethodID_8, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBackgroundSelectionColor()

    private static var getBackgroundSelectionColor_MethodID_9: jmethodID?

    open func getBackgroundSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBackgroundSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &DefaultTreeCellRenderer.getBackgroundSelectionColor_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getBorderSelectionColor()

    private static var getBorderSelectionColor_MethodID_10: jmethodID?

    open func getBorderSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getBorderSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &DefaultTreeCellRenderer.getBorderSelectionColor_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getClosedIcon()

    private static var getClosedIcon_MethodID_11: jmethodID?

    open func getClosedIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getClosedIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getClosedIcon_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultClosedIcon()

    private static var getDefaultClosedIcon_MethodID_12: jmethodID?

    open func getDefaultClosedIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultClosedIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getDefaultClosedIcon_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultLeafIcon()

    private static var getDefaultLeafIcon_MethodID_13: jmethodID?

    open func getDefaultLeafIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultLeafIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getDefaultLeafIcon_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getDefaultOpenIcon()

    private static var getDefaultOpenIcon_MethodID_14: jmethodID?

    open func getDefaultOpenIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultOpenIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getDefaultOpenIcon_MethodID_14, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public java.awt.Font javax.swing.tree.DefaultTreeCellRenderer.getFont()

    // Skipping method: false true false false false 

    /// private int javax.swing.tree.DefaultTreeCellRenderer.getLabelStart()

    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getLeafIcon()

    private static var getLeafIcon_MethodID_15: jmethodID?

    open func getLeafIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getLeafIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getLeafIcon_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public javax.swing.Icon javax.swing.tree.DefaultTreeCellRenderer.getOpenIcon()

    private static var getOpenIcon_MethodID_16: jmethodID?

    open func getOpenIcon() -> Icon! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getOpenIcon", methodSig: "()Ljavax/swing/Icon;", methodCache: &DefaultTreeCellRenderer.getOpenIcon_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? IconForward( javaObject: __return ) : nil
    }


    /// public java.awt.Dimension javax.swing.tree.DefaultTreeCellRenderer.getPreferredSize()

    // Skipping method: false true false false false 

    /// public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextNonSelectionColor()

    private static var getTextNonSelectionColor_MethodID_17: jmethodID?

    open func getTextNonSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTextNonSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &DefaultTreeCellRenderer.getTextNonSelectionColor_MethodID_17, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.tree.DefaultTreeCellRenderer.getTextSelectionColor()

    private static var getTextSelectionColor_MethodID_18: jmethodID?

    open func getTextSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTextSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &DefaultTreeCellRenderer.getTextSelectionColor_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Component javax.swing.tree.DefaultTreeCellRenderer.getTreeCellRendererComponent(javax.swing.JTree,java.lang.Object,boolean,boolean,boolean,int,boolean)

    private static var getTreeCellRendererComponent_MethodID_19: jmethodID?

    open func getTreeCellRendererComponent( tree: JTree?, value: java_swift.JavaObject?, selected: Bool, expanded: Bool, leaf: Bool, row: Int, hasFocus: Bool ) -> java_awt.Component! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 7 )
        __args[0] = JNIType.toJava( value: tree, locals: &__locals )
        __args[1] = JNIType.toJava( value: value, locals: &__locals )
        __args[2] = jvalue( z: jboolean(selected ? JNI_TRUE : JNI_FALSE) )
        __args[3] = jvalue( z: jboolean(expanded ? JNI_TRUE : JNI_FALSE) )
        __args[4] = jvalue( z: jboolean(leaf ? JNI_TRUE : JNI_FALSE) )
        __args[5] = jvalue( i: jint(row) )
        __args[6] = jvalue( z: jboolean(hasFocus ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTreeCellRendererComponent", methodSig: "(Ljavax/swing/JTree;Ljava/lang/Object;ZZZIZ)Ljava/awt/Component;", methodCache: &DefaultTreeCellRenderer.getTreeCellRendererComponent_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getTreeCellRendererComponent( _ _tree: JTree?, _ _value: java_swift.JavaObject?, _ _selected: Bool, _ _expanded: Bool, _ _leaf: Bool, _ _row: Int, _ _hasFocus: Bool ) -> java_awt.Component! {
        return getTreeCellRendererComponent( tree: _tree, value: _value, selected: _selected, expanded: _expanded, leaf: _leaf, row: _row, hasFocus: _hasFocus )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.invalidate()

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.paint(java.awt.Graphics)

    // Skipping method: false true false false false 

    /// private void javax.swing.tree.DefaultTreeCellRenderer.paintFocus(java.awt.Graphics,int,int,int,int,java.awt.Color)

    /// public void javax.swing.tree.DefaultTreeCellRenderer.repaint(long,int,int,int,int)

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.repaint(java.awt.Rectangle)

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.repaint()

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.revalidate()

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setBackground(java.awt.Color)

    private static var setBackground_MethodID_20: jmethodID?

    open func setBackground( color: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: color, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackground", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setBackground_MethodID_20, args: &__args, locals: &__locals )
    }

    override open func setBackground( _ _color: java_awt.Color? ) {
        setBackground( color: _color )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundNonSelectionColor(java.awt.Color)

    private static var setBackgroundNonSelectionColor_MethodID_21: jmethodID?

    open func setBackgroundNonSelectionColor( newColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackgroundNonSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setBackgroundNonSelectionColor_MethodID_21, args: &__args, locals: &__locals )
    }

    open func setBackgroundNonSelectionColor( _ _newColor: java_awt.Color? ) {
        setBackgroundNonSelectionColor( newColor: _newColor )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setBackgroundSelectionColor(java.awt.Color)

    private static var setBackgroundSelectionColor_MethodID_22: jmethodID?

    open func setBackgroundSelectionColor( newColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBackgroundSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setBackgroundSelectionColor_MethodID_22, args: &__args, locals: &__locals )
    }

    open func setBackgroundSelectionColor( _ _newColor: java_awt.Color? ) {
        setBackgroundSelectionColor( newColor: _newColor )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setBorderSelectionColor(java.awt.Color)

    private static var setBorderSelectionColor_MethodID_23: jmethodID?

    open func setBorderSelectionColor( newColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setBorderSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setBorderSelectionColor_MethodID_23, args: &__args, locals: &__locals )
    }

    open func setBorderSelectionColor( _ _newColor: java_awt.Color? ) {
        setBorderSelectionColor( newColor: _newColor )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setClosedIcon(javax.swing.Icon)

    private static var setClosedIcon_MethodID_24: jmethodID?

    open func setClosedIcon( newIcon: Icon? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newIcon, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setClosedIcon", methodSig: "(Ljavax/swing/Icon;)V", methodCache: &DefaultTreeCellRenderer.setClosedIcon_MethodID_24, args: &__args, locals: &__locals )
    }

    open func setClosedIcon( _ _newIcon: Icon? ) {
        setClosedIcon( newIcon: _newIcon )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setFont(java.awt.Font)

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setLeafIcon(javax.swing.Icon)

    private static var setLeafIcon_MethodID_25: jmethodID?

    open func setLeafIcon( newIcon: Icon? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newIcon, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setLeafIcon", methodSig: "(Ljavax/swing/Icon;)V", methodCache: &DefaultTreeCellRenderer.setLeafIcon_MethodID_25, args: &__args, locals: &__locals )
    }

    open func setLeafIcon( _ _newIcon: Icon? ) {
        setLeafIcon( newIcon: _newIcon )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setOpenIcon(javax.swing.Icon)

    private static var setOpenIcon_MethodID_26: jmethodID?

    open func setOpenIcon( newIcon: Icon? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newIcon, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setOpenIcon", methodSig: "(Ljavax/swing/Icon;)V", methodCache: &DefaultTreeCellRenderer.setOpenIcon_MethodID_26, args: &__args, locals: &__locals )
    }

    open func setOpenIcon( _ _newIcon: Icon? ) {
        setOpenIcon( newIcon: _newIcon )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setTextNonSelectionColor(java.awt.Color)

    private static var setTextNonSelectionColor_MethodID_27: jmethodID?

    open func setTextNonSelectionColor( newColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTextNonSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setTextNonSelectionColor_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setTextNonSelectionColor( _ _newColor: java_awt.Color? ) {
        setTextNonSelectionColor( newColor: _newColor )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.setTextSelectionColor(java.awt.Color)

    private static var setTextSelectionColor_MethodID_28: jmethodID?

    open func setTextSelectionColor( newColor: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: newColor, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTextSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &DefaultTreeCellRenderer.setTextSelectionColor_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setTextSelectionColor( _ _newColor: java_awt.Color? ) {
        setTextSelectionColor( newColor: _newColor )
    }

    /// public void javax.swing.tree.DefaultTreeCellRenderer.updateUI()

    // Skipping method: false true false false false 

    /// public void javax.swing.tree.DefaultTreeCellRenderer.validate()

    // Skipping method: false true false false false 

}

