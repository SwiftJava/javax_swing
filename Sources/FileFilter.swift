
import java_swift

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.filechooser.FileFilter ///

open class FileFilter: java_swift.JavaObject {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var FileFilterJNIClass: jclass?

    /// public javax.swing.filechooser.FileFilter()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/filechooser/FileFilter", classCache: &FileFilter.FileFilterJNIClass, methodSig: "()V", methodCache: &FileFilter.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public abstract boolean javax.swing.filechooser.FileFilter.accept(java.io.File)

    private static var accept_MethodID_2: jmethodID?

    open func accept( f: /* class java.io.File */ UnavailableObject? ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: f, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "accept", methodSig: "(Ljava/io/File;)Z", methodCache: &FileFilter.accept_MethodID_2, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func accept( _ _f: /* class java.io.File */ UnavailableObject? ) -> Bool {
        return accept( f: _f )
    }

    /// public abstract java.lang.String javax.swing.filechooser.FileFilter.getDescription()

    private static var getDescription_MethodID_3: jmethodID?

    open func getDescription() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDescription", methodSig: "()Ljava/lang/String;", methodCache: &FileFilter.getDescription_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


}

