
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.JFormattedTextField ///

open class JFormattedTextField: JTextField {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JFormattedTextFieldJNIClass: jclass?

    /// public static final int javax.swing.JFormattedTextField.COMMIT

    private static var COMMIT_FieldID: jfieldID?

    open static var COMMIT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "COMMIT", fieldType: "I", fieldCache: &COMMIT_FieldID, className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextFieldJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JFormattedTextField.COMMIT_OR_REVERT

    private static var COMMIT_OR_REVERT_FieldID: jfieldID?

    open static var COMMIT_OR_REVERT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "COMMIT_OR_REVERT", fieldType: "I", fieldCache: &COMMIT_OR_REVERT_FieldID, className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextFieldJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JFormattedTextField.PERSIST

    private static var PERSIST_FieldID: jfieldID?

    open static var PERSIST: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "PERSIST", fieldType: "I", fieldCache: &PERSIST_FieldID, className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextFieldJNIClass )
            return Int(__value)
        }
    }

    /// public static final int javax.swing.JFormattedTextField.REVERT

    private static var REVERT_FieldID: jfieldID?

    open static var REVERT: Int {
        get {
            let __value = JNIField.GetStaticIntField( fieldName: "REVERT", fieldType: "I", fieldCache: &REVERT_FieldID, className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextFieldJNIClass )
            return Int(__value)
        }
    }

    /// private static final javax.swing.Action[] javax.swing.JFormattedTextField.defaultActions

    /// private static final java.lang.String javax.swing.JFormattedTextField.uiClassID

    /// private boolean javax.swing.JFormattedTextField.composedTextExists

    /// private javax.swing.event.DocumentListener javax.swing.JFormattedTextField.documentListener

    /// private boolean javax.swing.JFormattedTextField.editValid

    /// private boolean javax.swing.JFormattedTextField.edited

    /// private javax.swing.JFormattedTextField$AbstractFormatterFactory javax.swing.JFormattedTextField.factory

    /// private int javax.swing.JFormattedTextField.focusLostBehavior

    /// private javax.swing.JFormattedTextField$FocusLostHandler javax.swing.JFormattedTextField.focusLostHandler

    /// private javax.swing.JFormattedTextField$AbstractFormatter javax.swing.JFormattedTextField.format

    /// private java.lang.Object javax.swing.JFormattedTextField.mask

    /// private javax.swing.ActionMap javax.swing.JFormattedTextField.textFormatterActionMap

    /// private java.lang.Object javax.swing.JFormattedTextField.value

    /// private static final javax.swing.Action[] javax.swing.JTextField.defaultActions

    /// public static final java.lang.String javax.swing.JTextField.notifyAction

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JTextField.uiClassID

    /// private javax.swing.Action javax.swing.JTextField.action

    /// private java.beans.PropertyChangeListener javax.swing.JTextField.actionPropertyChangeListener

    /// private int javax.swing.JTextField.columnWidth

    /// private int javax.swing.JTextField.columns

    /// private java.lang.String javax.swing.JTextField.command

    /// private int javax.swing.JTextField.horizontalAlignment

    /// private javax.swing.BoundedRangeModel javax.swing.JTextField.visibility

    /// public static final int javax.swing.SwingConstants.BOTTOM

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.CENTER

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.HORIZONTAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEADING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.LEFT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NEXT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.NORTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.PREVIOUS

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.RIGHT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_EAST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.SOUTH_WEST

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TOP

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.TRAILING

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.VERTICAL

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.SwingConstants.WEST

    // Skipping field: false true false false false false 

    /// public static final java.lang.String javax.swing.text.JTextComponent.DEFAULT_KEYMAP

    // Skipping field: false true false false false false 

    /// private static final java.lang.Object javax.swing.text.JTextComponent.FOCUSED_COMPONENT

    /// public static final java.lang.String javax.swing.text.JTextComponent.FOCUS_ACCELERATOR_KEY

    // Skipping field: false true false false false false 

    /// private static final java.lang.Object javax.swing.text.JTextComponent.KEYMAP_TABLE

    /// private static com.sun.beans.util.Cache javax.swing.text.JTextComponent.METHOD_OVERRIDDEN

    /// private static javax.swing.text.JTextComponent$DefaultTransferHandler javax.swing.text.JTextComponent.defaultTransferHandler

    /// private transient javax.swing.text.Caret javax.swing.text.JTextComponent.caret

    /// private java.awt.Color javax.swing.text.JTextComponent.caretColor

    /// private transient javax.swing.text.JTextComponent$MutableCaretEvent javax.swing.text.JTextComponent.caretEvent

    /// private boolean javax.swing.text.JTextComponent.checkedInputOverride

    /// private javax.swing.text.SimpleAttributeSet javax.swing.text.JTextComponent.composedTextAttribute

    /// private javax.swing.text.JTextComponent$ComposedTextCaret javax.swing.text.JTextComponent.composedTextCaret

    /// private java.lang.String javax.swing.text.JTextComponent.composedTextContent

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.composedTextEnd

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.composedTextStart

    /// private java.awt.Color javax.swing.text.JTextComponent.disabledTextColor

    /// private boolean javax.swing.text.JTextComponent.dragEnabled

    /// private transient javax.swing.text.JTextComponent$DropLocation javax.swing.text.JTextComponent.dropLocation

    /// private javax.swing.DropMode javax.swing.text.JTextComponent.dropMode

    /// private boolean javax.swing.text.JTextComponent.editable

    /// private char javax.swing.text.JTextComponent.focusAccelerator

    /// private transient javax.swing.text.Highlighter javax.swing.text.JTextComponent.highlighter

    /// private transient java.awt.im.InputMethodRequests javax.swing.text.JTextComponent.inputMethodRequestsHandler

    /// private transient javax.swing.text.Keymap javax.swing.text.JTextComponent.keymap

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.latestCommittedTextEnd

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.latestCommittedTextStart

    /// private java.awt.Insets javax.swing.text.JTextComponent.margin

    /// private javax.swing.text.Document javax.swing.text.JTextComponent.model

    /// private javax.swing.text.NavigationFilter javax.swing.text.JTextComponent.navigationFilter

    /// private boolean javax.swing.text.JTextComponent.needToSendKeyTypedEvent

    /// private transient javax.swing.text.Caret javax.swing.text.JTextComponent.originalCaret

    /// private java.awt.Color javax.swing.text.JTextComponent.selectedTextColor

    /// private java.awt.Color javax.swing.text.JTextComponent.selectionColor

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JFormattedTextField.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JFormattedTextField.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JFormattedTextField.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JFormattedTextField.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JFormattedTextField.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JFormattedTextField.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.JFormattedTextField()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "()V", methodCache: &JFormattedTextField.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public javax.swing.JFormattedTextField(javax.swing.JFormattedTextField$AbstractFormatter)

    private static var new_MethodID_2: jmethodID?

    public convenience init( formatter: JFormattedTextField_AbstractFormatter? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: formatter, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "(Ljavax/swing/JFormattedTextField$AbstractFormatter;)V", methodCache: &JFormattedTextField.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _formatter: JFormattedTextField_AbstractFormatter? ) {
        self.init( formatter: _formatter )
    }

    /// public javax.swing.JFormattedTextField(javax.swing.JFormattedTextField$AbstractFormatterFactory)

    private static var new_MethodID_3: jmethodID?

    public convenience init( factory: JFormattedTextField_AbstractFormatterFactory? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: factory, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "(Ljavax/swing/JFormattedTextField$AbstractFormatterFactory;)V", methodCache: &JFormattedTextField.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _factory: JFormattedTextField_AbstractFormatterFactory? ) {
        self.init( factory: _factory )
    }

    /// public javax.swing.JFormattedTextField(javax.swing.JFormattedTextField$AbstractFormatterFactory,java.lang.Object)

    private static var new_MethodID_4: jmethodID?

    public convenience init( factory: JFormattedTextField_AbstractFormatterFactory?, currentValue: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: factory, locals: &__locals )
        __args[1] = JNIType.toJava( value: currentValue, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "(Ljavax/swing/JFormattedTextField$AbstractFormatterFactory;Ljava/lang/Object;)V", methodCache: &JFormattedTextField.new_MethodID_4, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _factory: JFormattedTextField_AbstractFormatterFactory?, _ _currentValue: java_swift.JavaObject? ) {
        self.init( factory: _factory, currentValue: _currentValue )
    }

    /// public javax.swing.JFormattedTextField(java.text.Format)

    private static var new_MethodID_5: jmethodID?

    public convenience init( format: /* class java.text.Format */ UnavailableObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: format, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "(Ljava/text/Format;)V", methodCache: &JFormattedTextField.new_MethodID_5, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _format: /* class java.text.Format */ UnavailableObject? ) {
        self.init( format: _format )
    }

    /// public javax.swing.JFormattedTextField(java.lang.Object)

    private static var new_MethodID_6: jmethodID?

    public convenience init( value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/JFormattedTextField", classCache: &JFormattedTextField.JFormattedTextFieldJNIClass, methodSig: "(Ljava/lang/Object;)V", methodCache: &JFormattedTextField.new_MethodID_6, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _value: java_swift.JavaObject? ) {
        self.init( value: _value )
    }

    /// static void javax.swing.JFormattedTextField.access$100(javax.swing.JFormattedTextField,java.lang.Object,boolean,boolean)

    // Skipping method: true false false false false 

    /// static void javax.swing.JFormattedTextField.access$300(javax.swing.JFormattedTextField,javax.swing.Action[])

    // Skipping method: true false false false false 

    /// static void javax.swing.JFormattedTextField.access$400(javax.swing.JFormattedTextField,boolean)

    // Skipping method: true false false false false 

    /// static boolean javax.swing.JFormattedTextField.access$500(javax.swing.JFormattedTextField)

    // Skipping method: true false false false false 

    /// static void javax.swing.JFormattedTextField.access$600(javax.swing.JFormattedTextField,boolean)

    // Skipping method: true false false false false 

    /// public void javax.swing.JFormattedTextField.commitEdit() throws java.text.ParseException

    private static var commitEdit_MethodID_7: jmethodID?

    open func commitEdit() throws /* java.text.ParseException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "commitEdit", methodSig: "()V", methodCache: &JFormattedTextField.commitEdit_MethodID_7, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.text.ParseException */ UnavailableObject( javaObject: throwable )
        }
    }


    /// public javax.swing.Action[] javax.swing.JFormattedTextField.getActions()

    // Skipping method: false true false false false 

    /// private javax.swing.JFormattedTextField$AbstractFormatterFactory javax.swing.JFormattedTextField.getDefaultFormatterFactory(java.lang.Object)

    /// public int javax.swing.JFormattedTextField.getFocusLostBehavior()

    private static var getFocusLostBehavior_MethodID_8: jmethodID?

    open func getFocusLostBehavior() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getFocusLostBehavior", methodSig: "()I", methodCache: &JFormattedTextField.getFocusLostBehavior_MethodID_8, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public javax.swing.JFormattedTextField$AbstractFormatter javax.swing.JFormattedTextField.getFormatter()

    private static var getFormatter_MethodID_9: jmethodID?

    open func getFormatter() -> JFormattedTextField_AbstractFormatter! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFormatter", methodSig: "()Ljavax/swing/JFormattedTextField$AbstractFormatter;", methodCache: &JFormattedTextField.getFormatter_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JFormattedTextField_AbstractFormatter( javaObject: __return ) : nil
    }


    /// public javax.swing.JFormattedTextField$AbstractFormatterFactory javax.swing.JFormattedTextField.getFormatterFactory()

    private static var getFormatterFactory_MethodID_10: jmethodID?

    open func getFormatterFactory() -> JFormattedTextField_AbstractFormatterFactory! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getFormatterFactory", methodSig: "()Ljavax/swing/JFormattedTextField$AbstractFormatterFactory;", methodCache: &JFormattedTextField.getFormatterFactory_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JFormattedTextField_AbstractFormatterFactory( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.JFormattedTextField.getUIClassID()

    // Skipping method: false true false false false 

    /// public java.lang.Object javax.swing.JFormattedTextField.getValue()

    private static var getValue_MethodID_11: jmethodID?

    open func getValue() -> java_swift.JavaObject! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getValue", methodSig: "()Ljava/lang/Object;", methodCache: &JFormattedTextField.getValue_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_swift.JavaObject( javaObject: __return ) : nil
    }


    /// protected void javax.swing.JFormattedTextField.invalidEdit()

    private static var invalidEdit_MethodID_12: jmethodID?

    open func invalidEdit() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "invalidEdit", methodSig: "()V", methodCache: &JFormattedTextField.invalidEdit_MethodID_12, args: &__args, locals: &__locals )
    }


    /// public boolean javax.swing.JFormattedTextField.isEditValid()

    private static var isEditValid_MethodID_13: jmethodID?

    open func isEditValid() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEditValid", methodSig: "()Z", methodCache: &JFormattedTextField.isEditValid_MethodID_13, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private boolean javax.swing.JFormattedTextField.isEdited()

    /// protected void javax.swing.JFormattedTextField.processFocusEvent(java.awt.event.FocusEvent)

    private static var processFocusEvent_MethodID_14: jmethodID?

    open func processFocusEvent( e: java_awt.FocusEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processFocusEvent", methodSig: "(Ljava/awt/event/FocusEvent;)V", methodCache: &JFormattedTextField.processFocusEvent_MethodID_14, args: &__args, locals: &__locals )
    }

    override open func processFocusEvent( _ _e: java_awt.FocusEvent? ) {
        processFocusEvent( e: _e )
    }

    /// protected void javax.swing.JFormattedTextField.processInputMethodEvent(java.awt.event.InputMethodEvent)

    private static var processInputMethodEvent_MethodID_15: jmethodID?

    open func processInputMethodEvent( e: java_awt.InputMethodEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processInputMethodEvent", methodSig: "(Ljava/awt/event/InputMethodEvent;)V", methodCache: &JFormattedTextField.processInputMethodEvent_MethodID_15, args: &__args, locals: &__locals )
    }

    override open func processInputMethodEvent( _ _e: java_awt.InputMethodEvent? ) {
        processInputMethodEvent( e: _e )
    }

    /// public void javax.swing.JFormattedTextField.setDocument(javax.swing.text.Document)

    // Skipping method: false true false false false 

    /// private void javax.swing.JFormattedTextField.setEditValid(boolean)

    /// private void javax.swing.JFormattedTextField.setEdited(boolean)

    /// public void javax.swing.JFormattedTextField.setFocusLostBehavior(int)

    private static var setFocusLostBehavior_MethodID_16: jmethodID?

    open func setFocusLostBehavior( behavior: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(behavior) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusLostBehavior", methodSig: "(I)V", methodCache: &JFormattedTextField.setFocusLostBehavior_MethodID_16, args: &__args, locals: &__locals )
    }

    open func setFocusLostBehavior( _ _behavior: Int ) {
        setFocusLostBehavior( behavior: _behavior )
    }

    /// protected void javax.swing.JFormattedTextField.setFormatter(javax.swing.JFormattedTextField$AbstractFormatter)

    private static var setFormatter_MethodID_17: jmethodID?

    open func setFormatter( format: JFormattedTextField_AbstractFormatter? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: format, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFormatter", methodSig: "(Ljavax/swing/JFormattedTextField$AbstractFormatter;)V", methodCache: &JFormattedTextField.setFormatter_MethodID_17, args: &__args, locals: &__locals )
    }

    open func setFormatter( _ _format: JFormattedTextField_AbstractFormatter? ) {
        setFormatter( format: _format )
    }

    /// private void javax.swing.JFormattedTextField.setFormatterActions(javax.swing.Action[])

    /// public void javax.swing.JFormattedTextField.setFormatterFactory(javax.swing.JFormattedTextField$AbstractFormatterFactory)

    private static var setFormatterFactory_MethodID_18: jmethodID?

    open func setFormatterFactory( tf: JFormattedTextField_AbstractFormatterFactory? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: tf, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFormatterFactory", methodSig: "(Ljavax/swing/JFormattedTextField$AbstractFormatterFactory;)V", methodCache: &JFormattedTextField.setFormatterFactory_MethodID_18, args: &__args, locals: &__locals )
    }

    open func setFormatterFactory( _ _tf: JFormattedTextField_AbstractFormatterFactory? ) {
        setFormatterFactory( tf: _tf )
    }

    /// public void javax.swing.JFormattedTextField.setValue(java.lang.Object)

    private static var setValue_MethodID_19: jmethodID?

    open func setValue( value: java_swift.JavaObject? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: value, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setValue", methodSig: "(Ljava/lang/Object;)V", methodCache: &JFormattedTextField.setValue_MethodID_19, args: &__args, locals: &__locals )
    }

    open func setValue( _ _value: java_swift.JavaObject? ) {
        setValue( value: _value )
    }

    /// private void javax.swing.JFormattedTextField.setValue(java.lang.Object,boolean,boolean)

    /// private void javax.swing.JFormattedTextField.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

}

