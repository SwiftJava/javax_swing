
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.table.JTableHeader ///

open class JTableHeader: JComponent, TableColumnModelListener {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JTableHeaderJNIClass: jclass?

    /// private static final java.lang.String javax.swing.table.JTableHeader.uiClassID

    /// protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.columnModel

    private static var columnModel_FieldID: jfieldID?

    open var columnModel: TableColumnModel! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "columnModel", fieldType: "Ljavax/swing/table/TableColumnModel;", fieldCache: &JTableHeader.columnModel_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TableColumnModelForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "columnModel", fieldType: "Ljavax/swing/table/TableColumnModel;", fieldCache: &JTableHeader.columnModel_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.defaultRenderer

    /// protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.draggedColumn

    private static var draggedColumn_FieldID: jfieldID?

    open var draggedColumn: TableColumn! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "draggedColumn", fieldType: "Ljavax/swing/table/TableColumn;", fieldCache: &JTableHeader.draggedColumn_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TableColumn( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "draggedColumn", fieldType: "Ljavax/swing/table/TableColumn;", fieldCache: &JTableHeader.draggedColumn_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected transient int javax.swing.table.JTableHeader.draggedDistance

    private static var draggedDistance_FieldID: jfieldID?

    open var draggedDistance: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "draggedDistance", fieldType: "I", fieldCache: &JTableHeader.draggedDistance_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "draggedDistance", fieldType: "I", fieldCache: &JTableHeader.draggedDistance_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.table.JTableHeader.reorderingAllowed

    private static var reorderingAllowed_FieldID: jfieldID?

    open var reorderingAllowed: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "reorderingAllowed", fieldType: "Z", fieldCache: &JTableHeader.reorderingAllowed_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "reorderingAllowed", fieldType: "Z", fieldCache: &JTableHeader.reorderingAllowed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.table.JTableHeader.resizingAllowed

    private static var resizingAllowed_FieldID: jfieldID?

    open var resizingAllowed: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "resizingAllowed", fieldType: "Z", fieldCache: &JTableHeader.resizingAllowed_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "resizingAllowed", fieldType: "Z", fieldCache: &JTableHeader.resizingAllowed_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// protected transient javax.swing.table.TableColumn javax.swing.table.JTableHeader.resizingColumn

    private static var resizingColumn_FieldID: jfieldID?

    open var resizingColumn: TableColumn! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "resizingColumn", fieldType: "Ljavax/swing/table/TableColumn;", fieldCache: &JTableHeader.resizingColumn_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? TableColumn( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "resizingColumn", fieldType: "Ljavax/swing/table/TableColumn;", fieldCache: &JTableHeader.resizingColumn_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.JTable javax.swing.table.JTableHeader.table

    private static var table_FieldID: jfieldID?

    open var table: JTable! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "table", fieldType: "Ljavax/swing/JTable;", fieldCache: &JTableHeader.table_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? JTable( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "table", fieldType: "Ljavax/swing/JTable;", fieldCache: &JTableHeader.table_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected boolean javax.swing.table.JTableHeader.updateTableInRealTime

    private static var updateTableInRealTime_FieldID: jfieldID?

    open var updateTableInRealTime: Bool {
        get {
            let __value = JNIField.GetBooleanField( fieldName: "updateTableInRealTime", fieldType: "Z", fieldCache: &JTableHeader.updateTableInRealTime_FieldID, object: javaObject )
            return __value != jboolean(JNI_FALSE)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( z: jboolean(newValue ? JNI_TRUE : JNI_FALSE) )
            JNIField.SetBooleanField( fieldName: "updateTableInRealTime", fieldType: "Z", fieldCache: &JTableHeader.updateTableInRealTime_FieldID, object: javaObject, value: __value.z, locals: &__locals )
        }
    }

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JTableHeader.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JTableHeader.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JTableHeader.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JTableHeader.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JTableHeader.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JTableHeader.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.table.JTableHeader()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/table/JTableHeader", classCache: &JTableHeader.JTableHeaderJNIClass, methodSig: "()V", methodCache: &JTableHeader.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// public javax.swing.table.JTableHeader(javax.swing.table.TableColumnModel)

    private static var new_MethodID_2: jmethodID?

    public convenience init( arg0: TableColumnModel? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/table/JTableHeader", classCache: &JTableHeader.JTableHeaderJNIClass, methodSig: "(Ljavax/swing/table/TableColumnModel;)V", methodCache: &JTableHeader.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _arg0: TableColumnModel? ) {
        self.init( arg0: _arg0 )
    }

    /// static javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.access$000(javax.swing.table.JTableHeader)

    // Skipping method: true false false false false 

    /// public void javax.swing.table.JTableHeader.columnAdded(javax.swing.event.TableColumnModelEvent)

    private static var columnAdded_MethodID_3: jmethodID?

    open func columnAdded( e: TableColumnModelEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "columnAdded", methodSig: "(Ljavax/swing/event/TableColumnModelEvent;)V", methodCache: &JTableHeader.columnAdded_MethodID_3, args: &__args, locals: &__locals )
    }

    open func columnAdded( _ _e: TableColumnModelEvent? ) {
        columnAdded( e: _e )
    }

    /// public int javax.swing.table.JTableHeader.columnAtPoint(java.awt.Point)

    private static var columnAtPoint_MethodID_4: jmethodID?

    open func columnAtPoint( arg0: java_awt.Point? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "columnAtPoint", methodSig: "(Ljava/awt/Point;)I", methodCache: &JTableHeader.columnAtPoint_MethodID_4, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func columnAtPoint( _ _arg0: java_awt.Point? ) -> Int {
        return columnAtPoint( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.columnMarginChanged(javax.swing.event.ChangeEvent)

    private static var columnMarginChanged_MethodID_5: jmethodID?

    open func columnMarginChanged( e: ChangeEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "columnMarginChanged", methodSig: "(Ljavax/swing/event/ChangeEvent;)V", methodCache: &JTableHeader.columnMarginChanged_MethodID_5, args: &__args, locals: &__locals )
    }

    open func columnMarginChanged( _ _e: ChangeEvent? ) {
        columnMarginChanged( e: _e )
    }

    /// public void javax.swing.table.JTableHeader.columnMoved(javax.swing.event.TableColumnModelEvent)

    private static var columnMoved_MethodID_6: jmethodID?

    open func columnMoved( e: TableColumnModelEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "columnMoved", methodSig: "(Ljavax/swing/event/TableColumnModelEvent;)V", methodCache: &JTableHeader.columnMoved_MethodID_6, args: &__args, locals: &__locals )
    }

    open func columnMoved( _ _e: TableColumnModelEvent? ) {
        columnMoved( e: _e )
    }

    /// public void javax.swing.table.JTableHeader.columnRemoved(javax.swing.event.TableColumnModelEvent)

    private static var columnRemoved_MethodID_7: jmethodID?

    open func columnRemoved( e: TableColumnModelEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "columnRemoved", methodSig: "(Ljavax/swing/event/TableColumnModelEvent;)V", methodCache: &JTableHeader.columnRemoved_MethodID_7, args: &__args, locals: &__locals )
    }

    open func columnRemoved( _ _e: TableColumnModelEvent? ) {
        columnRemoved( e: _e )
    }

    /// public void javax.swing.table.JTableHeader.columnSelectionChanged(javax.swing.event.ListSelectionEvent)

    private static var columnSelectionChanged_MethodID_8: jmethodID?

    open func columnSelectionChanged( e: ListSelectionEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: e, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "columnSelectionChanged", methodSig: "(Ljavax/swing/event/ListSelectionEvent;)V", methodCache: &JTableHeader.columnSelectionChanged_MethodID_8, args: &__args, locals: &__locals )
    }

    open func columnSelectionChanged( _ _e: ListSelectionEvent? ) {
        columnSelectionChanged( e: _e )
    }

    /// protected javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.createDefaultColumnModel()

    private static var createDefaultColumnModel_MethodID_9: jmethodID?

    open func createDefaultColumnModel() -> TableColumnModel! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultColumnModel", methodSig: "()Ljavax/swing/table/TableColumnModel;", methodCache: &JTableHeader.createDefaultColumnModel_MethodID_9, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableColumnModelForward( javaObject: __return ) : nil
    }


    /// protected javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.createDefaultRenderer()

    private static var createDefaultRenderer_MethodID_10: jmethodID?

    open func createDefaultRenderer() -> TableCellRenderer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "createDefaultRenderer", methodSig: "()Ljavax/swing/table/TableCellRenderer;", methodCache: &JTableHeader.createDefaultRenderer_MethodID_10, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableCellRendererForward( javaObject: __return ) : nil
    }


    /// public javax.accessibility.AccessibleContext javax.swing.table.JTableHeader.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public javax.swing.table.TableColumnModel javax.swing.table.JTableHeader.getColumnModel()

    private static var getColumnModel_MethodID_11: jmethodID?

    open func getColumnModel() -> TableColumnModel! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getColumnModel", methodSig: "()Ljavax/swing/table/TableColumnModel;", methodCache: &JTableHeader.getColumnModel_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableColumnModelForward( javaObject: __return ) : nil
    }


    /// public javax.swing.table.TableCellRenderer javax.swing.table.JTableHeader.getDefaultRenderer()

    private static var getDefaultRenderer_MethodID_12: jmethodID?

    open func getDefaultRenderer() -> TableCellRenderer! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDefaultRenderer", methodSig: "()Ljavax/swing/table/TableCellRenderer;", methodCache: &JTableHeader.getDefaultRenderer_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableCellRendererForward( javaObject: __return ) : nil
    }


    /// public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getDraggedColumn()

    private static var getDraggedColumn_MethodID_13: jmethodID?

    open func getDraggedColumn() -> TableColumn! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDraggedColumn", methodSig: "()Ljavax/swing/table/TableColumn;", methodCache: &JTableHeader.getDraggedColumn_MethodID_13, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableColumn( javaObject: __return ) : nil
    }


    /// public int javax.swing.table.JTableHeader.getDraggedDistance()

    private static var getDraggedDistance_MethodID_14: jmethodID?

    open func getDraggedDistance() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getDraggedDistance", methodSig: "()I", methodCache: &JTableHeader.getDraggedDistance_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.awt.Rectangle javax.swing.table.JTableHeader.getHeaderRect(int)

    private static var getHeaderRect_MethodID_15: jmethodID?

    open func getHeaderRect( arg0: Int ) -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getHeaderRect", methodSig: "(I)Ljava/awt/Rectangle;", methodCache: &JTableHeader.getHeaderRect_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }

    open func getHeaderRect( _ _arg0: Int ) -> java_awt.Rectangle! {
        return getHeaderRect( arg0: _arg0 )
    }

    /// public boolean javax.swing.table.JTableHeader.getReorderingAllowed()

    private static var getReorderingAllowed_MethodID_16: jmethodID?

    open func getReorderingAllowed() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getReorderingAllowed", methodSig: "()Z", methodCache: &JTableHeader.getReorderingAllowed_MethodID_16, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.table.JTableHeader.getResizingAllowed()

    private static var getResizingAllowed_MethodID_17: jmethodID?

    open func getResizingAllowed() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getResizingAllowed", methodSig: "()Z", methodCache: &JTableHeader.getResizingAllowed_MethodID_17, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public javax.swing.table.TableColumn javax.swing.table.JTableHeader.getResizingColumn()

    private static var getResizingColumn_MethodID_18: jmethodID?

    open func getResizingColumn() -> TableColumn! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getResizingColumn", methodSig: "()Ljavax/swing/table/TableColumn;", methodCache: &JTableHeader.getResizingColumn_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableColumn( javaObject: __return ) : nil
    }


    /// public javax.swing.JTable javax.swing.table.JTableHeader.getTable()

    private static var getTable_MethodID_19: jmethodID?

    open func getTable() -> JTable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTable", methodSig: "()Ljavax/swing/JTable;", methodCache: &JTableHeader.getTable_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JTable( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.table.JTableHeader.getToolTipText(java.awt.event.MouseEvent)

    private static var getToolTipText_MethodID_20: jmethodID?

    open func getToolTipText( arg0: java_awt.MouseEvent? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipText", methodSig: "(Ljava/awt/event/MouseEvent;)Ljava/lang/String;", methodCache: &JTableHeader.getToolTipText_MethodID_20, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    override open func getToolTipText( _ _arg0: java_awt.MouseEvent? ) -> String! {
        return getToolTipText( arg0: _arg0 )
    }

    /// public javax.swing.plaf.TableHeaderUI javax.swing.table.JTableHeader.getUI()

    private static var getUI_MethodID_21: jmethodID?

    open func getUI() -> TableHeaderUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUI", methodSig: "()Ljavax/swing/plaf/TableHeaderUI;", methodCache: &JTableHeader.getUI_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TableHeaderUI( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.table.JTableHeader.getUIClassID()

    // Skipping method: false true false false false 

    /// public boolean javax.swing.table.JTableHeader.getUpdateTableInRealTime()

    private static var getUpdateTableInRealTime_MethodID_22: jmethodID?

    open func getUpdateTableInRealTime() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getUpdateTableInRealTime", methodSig: "()Z", methodCache: &JTableHeader.getUpdateTableInRealTime_MethodID_22, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private int javax.swing.table.JTableHeader.getWidthInRightToLeft()

    /// protected void javax.swing.table.JTableHeader.initializeLocalVars()

    private static var initializeLocalVars_MethodID_23: jmethodID?

    open func initializeLocalVars() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "initializeLocalVars", methodSig: "()V", methodCache: &JTableHeader.initializeLocalVars_MethodID_23, args: &__args, locals: &__locals )
    }


    /// protected java.lang.String javax.swing.table.JTableHeader.paramString()

    private static var paramString_MethodID_24: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JTableHeader.paramString_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public void javax.swing.table.JTableHeader.resizeAndRepaint()

    private static var resizeAndRepaint_MethodID_25: jmethodID?

    open func resizeAndRepaint() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "resizeAndRepaint", methodSig: "()V", methodCache: &JTableHeader.resizeAndRepaint_MethodID_25, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.table.JTableHeader.setColumnModel(javax.swing.table.TableColumnModel)

    private static var setColumnModel_MethodID_26: jmethodID?

    open func setColumnModel( arg0: TableColumnModel? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setColumnModel", methodSig: "(Ljavax/swing/table/TableColumnModel;)V", methodCache: &JTableHeader.setColumnModel_MethodID_26, args: &__args, locals: &__locals )
    }

    open func setColumnModel( _ _arg0: TableColumnModel? ) {
        setColumnModel( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setDefaultRenderer(javax.swing.table.TableCellRenderer)

    private static var setDefaultRenderer_MethodID_27: jmethodID?

    open func setDefaultRenderer( arg0: TableCellRenderer? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDefaultRenderer", methodSig: "(Ljavax/swing/table/TableCellRenderer;)V", methodCache: &JTableHeader.setDefaultRenderer_MethodID_27, args: &__args, locals: &__locals )
    }

    open func setDefaultRenderer( _ _arg0: TableCellRenderer? ) {
        setDefaultRenderer( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setDraggedColumn(javax.swing.table.TableColumn)

    private static var setDraggedColumn_MethodID_28: jmethodID?

    open func setDraggedColumn( arg0: TableColumn? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDraggedColumn", methodSig: "(Ljavax/swing/table/TableColumn;)V", methodCache: &JTableHeader.setDraggedColumn_MethodID_28, args: &__args, locals: &__locals )
    }

    open func setDraggedColumn( _ _arg0: TableColumn? ) {
        setDraggedColumn( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setDraggedDistance(int)

    private static var setDraggedDistance_MethodID_29: jmethodID?

    open func setDraggedDistance( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDraggedDistance", methodSig: "(I)V", methodCache: &JTableHeader.setDraggedDistance_MethodID_29, args: &__args, locals: &__locals )
    }

    open func setDraggedDistance( _ _arg0: Int ) {
        setDraggedDistance( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setReorderingAllowed(boolean)

    private static var setReorderingAllowed_MethodID_30: jmethodID?

    open func setReorderingAllowed( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setReorderingAllowed", methodSig: "(Z)V", methodCache: &JTableHeader.setReorderingAllowed_MethodID_30, args: &__args, locals: &__locals )
    }

    open func setReorderingAllowed( _ _arg0: Bool ) {
        setReorderingAllowed( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setResizingAllowed(boolean)

    private static var setResizingAllowed_MethodID_31: jmethodID?

    open func setResizingAllowed( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResizingAllowed", methodSig: "(Z)V", methodCache: &JTableHeader.setResizingAllowed_MethodID_31, args: &__args, locals: &__locals )
    }

    open func setResizingAllowed( _ _arg0: Bool ) {
        setResizingAllowed( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setResizingColumn(javax.swing.table.TableColumn)

    private static var setResizingColumn_MethodID_32: jmethodID?

    open func setResizingColumn( arg0: TableColumn? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setResizingColumn", methodSig: "(Ljavax/swing/table/TableColumn;)V", methodCache: &JTableHeader.setResizingColumn_MethodID_32, args: &__args, locals: &__locals )
    }

    open func setResizingColumn( _ _arg0: TableColumn? ) {
        setResizingColumn( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setTable(javax.swing.JTable)

    private static var setTable_MethodID_33: jmethodID?

    open func setTable( arg0: JTable? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setTable", methodSig: "(Ljavax/swing/JTable;)V", methodCache: &JTableHeader.setTable_MethodID_33, args: &__args, locals: &__locals )
    }

    open func setTable( _ _arg0: JTable? ) {
        setTable( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setUI(javax.swing.plaf.TableHeaderUI)

    private static var setUI_MethodID_34: jmethodID?

    open func setUI( arg0: TableHeaderUI? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUI", methodSig: "(Ljavax/swing/plaf/TableHeaderUI;)V", methodCache: &JTableHeader.setUI_MethodID_34, args: &__args, locals: &__locals )
    }

    open func setUI( _ _arg0: TableHeaderUI? ) {
        setUI( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.setUpdateTableInRealTime(boolean)

    private static var setUpdateTableInRealTime_MethodID_35: jmethodID?

    open func setUpdateTableInRealTime( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUpdateTableInRealTime", methodSig: "(Z)V", methodCache: &JTableHeader.setUpdateTableInRealTime_MethodID_35, args: &__args, locals: &__locals )
    }

    open func setUpdateTableInRealTime( _ _arg0: Bool ) {
        setUpdateTableInRealTime( arg0: _arg0 )
    }

    /// public void javax.swing.table.JTableHeader.updateUI()

    // Skipping method: false true false false false 

    /// private void javax.swing.table.JTableHeader.writeObject(java.io.ObjectOutputStream) throws java.io.IOException

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

}

