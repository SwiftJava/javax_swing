
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.plaf.BorderUIResource$MatteBorderUIResource ///

open class BorderUIResource_MatteBorderUIResource: MatteBorder, UIResource {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var BorderUIResource_MatteBorderUIResourceJNIClass: jclass?

    /// protected java.awt.Color javax.swing.border.MatteBorder.color

    private static var color_FieldID: jfieldID?

    override open var color: java_awt.Color! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "color", fieldType: "Ljava/awt/Color;", fieldCache: &BorderUIResource_MatteBorderUIResource.color_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? java_awt.Color( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "color", fieldType: "Ljava/awt/Color;", fieldCache: &BorderUIResource_MatteBorderUIResource.color_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected javax.swing.Icon javax.swing.border.MatteBorder.tileIcon

    private static var tileIcon_FieldID: jfieldID?

    override open var tileIcon: Icon! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "tileIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &BorderUIResource_MatteBorderUIResource.tileIcon_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? IconForward( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "tileIcon", fieldType: "Ljavax/swing/Icon;", fieldCache: &BorderUIResource_MatteBorderUIResource.tileIcon_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.bottom

    private static var bottom_FieldID: jfieldID?

    override open var bottom: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "bottom", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.bottom_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "bottom", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.bottom_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.left

    private static var left_FieldID: jfieldID?

    override open var left: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "left", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.left_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "left", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.left_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.right

    private static var right_FieldID: jfieldID?

    override open var right: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "right", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.right_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "right", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.right_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// protected int javax.swing.border.EmptyBorder.top

    private static var top_FieldID: jfieldID?

    override open var top: Int {
        get {
            let __value = JNIField.GetIntField( fieldName: "top", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.top_FieldID, object: javaObject )
            return Int(__value)
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = jvalue( i: jint(newValue) )
            JNIField.SetIntField( fieldName: "top", fieldType: "I", fieldCache: &BorderUIResource_MatteBorderUIResource.top_FieldID, object: javaObject, value: __value.i, locals: &__locals )
        }
    }

    /// public javax.swing.plaf.BorderUIResource$MatteBorderUIResource(javax.swing.Icon)

    private static var new_MethodID_1: jmethodID?

    public convenience init( tileIcon: Icon? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: tileIcon, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$MatteBorderUIResource", classCache: &BorderUIResource_MatteBorderUIResource.BorderUIResource_MatteBorderUIResourceJNIClass, methodSig: "(Ljavax/swing/Icon;)V", methodCache: &BorderUIResource_MatteBorderUIResource.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _tileIcon: Icon? ) {
        self.init( tileIcon: _tileIcon )
    }

    /// public javax.swing.plaf.BorderUIResource$MatteBorderUIResource(int,int,int,int,javax.swing.Icon)

    private static var new_MethodID_2: jmethodID?

    public convenience init( top: Int, left: Int, bottom: Int, right: Int, tileIcon: Icon? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = jvalue( i: jint(top) )
        __args[1] = jvalue( i: jint(left) )
        __args[2] = jvalue( i: jint(bottom) )
        __args[3] = jvalue( i: jint(right) )
        __args[4] = JNIType.toJava( value: tileIcon, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$MatteBorderUIResource", classCache: &BorderUIResource_MatteBorderUIResource.BorderUIResource_MatteBorderUIResourceJNIClass, methodSig: "(IIIILjavax/swing/Icon;)V", methodCache: &BorderUIResource_MatteBorderUIResource.new_MethodID_2, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int, _ _tileIcon: Icon? ) {
        self.init( top: _top, left: _left, bottom: _bottom, right: _right, tileIcon: _tileIcon )
    }

    /// public javax.swing.plaf.BorderUIResource$MatteBorderUIResource(int,int,int,int,java.awt.Color)

    private static var new_MethodID_3: jmethodID?

    public convenience init( top: Int, left: Int, bottom: Int, right: Int, color: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 5 )
        __args[0] = jvalue( i: jint(top) )
        __args[1] = jvalue( i: jint(left) )
        __args[2] = jvalue( i: jint(bottom) )
        __args[3] = jvalue( i: jint(right) )
        __args[4] = JNIType.toJava( value: color, locals: &__locals )
        let __object = JNIMethod.NewObject( className: "javax/swing/plaf/BorderUIResource$MatteBorderUIResource", classCache: &BorderUIResource_MatteBorderUIResource.BorderUIResource_MatteBorderUIResourceJNIClass, methodSig: "(IIIILjava/awt/Color;)V", methodCache: &BorderUIResource_MatteBorderUIResource.new_MethodID_3, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    public convenience init( _ _top: Int, _ _left: Int, _ _bottom: Int, _ _right: Int, _ _color: java_awt.Color? ) {
        self.init( top: _top, left: _left, bottom: _bottom, right: _right, color: _color )
    }

}

