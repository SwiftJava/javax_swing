
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// class javax.swing.text.JTextComponent ///

open class JTextComponent: JComponent, Scrollable {

    public convenience init?( casting object: java_swift.JavaObject, _ file: StaticString = #file, _ line: Int = #line ) {
        self.init( javaObject: nil )
        object.withJavaObject {
            self.javaObject = $0
        }
    }

    private static var JTextComponentJNIClass: jclass?

    /// public static final java.lang.String javax.swing.text.JTextComponent.DEFAULT_KEYMAP

    private static var DEFAULT_KEYMAP_FieldID: jfieldID?

    open static var DEFAULT_KEYMAP: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "DEFAULT_KEYMAP", fieldType: "Ljava/lang/String;", fieldCache: &DEFAULT_KEYMAP_FieldID, className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.Object javax.swing.text.JTextComponent.FOCUSED_COMPONENT

    /// public static final java.lang.String javax.swing.text.JTextComponent.FOCUS_ACCELERATOR_KEY

    private static var FOCUS_ACCELERATOR_KEY_FieldID: jfieldID?

    open static var FOCUS_ACCELERATOR_KEY: String! {
        get {
            let __value = JNIField.GetStaticObjectField( fieldName: "FOCUS_ACCELERATOR_KEY", fieldType: "Ljava/lang/String;", fieldCache: &FOCUS_ACCELERATOR_KEY_FieldID, className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? String( javaObject: __value ) : nil
        }
    }

    /// private static final java.lang.Object javax.swing.text.JTextComponent.KEYMAP_TABLE

    /// private static com.sun.beans.util.Cache javax.swing.text.JTextComponent.METHOD_OVERRIDDEN

    /// private static javax.swing.text.JTextComponent$DefaultTransferHandler javax.swing.text.JTextComponent.defaultTransferHandler

    /// private transient javax.swing.text.Caret javax.swing.text.JTextComponent.caret

    /// private java.awt.Color javax.swing.text.JTextComponent.caretColor

    /// private transient javax.swing.text.JTextComponent$MutableCaretEvent javax.swing.text.JTextComponent.caretEvent

    /// private boolean javax.swing.text.JTextComponent.checkedInputOverride

    /// private javax.swing.text.SimpleAttributeSet javax.swing.text.JTextComponent.composedTextAttribute

    /// private javax.swing.text.JTextComponent$ComposedTextCaret javax.swing.text.JTextComponent.composedTextCaret

    /// private java.lang.String javax.swing.text.JTextComponent.composedTextContent

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.composedTextEnd

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.composedTextStart

    /// private java.awt.Color javax.swing.text.JTextComponent.disabledTextColor

    /// private boolean javax.swing.text.JTextComponent.dragEnabled

    /// private transient javax.swing.text.JTextComponent$DropLocation javax.swing.text.JTextComponent.dropLocation

    /// private javax.swing.DropMode javax.swing.text.JTextComponent.dropMode

    /// private boolean javax.swing.text.JTextComponent.editable

    /// private char javax.swing.text.JTextComponent.focusAccelerator

    /// private transient javax.swing.text.Highlighter javax.swing.text.JTextComponent.highlighter

    /// private transient java.awt.im.InputMethodRequests javax.swing.text.JTextComponent.inputMethodRequestsHandler

    /// private transient javax.swing.text.Keymap javax.swing.text.JTextComponent.keymap

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.latestCommittedTextEnd

    /// private javax.swing.text.Position javax.swing.text.JTextComponent.latestCommittedTextStart

    /// private java.awt.Insets javax.swing.text.JTextComponent.margin

    /// private javax.swing.text.Document javax.swing.text.JTextComponent.model

    /// private javax.swing.text.NavigationFilter javax.swing.text.JTextComponent.navigationFilter

    /// private boolean javax.swing.text.JTextComponent.needToSendKeyTypedEvent

    /// private transient javax.swing.text.Caret javax.swing.text.JTextComponent.originalCaret

    /// private java.awt.Color javax.swing.text.JTextComponent.selectedTextColor

    /// private java.awt.Color javax.swing.text.JTextComponent.selectionColor

    /// private static final int javax.swing.JComponent.ACTIONMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.ANCESTOR_USING_BUFFER

    /// private static final int javax.swing.JComponent.AUTOSCROLLS_SET

    /// private static final int javax.swing.JComponent.COMPLETELY_OBSCURED

    /// private static final int javax.swing.JComponent.CREATED_DOUBLE_BUFFER

    /// static boolean javax.swing.JComponent.DEBUG_GRAPHICS_LOADED

    // Skipping field: true false false false false false 

    /// private static final int javax.swing.JComponent.FOCUS_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_BACKWARD_SET

    /// private static final int javax.swing.JComponent.FOCUS_TRAVERSAL_KEYS_FORWARD_SET

    /// private static final int javax.swing.JComponent.INHERITS_POPUP_MENU

    /// private static final java.lang.Object javax.swing.JComponent.INPUT_VERIFIER_SOURCE_KEY

    /// private static final int javax.swing.JComponent.IS_DOUBLE_BUFFERED

    /// private static final int javax.swing.JComponent.IS_OPAQUE

    /// private static final int javax.swing.JComponent.IS_PAINTING_TILE

    /// private static final int javax.swing.JComponent.IS_PRINTING

    /// private static final int javax.swing.JComponent.IS_PRINTING_ALL

    /// private static final int javax.swing.JComponent.IS_REPAINTING

    /// private static final java.lang.String javax.swing.JComponent.KEYBOARD_BINDINGS_KEY

    /// private static final int javax.swing.JComponent.KEY_EVENTS_ENABLED

    /// private static final java.lang.String javax.swing.JComponent.NEXT_FOCUS

    /// private static final int javax.swing.JComponent.NOT_OBSCURED

    /// private static final int javax.swing.JComponent.OPAQUE_SET

    /// private static final int javax.swing.JComponent.PARTIALLY_OBSCURED

    /// private static final int javax.swing.JComponent.REQUEST_FOCUS_DISABLED

    /// private static final int javax.swing.JComponent.RESERVED_1

    /// private static final int javax.swing.JComponent.RESERVED_2

    /// private static final int javax.swing.JComponent.RESERVED_3

    /// private static final int javax.swing.JComponent.RESERVED_4

    /// private static final int javax.swing.JComponent.RESERVED_5

    /// private static final int javax.swing.JComponent.RESERVED_6

    /// public static final java.lang.String javax.swing.JComponent.TOOL_TIP_TEXT_KEY

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.UNDEFINED_CONDITION

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_FOCUSED

    // Skipping field: false true false false false false 

    /// public static final int javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW

    // Skipping field: false true false false false false 

    /// private static final java.lang.String javax.swing.JComponent.WHEN_IN_FOCUSED_WINDOW_BINDINGS

    /// private static final int javax.swing.JComponent.WIF_INPUTMAP_CREATED

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_FIRST

    /// private static final int javax.swing.JComponent.WRITE_OBJ_COUNTER_LAST

    /// private static java.awt.Component javax.swing.JComponent.componentObtainingGraphicsFrom

    /// private static java.lang.Object javax.swing.JComponent.componentObtainingGraphicsFromLock

    /// private static final java.lang.String javax.swing.JComponent.defaultLocale

    /// static final sun.awt.RequestFocusController javax.swing.JComponent.focusController

    // Skipping field: true false false false false false 

    /// private static java.util.Set javax.swing.JComponent.managingFocusBackwardTraversalKeys

    /// private static java.util.Set javax.swing.JComponent.managingFocusForwardTraversalKeys

    /// private static final java.util.Hashtable javax.swing.JComponent.readObjectCallbacks

    /// private static java.util.List javax.swing.JComponent.tempRectangles

    /// private static final java.lang.String javax.swing.JComponent.uiClassID

    /// private transient java.lang.Object javax.swing.JComponent.aaTextInfo

    /// private javax.swing.ActionMap javax.swing.JComponent.actionMap

    /// private float javax.swing.JComponent.alignmentX

    /// private float javax.swing.JComponent.alignmentY

    /// private javax.swing.InputMap javax.swing.JComponent.ancestorInputMap

    /// private boolean javax.swing.JComponent.autoscrolls

    /// private javax.swing.border.Border javax.swing.JComponent.border

    /// private transient javax.swing.ArrayTable javax.swing.JComponent.clientProperties

    /// private int javax.swing.JComponent.flags

    /// private javax.swing.InputMap javax.swing.JComponent.focusInputMap

    /// private javax.swing.InputVerifier javax.swing.JComponent.inputVerifier

    /// private boolean javax.swing.JComponent.isAlignmentXSet

    /// private boolean javax.swing.JComponent.isAlignmentYSet

    /// protected javax.swing.event.EventListenerList javax.swing.JComponent.listenerList

    private static var listenerList_FieldID: jfieldID?

    override open var listenerList: EventListenerList! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JTextComponent.listenerList_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? EventListenerList( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "listenerList", fieldType: "Ljavax/swing/event/EventListenerList;", fieldCache: &JTextComponent.listenerList_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient java.awt.Component javax.swing.JComponent.paintingChild

    // Skipping field: true false false false false false 

    /// private javax.swing.JPopupMenu javax.swing.JComponent.popupMenu

    /// private transient java.util.concurrent.atomic.AtomicBoolean javax.swing.JComponent.revalidateRunnableScheduled

    /// protected transient javax.swing.plaf.ComponentUI javax.swing.JComponent.ui

    private static var ui_FieldID: jfieldID?

    override open var ui: ComponentUI! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JTextComponent.ui_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? ComponentUI( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "ui", fieldType: "Ljavax/swing/plaf/ComponentUI;", fieldCache: &JTextComponent.ui_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// private boolean javax.swing.JComponent.verifyInputWhenFocusTarget

    /// private java.beans.VetoableChangeSupport javax.swing.JComponent.vetoableChangeSupport

    /// private javax.swing.ComponentInputMap javax.swing.JComponent.windowInputMap

    /// private static final java.awt.Component[] java.awt.Container.EMPTY_ARRAY

    /// static final boolean java.awt.Container.INCLUDE_SELF

    // Skipping field: true false false false false false 

    /// static final boolean java.awt.Container.SEARCH_HEAVYWEIGHTS

    // Skipping field: true false false false false false 

    /// private static boolean java.awt.Container.descendUnconditionallyWhenValidating

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.eventLog

    /// private static final boolean java.awt.Container.isJavaAwtSmartInvalidate

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Container.mixingLog

    /// private static final java.io.ObjectStreamField[] java.awt.Container.serialPersistentFields

    /// private static final long java.awt.Container.serialVersionUID

    /// private java.util.List java.awt.Container.component

    /// transient java.awt.event.ContainerListener java.awt.Container.containerListener

    // Skipping field: true false false false false false 

    /// private int java.awt.Container.containerSerializedDataVersion

    /// transient int java.awt.Container.descendantsCount

    // Skipping field: true false false false false false 

    /// private java.awt.LightweightDispatcher java.awt.Container.dispatcher

    /// private boolean java.awt.Container.focusCycleRoot

    /// private transient java.awt.FocusTraversalPolicy java.awt.Container.focusTraversalPolicy

    /// private boolean java.awt.Container.focusTraversalPolicyProvider

    /// java.awt.LayoutManager java.awt.Container.layoutMgr

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningBoundsChildren

    // Skipping field: true false false false false false 

    /// transient int java.awt.Container.listeningChildren

    // Skipping field: true false false false false false 

    /// transient sun.awt.AppContext java.awt.Container.modalAppContext

    // Skipping field: true false false false false false 

    /// transient java.awt.Component java.awt.Container.modalComp

    // Skipping field: true false false false false false 

    /// private transient int java.awt.Container.numOfHWComponents

    /// private transient int java.awt.Container.numOfLWComponents

    /// transient java.awt.Color java.awt.Container.preserveBackgroundColor

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Container.printing

    /// private transient java.util.Set java.awt.Container.printingThreads

    /// static final boolean java.awt.Component.$assertionsDisabled

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.BOTTOM_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.CENTER_ALIGNMENT

    // Skipping field: false true false false false false 

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_DEFAULT

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_SET

    /// private static final int java.awt.Component.FOCUS_TRAVERSABLE_UNKNOWN

    /// public static final float java.awt.Component.LEFT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.Object java.awt.Component.LOCK

    // Skipping field: true false false false false false 

    /// public static final float java.awt.Component.RIGHT_ALIGNMENT

    // Skipping field: false true false false false false 

    /// public static final float java.awt.Component.TOP_ALIGNMENT

    // Skipping field: false true false false false false 

    /// static final java.lang.String java.awt.Component.actionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.adjustmentListenerK

    // Skipping field: true false false false false false 

    /// private static final java.lang.Class[] java.awt.Component.coalesceEventsParams

    /// private static final java.util.Map java.awt.Component.coalesceMap

    /// static final java.lang.String java.awt.Component.componentListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.containerListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.eventLog

    /// static final java.lang.String java.awt.Component.focusListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.focusLog

    /// private static final java.lang.String[] java.awt.Component.focusTraversalKeyPropertyNames

    /// static final java.lang.String java.awt.Component.hierarchyBoundsListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.hierarchyListenerK

    // Skipping field: true false false false false false 

    /// static int java.awt.Component.incRate

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.inputMethodListenerK

    // Skipping field: true false false false false false 

    /// static boolean java.awt.Component.isInc

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.itemListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.keyListenerK

    // Skipping field: true false false false false false 

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.log

    /// private static final sun.util.logging.PlatformLogger java.awt.Component.mixingLog

    /// static final java.lang.String java.awt.Component.mouseListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseMotionListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.mouseWheelListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.ownedWindowK

    // Skipping field: true false false false false false 

    /// private static sun.awt.RequestFocusController java.awt.Component.requestFocusController

    /// private static final long java.awt.Component.serialVersionUID

    /// static final java.lang.String java.awt.Component.textListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowFocusListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowListenerK

    // Skipping field: true false false false false false 

    /// static final java.lang.String java.awt.Component.windowStateListenerK

    // Skipping field: true false false false false false 

    /// private transient volatile java.security.AccessControlContext java.awt.Component.acc

    /// protected javax.accessibility.AccessibleContext java.awt.Component.accessibleContext

    private static var accessibleContext_FieldID: jfieldID?

    override open var accessibleContext: /* class javax.accessibility.AccessibleContext */ UnavailableObject! {
        get {
            let __value = JNIField.GetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JTextComponent.accessibleContext_FieldID, object: javaObject )
            defer { JNI.DeleteLocalRef( __value ) }
            return __value != nil ? /* class javax.accessibility.AccessibleContext */ UnavailableObject( javaObject: __value ) : nil
        }
        set(newValue) {
            var __locals = [jobject]()
            let __value = JNIType.toJava( value: newValue, locals: &__locals )
            JNIField.SetObjectField( fieldName: "accessibleContext", fieldType: "Ljavax/accessibility/AccessibleContext;", fieldCache: &JTextComponent.accessibleContext_FieldID, object: javaObject, value: __value.l, locals: &__locals )
        }
    }

    /// transient sun.awt.AppContext java.awt.Component.appContext

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.autoFocusTransferOnDisposal

    /// java.awt.Color java.awt.Component.background

    // Skipping field: true false false false false false 

    /// transient boolean java.awt.Component.backgroundEraseDisabled

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.boundsOp

    /// transient java.awt.image.BufferStrategy java.awt.Component.bufferStrategy

    // Skipping field: true false false false false false 

    /// private java.beans.PropertyChangeSupport java.awt.Component.changeSupport

    /// private transient boolean java.awt.Component.coalescingEnabled

    /// transient java.awt.event.ComponentListener java.awt.Component.componentListener

    // Skipping field: true false false false false false 

    /// transient java.awt.ComponentOrientation java.awt.Component.componentOrientation

    // Skipping field: true false false false false false 

    /// private int java.awt.Component.componentSerializedDataVersion

    /// private transient sun.java2d.pipe.Region java.awt.Component.compoundShape

    /// java.awt.Cursor java.awt.Component.cursor

    // Skipping field: true false false false false false 

    /// java.awt.dnd.DropTarget java.awt.Component.dropTarget

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.enabled

    // Skipping field: true false false false false false 

    /// transient sun.awt.EventQueueItem[] java.awt.Component.eventCache

    // Skipping field: true false false false false false 

    /// long java.awt.Component.eventMask

    // Skipping field: true false false false false false 

    /// transient java.awt.event.FocusListener java.awt.Component.focusListener

    // Skipping field: true false false false false false 

    /// java.util.Set[] java.awt.Component.focusTraversalKeys

    // Skipping field: true false false false false false 

    /// private boolean java.awt.Component.focusTraversalKeysEnabled

    /// private boolean java.awt.Component.focusable

    /// volatile java.awt.Font java.awt.Component.font

    // Skipping field: true false false false false false 

    /// java.awt.Color java.awt.Component.foreground

    // Skipping field: true false false false false false 

    /// private transient volatile java.awt.GraphicsConfiguration java.awt.Component.graphicsConfig

    /// int java.awt.Component.height

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyBoundsListener java.awt.Component.hierarchyBoundsListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.HierarchyListener java.awt.Component.hierarchyListener

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.ignoreRepaint

    // Skipping field: true false false false false false 

    /// transient java.awt.event.InputMethodListener java.awt.Component.inputMethodListener

    // Skipping field: true false false false false false 

    /// private transient boolean java.awt.Component.isAddNotifyComplete

    /// private int java.awt.Component.isFocusTraversableOverridden

    /// boolean java.awt.Component.isPacked

    // Skipping field: true false false false false false 

    /// transient java.awt.event.KeyListener java.awt.Component.keyListener

    // Skipping field: true false false false false false 

    /// java.util.Locale java.awt.Component.locale

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.maxSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.maxSizeSet

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.minSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.minSizeSet

    // Skipping field: true false false false false false 

    /// private transient sun.java2d.pipe.Region java.awt.Component.mixingCutoutRegion

    /// transient java.awt.event.MouseListener java.awt.Component.mouseListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseMotionListener java.awt.Component.mouseMotionListener

    // Skipping field: true false false false false false 

    /// transient java.awt.event.MouseWheelListener java.awt.Component.mouseWheelListener

    // Skipping field: true false false false false false 

    /// private java.lang.String java.awt.Component.name

    /// private boolean java.awt.Component.nameExplicitlySet

    /// boolean java.awt.Component.newEventsOnly

    // Skipping field: true false false false false false 

    /// private transient java.lang.Object java.awt.Component.objectLock

    /// transient java.awt.Container java.awt.Component.parent

    // Skipping field: true false false false false false 

    /// transient java.awt.peer.ComponentPeer java.awt.Component.peer

    // Skipping field: true false false false false false 

    /// java.awt.Font java.awt.Component.peerFont

    // Skipping field: true false false false false false 

    /// java.util.Vector java.awt.Component.popups

    // Skipping field: true false false false false false 

    /// java.awt.Dimension java.awt.Component.prefSize

    // Skipping field: true false false false false false 

    /// boolean java.awt.Component.prefSizeSet

    // Skipping field: true false false false false false 

    /// private volatile boolean java.awt.Component.valid

    /// boolean java.awt.Component.visible

    // Skipping field: true false false false false false 

    /// int java.awt.Component.width

    // Skipping field: true false false false false false 

    /// transient java.lang.RuntimeException java.awt.Component.windowClosingException

    // Skipping field: true false false false false false 

    /// int java.awt.Component.x

    // Skipping field: true false false false false false 

    /// int java.awt.Component.y

    // Skipping field: true false false false false false 

    /// public static final int java.awt.image.ImageObserver.ABORT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ALLBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.ERROR

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.FRAMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.HEIGHT

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.PROPERTIES

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.SOMEBITS

    // Skipping field: false true false false false false 

    /// public static final int java.awt.image.ImageObserver.WIDTH

    // Skipping field: false true false false false false 

    /// public javax.swing.text.JTextComponent()

    private static var new_MethodID_1: jmethodID?

    public convenience init() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __object = JNIMethod.NewObject( className: "javax/swing/text/JTextComponent", classCache: &JTextComponent.JTextComponentJNIClass, methodSig: "()V", methodCache: &JTextComponent.new_MethodID_1, args: &__args, locals: &__locals )
        self.init( javaObject: __object )
        JNI.DeleteLocalRef( __object )
    }

    /// static javax.swing.text.Document javax.swing.text.JTextComponent.access$100(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static javax.swing.text.SimpleAttributeSet javax.swing.text.JTextComponent.access$1000(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static int javax.swing.text.JTextComponent.access$300(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static java.lang.Object javax.swing.text.JTextComponent.access$400()

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$500(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$502(javax.swing.text.JTextComponent,javax.swing.text.Position)

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$600(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$602(javax.swing.text.JTextComponent,javax.swing.text.Position)

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$700(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static javax.swing.text.Position javax.swing.text.JTextComponent.access$800(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// static java.lang.String javax.swing.text.JTextComponent.access$900(javax.swing.text.JTextComponent)

    // Skipping method: true false false false false 

    /// public static javax.swing.text.Keymap javax.swing.text.JTextComponent.addKeymap(java.lang.String,javax.swing.text.Keymap)

    private static var addKeymap_MethodID_2: jmethodID?

    open class func addKeymap( arg0: String?, arg1: Keymap? ) -> Keymap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass, methodName: "addKeymap", methodSig: "(Ljava/lang/String;Ljavax/swing/text/Keymap;)Ljavax/swing/text/Keymap;", methodCache: &addKeymap_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? KeymapForward( javaObject: __return ) : nil
    }

    open class func addKeymap( _ _arg0: String?, _ _arg1: Keymap? ) -> Keymap! {
        return addKeymap( arg0: _arg0, arg1: _arg1 )
    }

    /// static final javax.swing.text.JTextComponent javax.swing.text.JTextComponent.getFocusedComponent()

    // Skipping method: true false false false false 

    /// public static javax.swing.text.Keymap javax.swing.text.JTextComponent.getKeymap(java.lang.String)

    private static var getKeymap_MethodID_3: jmethodID?

    open class func getKeymap( arg0: String? ) -> Keymap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass, methodName: "getKeymap", methodSig: "(Ljava/lang/String;)Ljavax/swing/text/Keymap;", methodCache: &getKeymap_MethodID_3, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? KeymapForward( javaObject: __return ) : nil
    }

    open class func getKeymap( _ _arg0: String? ) -> Keymap! {
        return getKeymap( arg0: _arg0 )
    }

    /// private static java.util.HashMap javax.swing.text.JTextComponent.getKeymapTable()

    /// public static void javax.swing.text.JTextComponent.loadKeymap(javax.swing.text.Keymap,javax.swing.text.JTextComponent$KeyBinding[],javax.swing.Action[])

    private static var loadKeymap_MethodID_4: jmethodID?

    open class func loadKeymap( arg0: Keymap?, arg1: [JTextComponent_KeyBinding]?, arg2: [Action]? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = JNIType.toJava( value: arg2, locals: &__locals )
        JNIMethod.CallStaticVoidMethod( className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass, methodName: "loadKeymap", methodSig: "(Ljavax/swing/text/Keymap;[Ljavax/swing/text/JTextComponent$KeyBinding;[Ljavax/swing/Action;)V", methodCache: &loadKeymap_MethodID_4, args: &__args, locals: &__locals )
    }

    open class func loadKeymap( _ _arg0: Keymap?, _ _arg1: [JTextComponent_KeyBinding]?, _ _arg2: [Action]? ) {
        loadKeymap( arg0: _arg0, arg1: _arg1, arg2: _arg2 )
    }

    /// public static javax.swing.text.Keymap javax.swing.text.JTextComponent.removeKeymap(java.lang.String)

    private static var removeKeymap_MethodID_5: jmethodID?

    open class func removeKeymap( arg0: String? ) -> Keymap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallStaticObjectMethod( className: "javax/swing/text/JTextComponent", classCache: &JTextComponentJNIClass, methodName: "removeKeymap", methodSig: "(Ljava/lang/String;)Ljavax/swing/text/Keymap;", methodCache: &removeKeymap_MethodID_5, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? KeymapForward( javaObject: __return ) : nil
    }

    open class func removeKeymap( _ _arg0: String? ) -> Keymap! {
        return removeKeymap( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.addCaretListener(javax.swing.event.CaretListener)

    private static var addCaretListener_MethodID_6: jmethodID?

    open func addCaretListener( arg0: CaretListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "addCaretListener", methodSig: "(Ljavax/swing/event/CaretListener;)V", methodCache: &JTextComponent.addCaretListener_MethodID_6, args: &__args, locals: &__locals )
    }

    open func addCaretListener( _ _arg0: CaretListener? ) {
        addCaretListener( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.addInputMethodListener(java.awt.event.InputMethodListener)

    // Skipping method: false true false false false 

    /// boolean javax.swing.text.JTextComponent.composedTextExists()

    // Skipping method: true false false false false 

    /// public void javax.swing.text.JTextComponent.copy()

    private static var copy_MethodID_7: jmethodID?

    open func copy() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "copy", methodSig: "()V", methodCache: &JTextComponent.copy_MethodID_7, args: &__args, locals: &__locals )
    }


    /// private void javax.swing.text.JTextComponent.createComposedTextAttribute(int,java.text.AttributedCharacterIterator)

    /// public void javax.swing.text.JTextComponent.cut()

    private static var cut_MethodID_8: jmethodID?

    open func cut() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "cut", methodSig: "()V", methodCache: &JTextComponent.cut_MethodID_8, args: &__args, locals: &__locals )
    }


    /// javax.swing.text.JTextComponent$DropLocation javax.swing.text.JTextComponent.dropLocationForPoint(java.awt.Point)

    // Skipping method: true false false false false 

    /// private void javax.swing.text.JTextComponent.exchangeCaret(javax.swing.text.Caret,javax.swing.text.Caret)

    /// protected void javax.swing.text.JTextComponent.fireCaretUpdate(javax.swing.event.CaretEvent)

    private static var fireCaretUpdate_MethodID_9: jmethodID?

    open func fireCaretUpdate( arg0: CaretEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "fireCaretUpdate", methodSig: "(Ljavax/swing/event/CaretEvent;)V", methodCache: &JTextComponent.fireCaretUpdate_MethodID_9, args: &__args, locals: &__locals )
    }

    open func fireCaretUpdate( _ _arg0: CaretEvent? ) {
        fireCaretUpdate( arg0: _arg0 )
    }

    /// public javax.accessibility.AccessibleContext javax.swing.text.JTextComponent.getAccessibleContext()

    // Skipping method: false true false false false 

    /// public javax.swing.Action[] javax.swing.text.JTextComponent.getActions()

    private static var getActions_MethodID_10: jmethodID?

    open func getActions() -> [Action]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getActions", methodSig: "()[Ljavax/swing/Action;", methodCache: &JTextComponent.getActions_MethodID_10, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [ActionForward].self, from: __return )
    }


    /// public javax.swing.text.Caret javax.swing.text.JTextComponent.getCaret()

    private static var getCaret_MethodID_11: jmethodID?

    open func getCaret() -> Caret! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaret", methodSig: "()Ljavax/swing/text/Caret;", methodCache: &JTextComponent.getCaret_MethodID_11, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? CaretForward( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.text.JTextComponent.getCaretColor()

    private static var getCaretColor_MethodID_12: jmethodID?

    open func getCaretColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretColor", methodSig: "()Ljava/awt/Color;", methodCache: &JTextComponent.getCaretColor_MethodID_12, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public javax.swing.event.CaretListener[] javax.swing.text.JTextComponent.getCaretListeners()

    private static var getCaretListeners_MethodID_13: jmethodID?

    open func getCaretListeners() -> [CaretListener]! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getCaretListeners", methodSig: "()[Ljavax/swing/event/CaretListener;", methodCache: &JTextComponent.getCaretListeners_MethodID_13, args: &__args, locals: &__locals )
        return JNIType.toSwift( type: [CaretListenerForward].self, from: __return )
    }


    /// public int javax.swing.text.JTextComponent.getCaretPosition()

    private static var getCaretPosition_MethodID_14: jmethodID?

    open func getCaretPosition() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getCaretPosition", methodSig: "()I", methodCache: &JTextComponent.getCaretPosition_MethodID_14, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// private int javax.swing.text.JTextComponent.getCurrentEventModifiers()

    /// public java.awt.Color javax.swing.text.JTextComponent.getDisabledTextColor()

    private static var getDisabledTextColor_MethodID_15: jmethodID?

    open func getDisabledTextColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDisabledTextColor", methodSig: "()Ljava/awt/Color;", methodCache: &JTextComponent.getDisabledTextColor_MethodID_15, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public javax.swing.text.Document javax.swing.text.JTextComponent.getDocument()

    private static var getDocument_MethodID_16: jmethodID?

    open func getDocument() -> Document! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDocument", methodSig: "()Ljavax/swing/text/Document;", methodCache: &JTextComponent.getDocument_MethodID_16, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DocumentForward( javaObject: __return ) : nil
    }


    /// public boolean javax.swing.text.JTextComponent.getDragEnabled()

    private static var getDragEnabled_MethodID_17: jmethodID?

    open func getDragEnabled() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getDragEnabled", methodSig: "()Z", methodCache: &JTextComponent.getDragEnabled_MethodID_17, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public final javax.swing.text.JTextComponent$DropLocation javax.swing.text.JTextComponent.getDropLocation()

    private static var getDropLocation_MethodID_18: jmethodID?

    open func getDropLocation() -> JTextComponent_DropLocation! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDropLocation", methodSig: "()Ljavax/swing/text/JTextComponent$DropLocation;", methodCache: &JTextComponent.getDropLocation_MethodID_18, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? JTextComponent_DropLocation( javaObject: __return ) : nil
    }


    /// public final javax.swing.DropMode javax.swing.text.JTextComponent.getDropMode()

    private static var getDropMode_MethodID_19: jmethodID?

    open func getDropMode() -> DropMode! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getDropMode", methodSig: "()Ljavax/swing/DropMode;", methodCache: &JTextComponent.getDropMode_MethodID_19, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? DropMode( javaObject: __return ) : nil
    }


    /// public char javax.swing.text.JTextComponent.getFocusAccelerator()

    private static var getFocusAccelerator_MethodID_20: jmethodID?

    open func getFocusAccelerator() -> UInt16 {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallCharMethod( object: javaObject, methodName: "getFocusAccelerator", methodSig: "()C", methodCache: &JTextComponent.getFocusAccelerator_MethodID_20, args: &__args, locals: &__locals )
        return __return
    }


    /// public javax.swing.text.Highlighter javax.swing.text.JTextComponent.getHighlighter()

    private static var getHighlighter_MethodID_21: jmethodID?

    open func getHighlighter() -> Highlighter! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getHighlighter", methodSig: "()Ljavax/swing/text/Highlighter;", methodCache: &JTextComponent.getHighlighter_MethodID_21, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? HighlighterForward( javaObject: __return ) : nil
    }


    /// public java.awt.im.InputMethodRequests javax.swing.text.JTextComponent.getInputMethodRequests()

    // Skipping method: false true false false false 

    /// public javax.swing.text.Keymap javax.swing.text.JTextComponent.getKeymap()

    private static var getKeymap_MethodID_22: jmethodID?

    open func getKeymap() -> Keymap! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getKeymap", methodSig: "()Ljavax/swing/text/Keymap;", methodCache: &JTextComponent.getKeymap_MethodID_22, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? KeymapForward( javaObject: __return ) : nil
    }


    /// public java.awt.Insets javax.swing.text.JTextComponent.getMargin()

    private static var getMargin_MethodID_23: jmethodID?

    open func getMargin() -> java_awt.Insets! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getMargin", methodSig: "()Ljava/awt/Insets;", methodCache: &JTextComponent.getMargin_MethodID_23, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Insets( javaObject: __return ) : nil
    }


    /// public javax.swing.text.NavigationFilter javax.swing.text.JTextComponent.getNavigationFilter()

    private static var getNavigationFilter_MethodID_24: jmethodID?

    open func getNavigationFilter() -> NavigationFilter! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getNavigationFilter", methodSig: "()Ljavax/swing/text/NavigationFilter;", methodCache: &JTextComponent.getNavigationFilter_MethodID_24, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? NavigationFilter( javaObject: __return ) : nil
    }


    /// public java.awt.Dimension javax.swing.text.JTextComponent.getPreferredScrollableViewportSize()

    private static var getPreferredScrollableViewportSize_MethodID_25: jmethodID?

    open func getPreferredScrollableViewportSize() -> java_awt.Dimension! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPreferredScrollableViewportSize", methodSig: "()Ljava/awt/Dimension;", methodCache: &JTextComponent.getPreferredScrollableViewportSize_MethodID_25, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Dimension( javaObject: __return ) : nil
    }


    /// public java.awt.print.Printable javax.swing.text.JTextComponent.getPrintable(java.text.MessageFormat,java.text.MessageFormat)

    private static var getPrintable_MethodID_26: jmethodID?

    open func getPrintable( arg0: /* class java.text.MessageFormat */ UnavailableObject?, arg1: /* class java.text.MessageFormat */ UnavailableObject? ) -> java_awt.Printable! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getPrintable", methodSig: "(Ljava/text/MessageFormat;Ljava/text/MessageFormat;)Ljava/awt/print/Printable;", methodCache: &JTextComponent.getPrintable_MethodID_26, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.PrintableForward( javaObject: __return ) : nil
    }

    open func getPrintable( _ _arg0: /* class java.text.MessageFormat */ UnavailableObject?, _ _arg1: /* class java.text.MessageFormat */ UnavailableObject? ) -> java_awt.Printable! {
        return getPrintable( arg0: _arg0, arg1: _arg1 )
    }

    /// public int javax.swing.text.JTextComponent.getScrollableBlockIncrement(java.awt.Rectangle,int,int)

    private static var getScrollableBlockIncrement_MethodID_27: jmethodID?

    open func getScrollableBlockIncrement( visibleRect: java_awt.Rectangle?, orientation: Int, direction: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: visibleRect, locals: &__locals )
        __args[1] = jvalue( i: jint(orientation) )
        __args[2] = jvalue( i: jint(direction) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getScrollableBlockIncrement", methodSig: "(Ljava/awt/Rectangle;II)I", methodCache: &JTextComponent.getScrollableBlockIncrement_MethodID_27, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getScrollableBlockIncrement( _ _visibleRect: java_awt.Rectangle?, _ _orientation: Int, _ _direction: Int ) -> Int {
        return getScrollableBlockIncrement( visibleRect: _visibleRect, orientation: _orientation, direction: _direction )
    }

    /// public boolean javax.swing.text.JTextComponent.getScrollableTracksViewportHeight()

    private static var getScrollableTracksViewportHeight_MethodID_28: jmethodID?

    open func getScrollableTracksViewportHeight() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getScrollableTracksViewportHeight", methodSig: "()Z", methodCache: &JTextComponent.getScrollableTracksViewportHeight_MethodID_28, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public boolean javax.swing.text.JTextComponent.getScrollableTracksViewportWidth()

    private static var getScrollableTracksViewportWidth_MethodID_29: jmethodID?

    open func getScrollableTracksViewportWidth() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "getScrollableTracksViewportWidth", methodSig: "()Z", methodCache: &JTextComponent.getScrollableTracksViewportWidth_MethodID_29, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// public int javax.swing.text.JTextComponent.getScrollableUnitIncrement(java.awt.Rectangle,int,int)

    private static var getScrollableUnitIncrement_MethodID_30: jmethodID?

    open func getScrollableUnitIncrement( visibleRect: java_awt.Rectangle?, orientation: Int, direction: Int ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 3 )
        __args[0] = JNIType.toJava( value: visibleRect, locals: &__locals )
        __args[1] = jvalue( i: jint(orientation) )
        __args[2] = jvalue( i: jint(direction) )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getScrollableUnitIncrement", methodSig: "(Ljava/awt/Rectangle;II)I", methodCache: &JTextComponent.getScrollableUnitIncrement_MethodID_30, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func getScrollableUnitIncrement( _ _visibleRect: java_awt.Rectangle?, _ _orientation: Int, _ _direction: Int ) -> Int {
        return getScrollableUnitIncrement( visibleRect: _visibleRect, orientation: _orientation, direction: _direction )
    }

    /// public java.lang.String javax.swing.text.JTextComponent.getSelectedText()

    private static var getSelectedText_MethodID_31: jmethodID?

    open func getSelectedText() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedText", methodSig: "()Ljava/lang/String;", methodCache: &JTextComponent.getSelectedText_MethodID_31, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.text.JTextComponent.getSelectedTextColor()

    private static var getSelectedTextColor_MethodID_32: jmethodID?

    open func getSelectedTextColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectedTextColor", methodSig: "()Ljava/awt/Color;", methodCache: &JTextComponent.getSelectedTextColor_MethodID_32, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public java.awt.Color javax.swing.text.JTextComponent.getSelectionColor()

    private static var getSelectionColor_MethodID_33: jmethodID?

    open func getSelectionColor() -> java_awt.Color! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getSelectionColor", methodSig: "()Ljava/awt/Color;", methodCache: &JTextComponent.getSelectionColor_MethodID_33, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Color( javaObject: __return ) : nil
    }


    /// public int javax.swing.text.JTextComponent.getSelectionEnd()

    private static var getSelectionEnd_MethodID_34: jmethodID?

    open func getSelectionEnd() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSelectionEnd", methodSig: "()I", methodCache: &JTextComponent.getSelectionEnd_MethodID_34, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public int javax.swing.text.JTextComponent.getSelectionStart()

    private static var getSelectionStart_MethodID_35: jmethodID?

    open func getSelectionStart() -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "getSelectionStart", methodSig: "()I", methodCache: &JTextComponent.getSelectionStart_MethodID_35, args: &__args, locals: &__locals )
        return Int(__return)
    }


    /// public java.lang.String javax.swing.text.JTextComponent.getText(int,int) throws javax.swing.text.BadLocationException

    private static var getText_MethodID_36: jmethodID?

    open func getText( arg0: Int, arg1: Int ) throws /* javax.swing.text.BadLocationException */ -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getText", methodSig: "(II)Ljava/lang/String;", methodCache: &JTextComponent.getText_MethodID_36, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw BadLocationException( javaObject: throwable )
        }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    open func getText( _ _arg0: Int, _ _arg1: Int ) throws /* javax.swing.text.BadLocationException */ -> String! {
        return try getText( arg0: _arg0, arg1: _arg1 )
    }

    /// public java.lang.String javax.swing.text.JTextComponent.getText()

    private static var getText_MethodID_37: jmethodID?

    open func getText() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getText", methodSig: "()Ljava/lang/String;", methodCache: &JTextComponent.getText_MethodID_37, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public java.lang.String javax.swing.text.JTextComponent.getToolTipText(java.awt.event.MouseEvent)

    private static var getToolTipText_MethodID_38: jmethodID?

    open func getToolTipText( arg0: java_awt.MouseEvent? ) -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getToolTipText", methodSig: "(Ljava/awt/event/MouseEvent;)Ljava/lang/String;", methodCache: &JTextComponent.getToolTipText_MethodID_38, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }

    override open func getToolTipText( _ _arg0: java_awt.MouseEvent? ) -> String! {
        return getToolTipText( arg0: _arg0 )
    }

    /// public javax.swing.plaf.TextUI javax.swing.text.JTextComponent.getUI()

    private static var getUI_MethodID_39: jmethodID?

    open func getUI() -> TextUI! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getUI", methodSig: "()Ljavax/swing/plaf/TextUI;", methodCache: &JTextComponent.getUI_MethodID_39, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? TextUI( javaObject: __return ) : nil
    }


    /// private void javax.swing.text.JTextComponent.installDefaultTransferHandlerIfNecessary()

    /// private void javax.swing.text.JTextComponent.invokeAction(java.lang.String,javax.swing.Action)

    /// public boolean javax.swing.text.JTextComponent.isEditable()

    private static var isEditable_MethodID_40: jmethodID?

    open func isEditable() -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "isEditable", methodSig: "()Z", methodCache: &JTextComponent.isEditable_MethodID_40, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }


    /// private void javax.swing.text.JTextComponent.mapCommittedTextToAction(java.lang.String)

    /// public java.awt.Rectangle javax.swing.text.JTextComponent.modelToView(int) throws javax.swing.text.BadLocationException

    private static var modelToView_MethodID_41: jmethodID?

    open func modelToView( arg0: Int ) throws /* javax.swing.text.BadLocationException */ -> java_awt.Rectangle! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "modelToView", methodSig: "(I)Ljava/awt/Rectangle;", methodCache: &JTextComponent.modelToView_MethodID_41, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw BadLocationException( javaObject: throwable )
        }
        return __return != nil ? java_awt.Rectangle( javaObject: __return ) : nil
    }

    open func modelToView( _ _arg0: Int ) throws /* javax.swing.text.BadLocationException */ -> java_awt.Rectangle! {
        return try modelToView( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.moveCaretPosition(int)

    private static var moveCaretPosition_MethodID_42: jmethodID?

    open func moveCaretPosition( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "moveCaretPosition", methodSig: "(I)V", methodCache: &JTextComponent.moveCaretPosition_MethodID_42, args: &__args, locals: &__locals )
    }

    open func moveCaretPosition( _ _arg0: Int ) {
        moveCaretPosition( arg0: _arg0 )
    }

    /// protected java.lang.String javax.swing.text.JTextComponent.paramString()

    private static var paramString_MethodID_43: jmethodID?

    override open func paramString() -> String! {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "paramString", methodSig: "()Ljava/lang/String;", methodCache: &JTextComponent.paramString_MethodID_43, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? String( javaObject: __return ) : nil
    }


    /// public void javax.swing.text.JTextComponent.paste()

    private static var paste_MethodID_44: jmethodID?

    open func paste() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "paste", methodSig: "()V", methodCache: &JTextComponent.paste_MethodID_44, args: &__args, locals: &__locals )
    }


    /// public boolean javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat) throws java.awt.print.PrinterException

    private static var print_MethodID_45: jmethodID?

    open func print( arg0: /* class java.text.MessageFormat */ UnavailableObject?, arg1: /* class java.text.MessageFormat */ UnavailableObject? ) throws /* java.awt.print.PrinterException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/text/MessageFormat;Ljava/text/MessageFormat;)Z", methodCache: &JTextComponent.print_MethodID_45, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_awt.PrinterException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }

    open func print( _ _arg0: /* class java.text.MessageFormat */ UnavailableObject?, _ _arg1: /* class java.text.MessageFormat */ UnavailableObject? ) throws /* java.awt.print.PrinterException */ -> Bool {
        return try print( arg0: _arg0, arg1: _arg1 )
    }

    /// public boolean javax.swing.text.JTextComponent.print(java.text.MessageFormat,java.text.MessageFormat,boolean,javax.print.PrintService,javax.print.attribute.PrintRequestAttributeSet,boolean) throws java.awt.print.PrinterException

    private static var print_MethodID_46: jmethodID?

    open func print( arg0: /* class java.text.MessageFormat */ UnavailableObject?, arg1: /* class java.text.MessageFormat */ UnavailableObject?, arg2: Bool, arg3: /* interface javax.print.PrintService */ UnavailableProtocol?, arg4: /* interface javax.print.attribute.PrintRequestAttributeSet */ UnavailableProtocol?, arg5: Bool ) throws /* java.awt.print.PrinterException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        __args[2] = jvalue( z: jboolean(arg2 ? JNI_TRUE : JNI_FALSE) )
        __args[3] = JNIType.toJava( value: arg3, locals: &__locals )
        __args[4] = JNIType.toJava( value: arg4, locals: &__locals )
        __args[5] = jvalue( z: jboolean(arg5 ? JNI_TRUE : JNI_FALSE) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "print", methodSig: "(Ljava/text/MessageFormat;Ljava/text/MessageFormat;ZLjavax/print/PrintService;Ljavax/print/attribute/PrintRequestAttributeSet;Z)Z", methodCache: &JTextComponent.print_MethodID_46, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_awt.PrinterException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }

    open func print( _ _arg0: /* class java.text.MessageFormat */ UnavailableObject?, _ _arg1: /* class java.text.MessageFormat */ UnavailableObject?, _ _arg2: Bool, _ _arg3: /* interface javax.print.PrintService */ UnavailableProtocol?, _ _arg4: /* interface javax.print.attribute.PrintRequestAttributeSet */ UnavailableProtocol?, _ _arg5: Bool ) throws /* java.awt.print.PrinterException */ -> Bool {
        return try print( arg0: _arg0, arg1: _arg1, arg2: _arg2, arg3: _arg3, arg4: _arg4, arg5: _arg5 )
    }

    /// public boolean javax.swing.text.JTextComponent.print() throws java.awt.print.PrinterException

    private static var print_MethodID_47: jmethodID?

    open func print() throws /* java.awt.print.PrinterException */ -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "print", methodSig: "()Z", methodCache: &JTextComponent.print_MethodID_47, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw java_awt.PrinterException( javaObject: throwable )
        }
        return __return != jboolean(JNI_FALSE)
    }


    /// protected void javax.swing.text.JTextComponent.processInputMethodEvent(java.awt.event.InputMethodEvent)

    private static var processInputMethodEvent_MethodID_48: jmethodID?

    override open func processInputMethodEvent( arg0: java_awt.InputMethodEvent? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "processInputMethodEvent", methodSig: "(Ljava/awt/event/InputMethodEvent;)V", methodCache: &JTextComponent.processInputMethodEvent_MethodID_48, args: &__args, locals: &__locals )
    }

    override open func processInputMethodEvent( _ _arg0: java_awt.InputMethodEvent? ) {
        processInputMethodEvent( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.read(java.io.Reader,java.lang.Object) throws java.io.IOException

    private static var read_MethodID_49: jmethodID?

    open func read( arg0: /* class java.io.Reader */ UnavailableObject?, arg1: java_swift.JavaObject? ) throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        __args[1] = JNIType.toJava( value: arg1, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "read", methodSig: "(Ljava/io/Reader;Ljava/lang/Object;)V", methodCache: &JTextComponent.read_MethodID_49, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }

    open func read( _ _arg0: /* class java.io.Reader */ UnavailableObject?, _ _arg1: java_swift.JavaObject? ) throws /* java.io.IOException */ {
        try read( arg0: _arg0, arg1: _arg1 )
    }

    /// private void javax.swing.text.JTextComponent.readObject(java.io.ObjectInputStream) throws java.io.IOException,java.lang.ClassNotFoundException

    /// public void javax.swing.text.JTextComponent.removeCaretListener(javax.swing.event.CaretListener)

    private static var removeCaretListener_MethodID_50: jmethodID?

    open func removeCaretListener( arg0: CaretListener? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "removeCaretListener", methodSig: "(Ljavax/swing/event/CaretListener;)V", methodCache: &JTextComponent.removeCaretListener_MethodID_50, args: &__args, locals: &__locals )
    }

    open func removeCaretListener( _ _arg0: CaretListener? ) {
        removeCaretListener( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.removeNotify()

    // Skipping method: false true false false false 

    /// private void javax.swing.text.JTextComponent.replaceInputMethodText(java.awt.event.InputMethodEvent)

    /// public void javax.swing.text.JTextComponent.replaceSelection(java.lang.String)

    private static var replaceSelection_MethodID_51: jmethodID?

    open func replaceSelection( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "replaceSelection", methodSig: "(Ljava/lang/String;)V", methodCache: &JTextComponent.replaceSelection_MethodID_51, args: &__args, locals: &__locals )
    }

    open func replaceSelection( _ _arg0: String? ) {
        replaceSelection( arg0: _arg0 )
    }

    /// protected void javax.swing.text.JTextComponent.restoreComposedText()

    private static var restoreComposedText_MethodID_52: jmethodID?

    open func restoreComposedText() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "restoreComposedText", methodSig: "()V", methodCache: &JTextComponent.restoreComposedText_MethodID_52, args: &__args, locals: &__locals )
    }


    /// protected boolean javax.swing.text.JTextComponent.saveComposedText(int)

    private static var saveComposedText_MethodID_53: jmethodID?

    open func saveComposedText( arg0: Int ) -> Bool {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        let __return = JNIMethod.CallBooleanMethod( object: javaObject, methodName: "saveComposedText", methodSig: "(I)Z", methodCache: &JTextComponent.saveComposedText_MethodID_53, args: &__args, locals: &__locals )
        return __return != jboolean(JNI_FALSE)
    }

    open func saveComposedText( _ _arg0: Int ) -> Bool {
        return saveComposedText( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.select(int,int)

    private static var select_MethodID_54: jmethodID?

    open func select( arg0: Int, arg1: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 2 )
        __args[0] = jvalue( i: jint(arg0) )
        __args[1] = jvalue( i: jint(arg1) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "select", methodSig: "(II)V", methodCache: &JTextComponent.select_MethodID_54, args: &__args, locals: &__locals )
    }

    open func select( _ _arg0: Int, _ _arg1: Int ) {
        select( arg0: _arg0, arg1: _arg1 )
    }

    /// public void javax.swing.text.JTextComponent.selectAll()

    private static var selectAll_MethodID_55: jmethodID?

    open func selectAll() {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "selectAll", methodSig: "()V", methodCache: &JTextComponent.selectAll_MethodID_55, args: &__args, locals: &__locals )
    }


    /// public void javax.swing.text.JTextComponent.setCaret(javax.swing.text.Caret)

    private static var setCaret_MethodID_56: jmethodID?

    open func setCaret( arg0: Caret? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCaret", methodSig: "(Ljavax/swing/text/Caret;)V", methodCache: &JTextComponent.setCaret_MethodID_56, args: &__args, locals: &__locals )
    }

    open func setCaret( _ _arg0: Caret? ) {
        setCaret( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setCaretColor(java.awt.Color)

    private static var setCaretColor_MethodID_57: jmethodID?

    open func setCaretColor( arg0: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCaretColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &JTextComponent.setCaretColor_MethodID_57, args: &__args, locals: &__locals )
    }

    open func setCaretColor( _ _arg0: java_awt.Color? ) {
        setCaretColor( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setCaretPosition(int)

    private static var setCaretPosition_MethodID_58: jmethodID?

    open func setCaretPosition( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setCaretPosition", methodSig: "(I)V", methodCache: &JTextComponent.setCaretPosition_MethodID_58, args: &__args, locals: &__locals )
    }

    open func setCaretPosition( _ _arg0: Int ) {
        setCaretPosition( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setComponentOrientation(java.awt.ComponentOrientation)

    // Skipping method: false true false false false 

    /// public void javax.swing.text.JTextComponent.setDisabledTextColor(java.awt.Color)

    private static var setDisabledTextColor_MethodID_59: jmethodID?

    open func setDisabledTextColor( arg0: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDisabledTextColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &JTextComponent.setDisabledTextColor_MethodID_59, args: &__args, locals: &__locals )
    }

    open func setDisabledTextColor( _ _arg0: java_awt.Color? ) {
        setDisabledTextColor( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setDocument(javax.swing.text.Document)

    private static var setDocument_MethodID_60: jmethodID?

    open func setDocument( arg0: Document? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDocument", methodSig: "(Ljavax/swing/text/Document;)V", methodCache: &JTextComponent.setDocument_MethodID_60, args: &__args, locals: &__locals )
    }

    open func setDocument( _ _arg0: Document? ) {
        setDocument( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setDragEnabled(boolean)

    private static var setDragEnabled_MethodID_61: jmethodID?

    open func setDragEnabled( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDragEnabled", methodSig: "(Z)V", methodCache: &JTextComponent.setDragEnabled_MethodID_61, args: &__args, locals: &__locals )
    }

    open func setDragEnabled( _ _arg0: Bool ) {
        setDragEnabled( arg0: _arg0 )
    }

    /// java.lang.Object javax.swing.text.JTextComponent.setDropLocation(javax.swing.TransferHandler$DropLocation,java.lang.Object,boolean)

    // Skipping method: true false false false false 

    /// public final void javax.swing.text.JTextComponent.setDropMode(javax.swing.DropMode)

    private static var setDropMode_MethodID_62: jmethodID?

    open func setDropMode( arg0: DropMode? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setDropMode", methodSig: "(Ljavax/swing/DropMode;)V", methodCache: &JTextComponent.setDropMode_MethodID_62, args: &__args, locals: &__locals )
    }

    open func setDropMode( _ _arg0: DropMode? ) {
        setDropMode( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setEditable(boolean)

    private static var setEditable_MethodID_63: jmethodID?

    open func setEditable( arg0: Bool ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( z: jboolean(arg0 ? JNI_TRUE : JNI_FALSE) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setEditable", methodSig: "(Z)V", methodCache: &JTextComponent.setEditable_MethodID_63, args: &__args, locals: &__locals )
    }

    open func setEditable( _ _arg0: Bool ) {
        setEditable( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setFocusAccelerator(char)

    private static var setFocusAccelerator_MethodID_64: jmethodID?

    open func setFocusAccelerator( arg0: UInt16 ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( c: arg0 )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setFocusAccelerator", methodSig: "(C)V", methodCache: &JTextComponent.setFocusAccelerator_MethodID_64, args: &__args, locals: &__locals )
    }

    open func setFocusAccelerator( _ _arg0: UInt16 ) {
        setFocusAccelerator( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setHighlighter(javax.swing.text.Highlighter)

    private static var setHighlighter_MethodID_65: jmethodID?

    open func setHighlighter( arg0: Highlighter? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setHighlighter", methodSig: "(Ljavax/swing/text/Highlighter;)V", methodCache: &JTextComponent.setHighlighter_MethodID_65, args: &__args, locals: &__locals )
    }

    open func setHighlighter( _ _arg0: Highlighter? ) {
        setHighlighter( arg0: _arg0 )
    }

    /// private void javax.swing.text.JTextComponent.setInputMethodCaretPosition(java.awt.event.InputMethodEvent)

    /// public void javax.swing.text.JTextComponent.setKeymap(javax.swing.text.Keymap)

    private static var setKeymap_MethodID_66: jmethodID?

    open func setKeymap( arg0: Keymap? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setKeymap", methodSig: "(Ljavax/swing/text/Keymap;)V", methodCache: &JTextComponent.setKeymap_MethodID_66, args: &__args, locals: &__locals )
    }

    open func setKeymap( _ _arg0: Keymap? ) {
        setKeymap( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setMargin(java.awt.Insets)

    private static var setMargin_MethodID_67: jmethodID?

    open func setMargin( arg0: java_awt.Insets? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setMargin", methodSig: "(Ljava/awt/Insets;)V", methodCache: &JTextComponent.setMargin_MethodID_67, args: &__args, locals: &__locals )
    }

    open func setMargin( _ _arg0: java_awt.Insets? ) {
        setMargin( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setNavigationFilter(javax.swing.text.NavigationFilter)

    private static var setNavigationFilter_MethodID_68: jmethodID?

    open func setNavigationFilter( arg0: NavigationFilter? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setNavigationFilter", methodSig: "(Ljavax/swing/text/NavigationFilter;)V", methodCache: &JTextComponent.setNavigationFilter_MethodID_68, args: &__args, locals: &__locals )
    }

    open func setNavigationFilter( _ _arg0: NavigationFilter? ) {
        setNavigationFilter( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setSelectedTextColor(java.awt.Color)

    private static var setSelectedTextColor_MethodID_69: jmethodID?

    open func setSelectedTextColor( arg0: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelectedTextColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &JTextComponent.setSelectedTextColor_MethodID_69, args: &__args, locals: &__locals )
    }

    open func setSelectedTextColor( _ _arg0: java_awt.Color? ) {
        setSelectedTextColor( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setSelectionColor(java.awt.Color)

    private static var setSelectionColor_MethodID_70: jmethodID?

    open func setSelectionColor( arg0: java_awt.Color? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelectionColor", methodSig: "(Ljava/awt/Color;)V", methodCache: &JTextComponent.setSelectionColor_MethodID_70, args: &__args, locals: &__locals )
    }

    open func setSelectionColor( _ _arg0: java_awt.Color? ) {
        setSelectionColor( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setSelectionEnd(int)

    private static var setSelectionEnd_MethodID_71: jmethodID?

    open func setSelectionEnd( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelectionEnd", methodSig: "(I)V", methodCache: &JTextComponent.setSelectionEnd_MethodID_71, args: &__args, locals: &__locals )
    }

    open func setSelectionEnd( _ _arg0: Int ) {
        setSelectionEnd( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setSelectionStart(int)

    private static var setSelectionStart_MethodID_72: jmethodID?

    open func setSelectionStart( arg0: Int ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = jvalue( i: jint(arg0) )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setSelectionStart", methodSig: "(I)V", methodCache: &JTextComponent.setSelectionStart_MethodID_72, args: &__args, locals: &__locals )
    }

    open func setSelectionStart( _ _arg0: Int ) {
        setSelectionStart( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setText(java.lang.String)

    private static var setText_MethodID_73: jmethodID?

    open func setText( arg0: String? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setText", methodSig: "(Ljava/lang/String;)V", methodCache: &JTextComponent.setText_MethodID_73, args: &__args, locals: &__locals )
    }

    open func setText( _ _arg0: String? ) {
        setText( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.setUI(javax.swing.plaf.TextUI)

    private static var setUI_MethodID_74: jmethodID?

    open func setUI( arg0: TextUI? ) {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "setUI", methodSig: "(Ljavax/swing/plaf/TextUI;)V", methodCache: &JTextComponent.setUI_MethodID_74, args: &__args, locals: &__locals )
    }

    open func setUI( _ _arg0: TextUI? ) {
        setUI( arg0: _arg0 )
    }

    /// private boolean javax.swing.text.JTextComponent.shouldSynthensizeKeyEvents()

    /// void javax.swing.text.JTextComponent.updateInputMap(javax.swing.text.Keymap,javax.swing.text.Keymap)

    // Skipping method: true false false false false 

    /// public void javax.swing.text.JTextComponent.updateUI()

    // Skipping method: false true false false false 

    /// public int javax.swing.text.JTextComponent.viewToModel(java.awt.Point)

    private static var viewToModel_MethodID_75: jmethodID?

    open func viewToModel( arg0: java_awt.Point? ) -> Int {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        let __return = JNIMethod.CallIntMethod( object: javaObject, methodName: "viewToModel", methodSig: "(Ljava/awt/Point;)I", methodCache: &JTextComponent.viewToModel_MethodID_75, args: &__args, locals: &__locals )
        return Int(__return)
    }

    open func viewToModel( _ _arg0: java_awt.Point? ) -> Int {
        return viewToModel( arg0: _arg0 )
    }

    /// public void javax.swing.text.JTextComponent.write(java.io.Writer) throws java.io.IOException

    private static var write_MethodID_76: jmethodID?

    open func write( arg0: /* class java.io.Writer */ UnavailableObject? ) throws /* java.io.IOException */ {
        var __locals = [jobject]()
        var __args = [jvalue]( repeating: jvalue(), count: 1 )
        __args[0] = JNIType.toJava( value: arg0, locals: &__locals )
        JNIMethod.CallVoidMethod( object: javaObject, methodName: "write", methodSig: "(Ljava/io/Writer;)V", methodCache: &JTextComponent.write_MethodID_76, args: &__args, locals: &__locals )
        if let throwable = JNI.ExceptionCheck() {
            defer { JNI.DeleteLocalRef( throwable ) }
            throw /* class java.io.IOException */ UnavailableObject( javaObject: throwable )
        }
    }

    open func write( _ _arg0: /* class java.io.Writer */ UnavailableObject? ) throws /* java.io.IOException */ {
        try write( arg0: _arg0 )
    }

    /// In declared protocol but not defined.. ///

    /// public abstract javax.accessibility.AccessibleContext javax.accessibility.Accessible.getAccessibleContext()

    // Skipping method: false true false false false 

}

