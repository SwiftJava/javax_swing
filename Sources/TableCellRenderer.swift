
import java_swift
import java_awt

/// generated by: genswift.java 'java/lang|java/util|java/sql|java/awt|javax/swing' ///

/// interface javax.swing.table.TableCellRenderer ///

public protocol TableCellRenderer: JavaProtocol {

    /// public abstract java.awt.Component javax.swing.table.TableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)

    func getTableCellRendererComponent( table: JTable?, value: java_swift.JavaObject?, isSelected: Bool, hasFocus: Bool, row: Int, column: Int ) -> java_awt.Component!

}


open class TableCellRendererForward: JNIObjectForward, TableCellRenderer {

    private static var TableCellRendererJNIClass: jclass?

    /// public abstract java.awt.Component javax.swing.table.TableCellRenderer.getTableCellRendererComponent(javax.swing.JTable,java.lang.Object,boolean,boolean,int,int)

    private static var getTableCellRendererComponent_MethodID_2: jmethodID?

    open func getTableCellRendererComponent( table: JTable?, value: java_swift.JavaObject?, isSelected: Bool, hasFocus: Bool, row: Int, column: Int ) -> java_awt.Component! {
        var __args = [jvalue]( repeating: jvalue(), count: 6 )
        var __locals = [jobject]()
        __args[0] = JNIType.toJava( value: table != nil ? table! as JNIObject : nil, locals: &__locals )
        __args[1] = JNIType.toJava( value: value != nil ? value! as JNIObject : nil, locals: &__locals )
        __args[2] = JNIType.toJava( value: isSelected, locals: &__locals )
        __args[3] = JNIType.toJava( value: hasFocus, locals: &__locals )
        __args[4] = JNIType.toJava( value: row, locals: &__locals )
        __args[5] = JNIType.toJava( value: column, locals: &__locals )
        let __return = JNIMethod.CallObjectMethod( object: javaObject, methodName: "getTableCellRendererComponent", methodSig: "(Ljavax/swing/JTable;Ljava/lang/Object;ZZII)Ljava/awt/Component;", methodCache: &TableCellRendererForward.getTableCellRendererComponent_MethodID_2, args: &__args, locals: &__locals )
        defer { JNI.DeleteLocalRef( __return ) }
        return __return != nil ? java_awt.Component( javaObject: __return ) : nil
    }

    open func getTableCellRendererComponent( _ _table: JTable?, _ _value: java_swift.JavaObject?, _ _isSelected: Bool, _ _hasFocus: Bool, _ _row: Int, _ _column: Int ) -> java_awt.Component! {
        return getTableCellRendererComponent( table: _table, value: _value, isSelected: _isSelected, hasFocus: _hasFocus, row: _row, column: _column )
    }

}


